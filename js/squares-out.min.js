var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SquaresOut;
(function (SquaresOut) {
    var Game = (function (_super) {
        __extends(Game, _super);
        function Game() {
            var _this = _super.call(this, SquaresOut.GameConstants.GAME_WIDTH, SquaresOut.GameConstants.GAME_HEIGHT, Phaser.AUTO, "content", null, false, true) || this;
            _this.state.add("PreLoader", SquaresOut.PreLoader, false);
            _this.state.add("SplashState", SquaresOut.SplashState, false);
            _this.state.add("LevelSelection", SquaresOut.LevelSelection, false);
            _this.state.add("LevelEditionState", SquaresOut.LevelEditionState, false);
            _this.state.add("BoardState", SquaresOut.BoardState, false);
            _this.state.add("Boot", SquaresOut.Boot, true);
            return _this;
        }
        return Game;
    }(Phaser.Game));
    SquaresOut.Game = Game;
})(SquaresOut || (SquaresOut = {}));
window.onload = function () {
    var game = new SquaresOut.Game();
};
var SquaresOut;
(function (SquaresOut) {
    var AudioManager = (function () {
        function AudioManager() {
            if (AudioManager._instance) {
                throw new Error("Error: Instantiation failed: Use GameVars.getInstance() instead of new");
            }
            else {
                AudioManager._instance = this;
            }
        }
        AudioManager.getInstance = function () {
            if (AudioManager._instance === null) {
                AudioManager._instance = new AudioManager();
            }
            return AudioManager._instance;
        };
        AudioManager.prototype.init = function (game) {
            this.game = game;
            this.loopPlayingKey = null;
            this.audioSprite = this.game.add.audioSprite("audio-sprite");
            var audioStateStr = SquaresOut.GameVars.getLocalStorageData(SquaresOut.GameConstants.AUDIO_STATE_KEY);
            if (audioStateStr !== "") {
                this.isMuted = JSON.parse(audioStateStr);
            }
            else {
                this.isMuted = false;
            }
            this.game.sound.mute = this.isMuted;
        };
        AudioManager.prototype.mute = function () {
            this.isMuted = true;
            this.game.sound.mute = true;
            SquaresOut.GameVars.setLocalStorageData(SquaresOut.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
        };
        AudioManager.prototype.unmute = function () {
            this.isMuted = false;
            this.game.sound.mute = false;
            SquaresOut.GameVars.setLocalStorageData(SquaresOut.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
        };
        AudioManager.prototype.playSound = function (key, loop, volume) {
            loop = loop || false;
            this.audioSprite.play(key, volume);
            if (loop) {
                if (this.loopPlayingKey && (this.loopPlayingKey !== key)) {
                    this.stopSound(this.loopPlayingKey, false, true);
                }
                this.loopPlayingKey = key;
            }
        };
        AudioManager.prototype.stopSound = function (key, fade, loop) {
            if (key === null || typeof key === "undefined") {
                return;
            }
            if (fade) {
                var sound = this.audioSprite.get(key);
                sound.fadeOut(850);
            }
            else {
                this.audioSprite.stop(key);
            }
            if (loop) {
                this.loopPlayingKey = null;
            }
        };
        return AudioManager;
    }());
    AudioManager._instance = null;
    SquaresOut.AudioManager = AudioManager;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var Board = (function (_super) {
        __extends(Board, _super);
        function Board(game) {
            var _this = _super.call(this, game, null, "board") || this;
            _this.scale.y = SquaresOut.GameVars.scaleY;
            _this.x = SquaresOut.GameConstants.GAME_WIDTH / 2;
            _this.y = SquaresOut.GameConstants.GAME_HEIGHT / 2;
            _this.squares = [];
            var square;
            var color;
            for (var col = 0; col < 5; col++) {
                _this.squares[col] = [];
                for (var row = 0; row < 5; row++) {
                    if (SquaresOut.GameConstants.EDITING_LEVELS) {
                        color = SquaresOut.GameConstants.RED_SQUARE;
                    }
                    else {
                        color = SquaresOut.GameVars.colors[col][row];
                    }
                    square = new SquaresOut.Square(_this.game, color, col, row);
                    square.x = col * SquaresOut.GameConstants.SQUARE_WIDTH - 2 * SquaresOut.GameConstants.SQUARE_WIDTH;
                    square.y = row * SquaresOut.GameConstants.SQUARE_WIDTH - 2 * SquaresOut.GameConstants.SQUARE_WIDTH;
                    _this.add(square);
                    _this.squares[col].push(square);
                }
            }
            return _this;
        }
        return Board;
    }(Phaser.Group));
    SquaresOut.Board = Board;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var BoardState = (function (_super) {
        __extends(BoardState, _super);
        function BoardState() {
            return _super.apply(this, arguments) || this;
        }
        BoardState.prototype.init = function () {
            BoardState.currentInstance = this;
            this.boardManager = new SquaresOut.LevelManager(this.game);
        };
        BoardState.prototype.create = function () {
            this.board = new SquaresOut.Board(this.game);
            this.add.existing(this.board);
            this.hud = new SquaresOut.HUD(this.game);
            this.add.existing(this.hud);
            this.gui = new SquaresOut.GUI(this.game);
            this.add.existing(this.gui);
            this.game.camera.flash(0x000000, SquaresOut.GameConstants.TIME_FADE, false);
        };
        BoardState.prototype.shutdown = function () {
            SquaresOut.SplashState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        BoardState.prototype.move = function () {
            this.hud.updateMoves();
        };
        BoardState.prototype.levelPassed = function () {
            this.game.camera.fade(0x000000, SquaresOut.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("BoardState", true, false);
            }, this);
        };
        BoardState.prototype.reset = function () {
            this.game.camera.fade(0x000000, SquaresOut.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("BoardState", true, false);
            }, this);
        };
        BoardState.prototype.exit = function () {
            this.game.camera.fade(0x000000, SquaresOut.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("LevelSelection", true, false);
            }, this);
        };
        return BoardState;
    }(Phaser.State));
    SquaresOut.BoardState = BoardState;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var GUI = (function (_super) {
        __extends(GUI, _super);
        function GUI(game) {
            var _this = _super.call(this, game, null, "gui") || this;
            _this.audioButton = new Phaser.Button(_this.game, 400, 35, "texture_atlas_1", _this.onAudioButtonClicked, _this);
            _this.audioButton.scale.y = SquaresOut.GameVars.scaleY;
            _this.add(_this.audioButton);
            if (SquaresOut.AudioManager.getInstance().isMuted) {
                _this.audioButton.setFrames("button_audio_off_on.png", "button_audio_off_off.png", "button_audio_off_on.png");
            }
            else {
                _this.audioButton.setFrames("button_audio_on_on.png", "button_audio_on_off.png", "button_audio_on_on.png");
            }
            _this.resetButton = new Phaser.Button(_this.game, 20, 520, "texture_atlas_1", _this.onResetClicked, _this);
            _this.resetButton.setFrames("button-reset-on.png", "button-reset-off.png", "button-reset-on.png");
            _this.resetButton.scale.y = SquaresOut.GameVars.scaleY;
            _this.add(_this.resetButton);
            _this.exitButton = new Phaser.Button(_this.game, 20, 570, "texture_atlas_1", _this.onExitClicked, _this);
            _this.exitButton.setFrames("button-exit-on.png", "button-exit-off.png", "button-exit-on.png");
            _this.exitButton.scale.y = SquaresOut.GameVars.scaleY;
            _this.add(_this.exitButton);
            return _this;
        }
        GUI.prototype.onAudioButtonClicked = function () {
            if (SquaresOut.AudioManager.getInstance().isMuted) {
                SquaresOut.AudioManager.getInstance().unmute();
                this.audioButton.setFrames("button_audio_on_on.png", "button_audio_on_off.png", "button_audio_on_on.png");
            }
            else {
                SquaresOut.AudioManager.getInstance().mute();
                this.audioButton.setFrames("button_audio_off_on.png", "button_audio_off_off.png", "button_audio_off_on.png");
            }
        };
        GUI.prototype.onResetClicked = function () {
            SquaresOut.LevelManager.currentInstance.resetLevel();
        };
        GUI.prototype.onExitClicked = function () {
            SquaresOut.LevelManager.currentInstance.exit();
        };
        return GUI;
    }(Phaser.Group));
    SquaresOut.GUI = GUI;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var HUD = (function (_super) {
        __extends(HUD, _super);
        function HUD(game) {
            var _this = _super.call(this, game, null, "hud") || this;
            _this.levelLabel = new Phaser.Text(_this.game, SquaresOut.GameConstants.GAME_WIDTH / 2, 20, "level " + SquaresOut.GameVars.currentLevel, { font: "40px Arial", fill: "#000000" });
            _this.levelLabel.anchor.x = .5;
            _this.levelLabel.scale.y = SquaresOut.GameVars.scaleY;
            _this.add(_this.levelLabel);
            _this.movements = new Phaser.Text(_this.game, 430, 530, "moves  " + SquaresOut.GameVars.moves, { font: "30px Arial", fill: "#000000" });
            _this.movements.anchor.x = 1;
            _this.movements.scale.y = SquaresOut.GameVars.scaleY;
            _this.add(_this.movements);
            _this.movementsRecord = new Phaser.Text(_this.game, 430, 580, "level's best " + SquaresOut.GameVars.levelBest, { font: "30px Arial", fill: "#000000" });
            _this.movementsRecord.anchor.x = 1;
            _this.movementsRecord.scale.y = SquaresOut.GameVars.scaleY;
            _this.add(_this.movementsRecord);
            return _this;
        }
        HUD.prototype.updateMoves = function () {
            this.movements.text = "moves " + SquaresOut.GameVars.moves;
        };
        return HUD;
    }(Phaser.Group));
    SquaresOut.HUD = HUD;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var LevelManager = (function () {
        function LevelManager(game) {
            LevelManager.currentInstance = this;
            this.game = game;
            SquaresOut.GameVars.levelPassed = false;
            SquaresOut.GameVars.moves = 0;
            SquaresOut.GameVars.levelBest = 17;
            SquaresOut.GameVars.colors = [];
            var bmd = new Phaser.BitmapData(this.game, "tmp-bitmapdata", 8, 8);
            var levelImage = new Phaser.Image(this.game, 0, 0, "texture_atlas_1", "level-" + SquaresOut.GameVars.currentLevel + ".png");
            bmd.draw(levelImage, 0, 0);
            bmd.update(0, 0, 8, 8);
            for (var col = 0; col < 8; col++) {
                SquaresOut.GameVars.colors[col] = [];
                for (var row = 0; row < 8; row++) {
                    var hex = bmd.getPixel32(col, row);
                    var r = (hex) & 0xFF;
                    var g = (hex >> 8) & 0xFF;
                    var b = (hex >> 16) & 0xFF;
                    if (r === 0xff && g === 0x00 && b === 0x00) {
                        SquaresOut.GameVars.colors[col].push(SquaresOut.GameConstants.RED_SQUARE);
                    }
                    if (r === 0xff && g === 0xff && b === 0xff) {
                        SquaresOut.GameVars.colors[col].push(SquaresOut.GameConstants.WHITE_SQUARE);
                    }
                }
            }
        }
        LevelManager.prototype.squareFlipped = function (column, row) {
            SquaresOut.GameVars.moves++;
            var squares = SquaresOut.BoardState.currentInstance.board.squares;
            var c;
            var r;
            for (var i = 0; i < LevelManager.neighbourSquares.length; i++) {
                c = LevelManager.neighbourSquares[i][0] + column;
                r = LevelManager.neighbourSquares[i][1] + row;
                if (c >= 0 && r >= 0 && c < squares.length && r < squares.length) {
                    squares[c][r].flip();
                }
            }
            var levelPassed = this.checkBoard();
            if (levelPassed) {
                this.levelPassed();
            }
            SquaresOut.BoardState.currentInstance.move();
        };
        LevelManager.prototype.checkBoard = function () {
            var passed = true;
            var squares = SquaresOut.BoardState.currentInstance.board.squares;
            for (var col = 0; col < 5 && passed; col++) {
                for (var row = 0; row < 5 && passed; row++) {
                    if (squares[col][row].color === SquaresOut.GameConstants.WHITE_SQUARE) {
                        passed = false;
                    }
                }
            }
            return passed;
        };
        LevelManager.prototype.resetLevel = function () {
            SquaresOut.BoardState.currentInstance.reset();
        };
        LevelManager.prototype.exit = function () {
            SquaresOut.BoardState.currentInstance.exit();
        };
        LevelManager.prototype.levelPassed = function () {
            SquaresOut.GameVars.levelPassed = true;
            SquaresOut.GameManager.levelPassed();
            SquaresOut.BoardState.currentInstance.levelPassed();
        };
        return LevelManager;
    }());
    LevelManager.neighbourSquares = [[0, -1], [-1, 0], [1, 0], [0, 1]];
    SquaresOut.LevelManager = LevelManager;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var Square = (function (_super) {
        __extends(Square, _super);
        function Square(game, color, column, row) {
            var _this = _super.call(this, game, null, "square") || this;
            _this.color = color;
            _this.column = column;
            _this.row = row;
            _this.redSquare = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(SquaresOut.GameConstants.RED_SQUARE));
            _this.redSquare.scale.set((SquaresOut.GameConstants.SQUARE_WIDTH - 9) / 64);
            _this.redSquare.anchor.set(.5);
            _this.redSquare.inputEnabled = true;
            _this.redSquare.events.onInputDown.add(_this.onClick, _this);
            _this.redSquare.events.onInputOver.add(_this.onOver, _this);
            _this.redSquare.events.onInputOut.add(_this.onOut, _this);
            _this.add(_this.redSquare);
            _this.whiteSquare = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(SquaresOut.GameConstants.WHITE_SQUARE));
            _this.whiteSquare.scale.set((SquaresOut.GameConstants.SQUARE_WIDTH - 9) / 64);
            _this.whiteSquare.anchor.set(.5);
            _this.whiteSquare.inputEnabled = true;
            _this.whiteSquare.events.onInputDown.add(_this.onClick, _this);
            _this.whiteSquare.events.onInputOver.add(_this.onOver, _this);
            _this.whiteSquare.events.onInputOut.add(_this.onOut, _this);
            _this.add(_this.whiteSquare);
            if (_this.color === SquaresOut.GameConstants.RED_SQUARE) {
                _this.whiteSquare.visible = false;
            }
            else {
                _this.redSquare.visible = false;
            }
            _this.overSprite = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(SquaresOut.GameConstants.GRAY_SQUARE));
            _this.overSprite.scale.set((SquaresOut.GameConstants.SQUARE_WIDTH - 9) / 64);
            _this.overSprite.anchor.set(.5);
            _this.overSprite.visible = false;
            _this.overSprite.alpha = .25;
            _this.add(_this.overSprite);
            return _this;
        }
        Square.prototype.flip = function () {
            this.color = this.color === SquaresOut.GameConstants.RED_SQUARE ? SquaresOut.GameConstants.WHITE_SQUARE : SquaresOut.GameConstants.RED_SQUARE;
            this.redSquare.visible = !this.redSquare.visible;
            this.whiteSquare.visible = !this.whiteSquare.visible;
        };
        Square.prototype.onClick = function () {
            if (SquaresOut.GameVars.levelPassed && !SquaresOut.GameConstants.EDITING_LEVELS) {
                return;
            }
            this.flip();
            if (SquaresOut.GameConstants.EDITING_LEVELS) {
                SquaresOut.LevelEditionState.currentInstance.move(this.column, this.row);
            }
            else {
                SquaresOut.LevelManager.currentInstance.squareFlipped(this.column, this.row);
            }
        };
        Square.prototype.onOver = function () {
            this.overSprite.visible = true;
        };
        Square.prototype.onOut = function () {
            this.overSprite.visible = false;
        };
        return Square;
    }(Phaser.Group));
    SquaresOut.Square = Square;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var Boot = (function (_super) {
        __extends(Boot, _super);
        function Boot() {
            return _super.apply(this, arguments) || this;
        }
        Boot.prototype.init = function () {
            Boot.currentInstance = this;
            this.input.maxPointers = 1;
            this.game.stage.disableVisibilityChange = true;
            this.game.stage.backgroundColor = "#cccccc";
            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.game.scale.pageAlignHorizontally = true;
            if (this.game.device.desktop) {
                SquaresOut.GameVars.scaleY = 1;
                this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
                this.game.scale.pageAlignHorizontally = true;
            }
            else {
                this.game.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
                SquaresOut.GameVars.scaleY = (4 / 3) / (window.innerHeight / window.innerWidth);
                this.game.scale.pageAlignHorizontally = true;
                this.game.scale.isPortrait = false;
                this.game.scale.forceOrientation(true, false);
            }
            if (SquaresOut.GameConstants.DEVELOPMENT) {
                this.game.time.advancedTiming = true;
            }
            SquaresOut.GameManager.init(this.game);
        };
        Boot.prototype.preload = function () {
        };
        Boot.prototype.create = function () {
            this.game.state.start("PreLoader", true, false);
        };
        Boot.prototype.shutdown = function () {
            Boot.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        return Boot;
    }(Phaser.State));
    SquaresOut.Boot = Boot;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var GameConstants = (function () {
        function GameConstants() {
        }
        return GameConstants;
    }());
    GameConstants.VERSION = "0.0";
    GameConstants.ASSETS_PATH = "assets";
    GameConstants.DEVELOPMENT = true;
    GameConstants.EDITING_LEVELS = false;
    GameConstants.GAME_WIDTH = 480;
    GameConstants.GAME_HEIGHT = 640;
    GameConstants.RED_SQUARE = "red square";
    GameConstants.BLUE_SQUARE = "blue square";
    GameConstants.GREEN_SQUARE = "green square";
    GameConstants.WHITE_SQUARE = "white square";
    GameConstants.GRAY_SQUARE = "gray square";
    GameConstants.SQUARE_WIDTH = 75;
    GameConstants.TIME_FADE = 350;
    GameConstants.TOTAL_LEVELS = 60;
    GameConstants.LEVEL_BEST_KEY = "level-bests-state";
    GameConstants.AUDIO_STATE_KEY = "squares-out-audio";
    SquaresOut.GameConstants = GameConstants;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var GameManager = (function () {
        function GameManager() {
        }
        GameManager.init = function (game) {
            GameManager.game = game;
            SquaresOut.GameVars.currentLevel = null;
            SquaresOut.GameVars.achievedLevel = 0;
            SquaresOut.GameVars.achievedLevel = 1;
            SquaresOut.GameVars.levelsBest = [];
            SquaresOut.GameVars.levelsBest[0] = 0;
            for (var i = 1; i < SquaresOut.GameConstants.TOTAL_LEVELS; i++) {
                SquaresOut.GameVars.levelsBest[i] = -1;
            }
        };
        GameManager.levelSelected = function (level) {
            SquaresOut.GameVars.currentLevel = level;
            SquaresOut.LevelSelection.currentInstance.goToBoardScene();
        };
        GameManager.levelPassed = function () {
            if (SquaresOut.GameVars.currentLevel < SquaresOut.GameConstants.TOTAL_LEVELS) {
                SquaresOut.GameVars.currentLevel++;
            }
        };
        return GameManager;
    }());
    SquaresOut.GameManager = GameManager;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var GameVars = (function () {
        function GameVars() {
        }
        GameVars.getLocalStorageData = function (key) {
            var value = localStorage.getItem(key);
            if (value !== null) {
                return value;
            }
            else {
                return "";
            }
        };
        GameVars.setLocalStorageData = function (key, value) {
            localStorage.setItem(key, value);
        };
        return GameVars;
    }());
    SquaresOut.GameVars = GameVars;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var LevelsContainer = (function (_super) {
        __extends(LevelsContainer, _super);
        function LevelsContainer(game, i) {
            var _this = _super.call(this, game, null, "level-container") || this;
            _this.scale.y = SquaresOut.GameVars.scaleY;
            var levelSelectionButton;
            for (var col = 0; col < 3; col++) {
                for (var row = 0; row < 4; row++) {
                    levelSelectionButton = new SquaresOut.LevelSelectionButton(_this.game, i * 12 + (col + 1) + 3 * row);
                    levelSelectionButton.x = -80 * (1 - col);
                    levelSelectionButton.y = -80 * (1.5 - row);
                    _this.add(levelSelectionButton);
                }
            }
            return _this;
        }
        return LevelsContainer;
    }(Phaser.Group));
    SquaresOut.LevelsContainer = LevelsContainer;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var LevelSelection = (function (_super) {
        __extends(LevelSelection, _super);
        function LevelSelection() {
            return _super.apply(this, arguments) || this;
        }
        LevelSelection.prototype.init = function () {
            LevelSelection.currentInstance = this;
            this.tweening = false;
            this.indexLevelsPage = 0;
        };
        LevelSelection.prototype.create = function () {
            var backgroundSprite = this.add.sprite(0, 0, this.game.cache.getBitmapData(SquaresOut.GameConstants.WHITE_SQUARE));
            backgroundSprite.scale.set(SquaresOut.GameConstants.GAME_WIDTH / 64, SquaresOut.GameConstants.GAME_HEIGHT / 64);
            this.levelsRail = new Phaser.Group(this.game);
            this.add.existing(this.levelsRail);
            var levelsContainer;
            for (var i = 0; i < LevelSelection.LEVEL_PAGES; i++) {
                levelsContainer = new SquaresOut.LevelsContainer(this.game, i);
                levelsContainer.x = SquaresOut.GameConstants.GAME_WIDTH * (.5 + i);
                levelsContainer.y = SquaresOut.GameConstants.GAME_HEIGHT / 2;
                this.levelsRail.add(levelsContainer);
            }
            this.previousButton = this.add.button(60, SquaresOut.GameConstants.GAME_HEIGHT / 2, "texture_atlas_1", this.onArrowClick, this);
            this.previousButton.anchor.set(.5);
            this.previousButton.setFrames("button-next-on.png", "button-next-off.png", "button-next-on.png");
            this.previousButton.scale.set(-1, SquaresOut.GameVars.scaleY);
            this.previousButton.name = LevelSelection.PREVIOUS;
            this.nextButton = this.add.button(420, SquaresOut.GameConstants.GAME_HEIGHT / 2, "texture_atlas_1", this.onArrowClick, this);
            this.nextButton.anchor.set(.5);
            this.nextButton.setFrames("button-next-on.png", "button-next-off.png", "button-next-on.png");
            this.nextButton.scale.y = SquaresOut.GameVars.scaleY;
            this.previousButton.name = LevelSelection.NEXT;
            this.audioButton = this.add.button(400, 35, "texture_atlas_1", this.onAudioButtonClicked, this);
            this.audioButton.scale.y = SquaresOut.GameVars.scaleY;
            if (SquaresOut.AudioManager.getInstance().isMuted) {
                this.audioButton.setFrames("button_audio_off_on.png", "button_audio_off_off.png", "button_audio_off_on.png");
            }
            else {
                this.audioButton.setFrames("button_audio_on_on.png", "button_audio_on_off.png", "button_audio_on_on.png");
            }
            this.setCurrentLevelPage();
            this.game.camera.flash(0x000000, SquaresOut.GameConstants.TIME_FADE, false);
        };
        LevelSelection.prototype.shutdown = function () {
            LevelSelection.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        LevelSelection.prototype.goToBoardScene = function () {
            this.game.camera.fade(0x000000, SquaresOut.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("BoardState", true, false);
            }, this);
        };
        LevelSelection.prototype.setCurrentLevelPage = function () {
            this.previousButton.visible = false;
        };
        LevelSelection.prototype.onArrowClick = function (b) {
            if (this.tweening) {
                return;
            }
            this.tweening = true;
            var px = this.levelsRail.x;
            if (b.name === LevelSelection.PREVIOUS) {
                px += SquaresOut.GameConstants.GAME_WIDTH;
                this.indexLevelsPage--;
            }
            else {
                px -= SquaresOut.GameConstants.GAME_WIDTH;
                this.indexLevelsPage++;
            }
            if (this.indexLevelsPage === 0) {
                this.previousButton.visible = false;
            }
            else if (this.indexLevelsPage === LevelSelection.LEVEL_PAGES - 1) {
                this.nextButton.visible = false;
            }
            else {
                this.previousButton.visible = true;
                this.nextButton.visible = true;
            }
            this.game.add.tween(this.levelsRail)
                .to({ x: px }, 350, Phaser.Easing.Quadratic.Out, true)
                .onComplete.add(function () {
                this.tweening = false;
            }, this);
        };
        LevelSelection.prototype.onAudioButtonClicked = function () {
            if (SquaresOut.AudioManager.getInstance().isMuted) {
                SquaresOut.AudioManager.getInstance().unmute();
                this.audioButton.setFrames("button_audio_on_on.png", "button_audio_on_off.png", "button_audio_on_on.png");
            }
            else {
                SquaresOut.AudioManager.getInstance().mute();
                this.audioButton.setFrames("button_audio_off_on.png", "button_audio_off_off.png", "button_audio_off_on.png");
            }
        };
        return LevelSelection;
    }(Phaser.State));
    LevelSelection.PREVIOUS = "previous";
    LevelSelection.NEXT = "previous";
    LevelSelection.LEVEL_PAGES = 5;
    SquaresOut.LevelSelection = LevelSelection;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var LevelSelectionButton = (function (_super) {
        __extends(LevelSelectionButton, _super);
        function LevelSelectionButton(game, level) {
            var _this = _super.call(this, game, null, "level-selection-button") || this;
            _this.level = level;
            var isBlocked = SquaresOut.GameVars.levelsBest[level - 1] === -1 ? true : false;
            _this.buttonSprite = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(SquaresOut.GameConstants.RED_SQUARE));
            _this.buttonSprite.scale.set(70 / 65);
            _this.buttonSprite.anchor.set(.5);
            _this.buttonSprite.inputEnabled = true;
            if (!isBlocked) {
                _this.buttonSprite.events.onInputDown.add(_this.onClick, _this);
                if (_this.game.device.desktop) {
                    _this.buttonSprite.events.onInputOver.add(_this.onOver, _this);
                    _this.buttonSprite.events.onInputOut.add(_this.onOut, _this);
                }
            }
            _this.add(_this.buttonSprite);
            var levelLabel = new Phaser.Text(_this.game, 0, 0, _this.level.toString(), { font: "30px Arial", fill: "#FFFFFF" });
            levelLabel.anchor.set(.5);
            if (isBlocked) {
                levelLabel.alpha = .5;
            }
            _this.add(levelLabel);
            return _this;
        }
        LevelSelectionButton.prototype.onClick = function () {
            this.buttonSprite.loadTexture(this.game.cache.getBitmapData(SquaresOut.GameConstants.BLUE_SQUARE));
            this.game.time.events.add(150, function () {
                SquaresOut.GameManager.levelSelected(this.level);
            }, this);
        };
        LevelSelectionButton.prototype.onOver = function () {
            this.buttonSprite.loadTexture(this.game.cache.getBitmapData(SquaresOut.GameConstants.GREEN_SQUARE));
        };
        LevelSelectionButton.prototype.onOut = function () {
            this.buttonSprite.loadTexture(this.game.cache.getBitmapData(SquaresOut.GameConstants.RED_SQUARE));
        };
        return LevelSelectionButton;
    }(Phaser.Group));
    SquaresOut.LevelSelectionButton = LevelSelectionButton;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var LevelEditionState = (function (_super) {
        __extends(LevelEditionState, _super);
        function LevelEditionState() {
            return _super.apply(this, arguments) || this;
        }
        LevelEditionState.prototype.init = function () {
            LevelEditionState.currentInstance = this;
            SquaresOut.GameVars.moves = 0;
        };
        LevelEditionState.prototype.create = function () {
            this.board = new SquaresOut.Board(this.game);
            this.add.existing(this.board);
            this.movementsLabel = this.add.text(430, 530, "moves  " + SquaresOut.GameVars.moves, { font: "30px Arial", fill: "#000000" });
            this.movementsLabel.anchor.x = 1;
            this.movementsLabel.scale.y = SquaresOut.GameVars.scaleY;
            var resetButton = this.add.button(20, 520, "texture_atlas_1", this.onResetClicked, this);
            resetButton.setFrames("button-reset-on.png", "button-reset-off.png", "button-reset-on.png");
            resetButton.scale.y = SquaresOut.GameVars.scaleY;
            this.game.camera.flash(0x000000, SquaresOut.GameConstants.TIME_FADE, false);
        };
        LevelEditionState.prototype.shutdown = function () {
            SquaresOut.SplashState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        LevelEditionState.prototype.move = function (column, row) {
            SquaresOut.GameVars.moves++;
            this.movementsLabel.text = "moves " + SquaresOut.GameVars.moves;
            var squares = this.board.squares;
            var c;
            var r;
            for (var i = 0; i < SquaresOut.LevelManager.neighbourSquares.length; i++) {
                c = SquaresOut.LevelManager.neighbourSquares[i][0] + column;
                r = SquaresOut.LevelManager.neighbourSquares[i][1] + row;
                if (c >= 0 && r >= 0 && c < squares.length && r < squares.length) {
                    squares[c][r].flip();
                }
            }
        };
        LevelEditionState.prototype.onResetClicked = function () {
            this.game.state.start("LevelEditionState", true, false);
        };
        return LevelEditionState;
    }(Phaser.State));
    SquaresOut.LevelEditionState = LevelEditionState;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var PreLoader = (function (_super) {
        __extends(PreLoader, _super);
        function PreLoader() {
            return _super.apply(this, arguments) || this;
        }
        PreLoader.prototype.init = function () {
            PreLoader.currentInstance = this;
            this.load.path = SquaresOut.GameConstants.ASSETS_PATH;
        };
        PreLoader.prototype.preload = function () {
            this.generateBitmapData();
            this.composeScene();
            this.loadAssets();
        };
        PreLoader.prototype.create = function () {
            SquaresOut.AudioManager.getInstance().init(this.game);
            if (SquaresOut.GameConstants.EDITING_LEVELS) {
                this.game.state.start("LevelEditionState", true, false);
            }
            else {
                this.game.state.start("LevelSelection", true, false);
            }
        };
        PreLoader.prototype.composeScene = function () {
        };
        PreLoader.prototype.loadAssets = function () {
            this.load.atlas("texture_atlas_1", "/texture_atlas_1.png", "/texture_atlas_1.json");
            this.load.audiosprite("audio-sprite", ["/audio/audiosprite.mp3", "/audio/audiosprite.ogg"], "/audio/audiosprite.json");
        };
        PreLoader.prototype.generateBitmapData = function () {
            var bmd = this.game.add.bitmapData(64, 64, SquaresOut.GameConstants.RED_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#FF0000";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, SquaresOut.GameConstants.GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#00FF00";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, SquaresOut.GameConstants.BLUE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#0000FF";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, SquaresOut.GameConstants.WHITE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#FFFFFF";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, SquaresOut.GameConstants.GRAY_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#999999";
            bmd.ctx.fill();
        };
        return PreLoader;
    }(Phaser.State));
    SquaresOut.PreLoader = PreLoader;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var SplashState = (function (_super) {
        __extends(SplashState, _super);
        function SplashState() {
            return _super.apply(this, arguments) || this;
        }
        SplashState.prototype.init = function () {
            SplashState.currentInstance = this;
        };
        SplashState.prototype.create = function () {
            var backgroundSprite = this.add.sprite(0, 0, this.game.cache.getBitmapData(SquaresOut.GameConstants.WHITE_SQUARE));
            backgroundSprite.scale.set(SquaresOut.GameConstants.GAME_WIDTH / 64, SquaresOut.GameConstants.GAME_HEIGHT / 64);
            var gameTitle = this.add.text(SquaresOut.GameConstants.GAME_WIDTH / 2, 100, "Red Squares Out!", { font: "40px Arial", fill: "#FF1493" });
            gameTitle.anchor.x = .5;
            var playButton = this.add.button(SquaresOut.GameConstants.GAME_WIDTH / 2, SquaresOut.GameConstants.GAME_HEIGHT / 2, "texture_atlas_1", this.onClickPlay, this);
            playButton.setFrames("button-play-on.png", "button-play-off.png", "button-play-on.png");
            playButton.anchor.set(.5);
            playButton.scale.y = SquaresOut.GameVars.scaleY;
            playButton.forceOut = true;
            this.audioButton = this.add.button(400, 35, "texture_atlas_1", this.onAudioButtonClicked, this);
            this.audioButton.scale.y = SquaresOut.GameVars.scaleY;
            if (SquaresOut.AudioManager.getInstance().isMuted) {
                this.audioButton.setFrames("button_audio_off_on.png", "button_audio_off_off.png", "button_audio_off_on.png");
            }
            else {
                this.audioButton.setFrames("button_audio_on_on.png", "button_audio_on_off.png", "button_audio_on_on.png");
            }
            this.game.camera.flash(0x000000, SquaresOut.GameConstants.TIME_FADE, false);
        };
        SplashState.prototype.shutdown = function () {
            SplashState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        SplashState.prototype.onClickPlay = function () {
            this.game.camera.fade(0x000000, SquaresOut.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("LevelSelection", true, false);
            }, this);
        };
        SplashState.prototype.onAudioButtonClicked = function () {
            if (SquaresOut.AudioManager.getInstance().isMuted) {
                SquaresOut.AudioManager.getInstance().unmute();
                this.audioButton.setFrames("button_audio_on_on.png", "button_audio_on_off.png", "button_audio_on_on.png");
            }
            else {
                SquaresOut.AudioManager.getInstance().mute();
                this.audioButton.setFrames("button_audio_off_on.png", "button_audio_off_off.png", "button_audio_off_on.png");
            }
        };
        return SplashState;
    }(Phaser.State));
    SquaresOut.SplashState = SplashState;
})(SquaresOut || (SquaresOut = {}));
//# sourceMappingURL=squares-out.min.js.map