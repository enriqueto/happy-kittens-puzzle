var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SquaresOut;
(function (SquaresOut) {
    var Game = (function (_super) {
        __extends(Game, _super);
        function Game() {
            var _this = _super.call(this, SquaresOut.GameConstants.GAME_WIDTH, SquaresOut.GameConstants.GAME_HEIGHT, Phaser.AUTO, "content", null, false, true) || this;
            _this.state.add("PreLoader", SquaresOut.PreLoader, false);
            _this.state.add("SplashState", SquaresOut.SplashState, false);
            _this.state.add("BoardState", SquaresOut.BoardState, false);
            _this.state.add("Boot", SquaresOut.Boot, true);
            return _this;
        }
        return Game;
    }(Phaser.Game));
    SquaresOut.Game = Game;
})(SquaresOut || (SquaresOut = {}));
window.onload = function () {
    var game = new SquaresOut.Game();
};
var SquaresOut;
(function (SquaresOut) {
    var AudioManager = (function () {
        function AudioManager() {
            if (AudioManager._instance) {
                throw new Error("Error: Instantiation failed: Use GameVars.getInstance() instead of new");
            }
            else {
                AudioManager._instance = this;
            }
        }
        AudioManager.getInstance = function () {
            if (AudioManager._instance === null) {
                AudioManager._instance = new AudioManager();
            }
            return AudioManager._instance;
        };
        AudioManager.prototype.init = function (game) {
            this.game = game;
            this.loopPlayingKey = null;
            this.audioSprite = this.game.add.audioSprite("audio-sprite");
            var audioStateStr = SquaresOut.GameVars.getLocalStorageData(SquaresOut.GameConstants.AUDIO_STATE_KEY);
            if (audioStateStr !== "") {
                this.isMuted = JSON.parse(audioStateStr);
            }
            else {
                this.isMuted = false;
            }
            this.game.sound.mute = this.isMuted;
        };
        AudioManager.prototype.mute = function () {
            this.isMuted = true;
            this.game.sound.mute = true;
            SquaresOut.GameVars.setLocalStorageData(SquaresOut.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
        };
        AudioManager.prototype.unmute = function () {
            this.isMuted = false;
            this.game.sound.mute = false;
            SquaresOut.GameVars.setLocalStorageData(SquaresOut.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
        };
        AudioManager.prototype.playSound = function (key, loop, volume) {
            loop = loop || false;
            this.audioSprite.play(key, volume);
            if (loop) {
                if (this.loopPlayingKey && (this.loopPlayingKey !== key)) {
                    this.stopSound(this.loopPlayingKey, false, true);
                }
                this.loopPlayingKey = key;
            }
        };
        AudioManager.prototype.stopSound = function (key, fade, loop) {
            if (key === null || typeof key === "undefined") {
                return;
            }
            if (fade) {
                var sound = this.audioSprite.get(key);
                sound.fadeOut(850);
            }
            else {
                this.audioSprite.stop(key);
            }
            if (loop) {
                this.loopPlayingKey = null;
            }
        };
        return AudioManager;
    }());
    AudioManager._instance = null;
    SquaresOut.AudioManager = AudioManager;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var Board = (function (_super) {
        __extends(Board, _super);
        function Board(game) {
            var _this = _super.call(this, game, null, "board") || this;
            _this.x = SquaresOut.GameConstants.GAME_WIDTH / 2 - 2 * SquaresOut.GameConstants.SQUARE_WIDTH;
            _this.y = SquaresOut.GameConstants.GAME_HEIGHT / 2 - 2 * SquaresOut.GameConstants.SQUARE_WIDTH;
            _this.squares = [];
            var square;
            var color;
            for (var col = 0; col < 5; col++) {
                _this.squares[col] = [];
                for (var row = 0; row < 5; row++) {
                    color = SquaresOut.GameVars.colors[col][row];
                    square = new SquaresOut.Square(_this.game, color, col, row);
                    square.x = col * SquaresOut.GameConstants.SQUARE_WIDTH;
                    square.y = row * SquaresOut.GameConstants.SQUARE_WIDTH;
                    _this.add(square);
                    _this.squares[col].push(square);
                }
            }
            return _this;
        }
        return Board;
    }(Phaser.Group));
    SquaresOut.Board = Board;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var BoardState = (function (_super) {
        __extends(BoardState, _super);
        function BoardState() {
            return _super.apply(this, arguments) || this;
        }
        BoardState.prototype.init = function () {
            BoardState.currentInstance = this;
            this.boardManager = new SquaresOut.LevelManager(this.game);
        };
        BoardState.prototype.create = function () {
            this.board = new SquaresOut.Board(this.game);
            this.add.existing(this.board);
            this.hud = new SquaresOut.HUD(this.game);
            this.add.existing(this.hud);
            this.gui = new SquaresOut.GUI(this.game);
            this.add.existing(this.gui);
        };
        BoardState.prototype.shutdown = function () {
            SquaresOut.SplashState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        BoardState.prototype.levelPassed = function () {
        };
        BoardState.prototype.reset = function () {
        };
        return BoardState;
    }(Phaser.State));
    SquaresOut.BoardState = BoardState;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var GUI = (function (_super) {
        __extends(GUI, _super);
        function GUI(game) {
            return _super.call(this, game, null, "gui") || this;
        }
        return GUI;
    }(Phaser.Group));
    SquaresOut.GUI = GUI;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var HUD = (function (_super) {
        __extends(HUD, _super);
        function HUD(game) {
            return _super.call(this, game, null, "hud") || this;
        }
        return HUD;
    }(Phaser.Group));
    SquaresOut.HUD = HUD;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var LevelManager = (function () {
        function LevelManager(game) {
            LevelManager.currentInstance = this;
            this.game = game;
            SquaresOut.GameVars.currentLevel = 1;
            SquaresOut.GameVars.levelPassed = false;
            SquaresOut.GameVars.colors = [];
            var bmd = new Phaser.BitmapData(this.game, "tmp-bitmapdata", 8, 8);
            var levelImage = new Phaser.Image(this.game, 0, 0, "texture_atlas_1", "level-1.png");
            bmd.draw(levelImage, 0, 0);
            bmd.update(0, 0, 8, 8);
            for (var col = 0; col < 8; col++) {
                SquaresOut.GameVars.colors[col] = [];
                for (var row = 0; row < 8; row++) {
                    var hex = bmd.getPixel32(col, row);
                    var r = (hex) & 0xFF;
                    var g = (hex >> 8) & 0xFF;
                    var b = (hex >> 16) & 0xFF;
                    if (r === 0xff && g === 0x00 && b === 0x00) {
                        SquaresOut.GameVars.colors[col].push(SquaresOut.GameConstants.RED_SQUARE);
                    }
                    if (r === 0xff && g === 0xff && b === 0xff) {
                        SquaresOut.GameVars.colors[col].push(SquaresOut.GameConstants.WHITE_SQUARE);
                    }
                }
            }
        }
        LevelManager.prototype.squareFlipped = function (column, row) {
            var squares = SquaresOut.BoardState.currentInstance.board.squares;
            var c;
            var r;
            for (var i = 0; i < LevelManager.neighbourSquares.length; i++) {
                c = LevelManager.neighbourSquares[i][0] + column;
                r = LevelManager.neighbourSquares[i][1] + row;
                if (c >= 0 && r >= 0 && c < squares.length && r < squares.length) {
                    squares[c][r].flip();
                }
            }
            var levelPassed = this.checkBoard();
            if (levelPassed) {
                this.levelPassed();
            }
        };
        LevelManager.prototype.checkBoard = function () {
            var passed = true;
            var squares = SquaresOut.BoardState.currentInstance.board.squares;
            for (var col = 0; col < 5 && passed; col++) {
                for (var row = 0; row < 5 && passed; row++) {
                    if (squares[col][row].color === SquaresOut.GameConstants.WHITE_SQUARE) {
                        passed = false;
                    }
                }
            }
            return passed;
        };
        LevelManager.prototype.levelPassed = function () {
            SquaresOut.GameVars.levelPassed = true;
            console.log("level passed");
        };
        return LevelManager;
    }());
    LevelManager.neighbourSquares = [[0, -1], [-1, 0], [1, 0], [0, 1]];
    SquaresOut.LevelManager = LevelManager;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var Square = (function (_super) {
        __extends(Square, _super);
        function Square(game, color, column, row) {
            var _this = _super.call(this, game, null, "square") || this;
            _this.color = color;
            _this.column = column;
            _this.row = row;
            _this.redSquare = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(SquaresOut.GameConstants.RED_SQUARE));
            _this.redSquare.scale.set((SquaresOut.GameConstants.SQUARE_WIDTH - 6) / 64);
            _this.redSquare.anchor.set(.5);
            _this.redSquare.inputEnabled = true;
            _this.redSquare.events.onInputDown.add(_this.onClick, _this);
            _this.redSquare.events.onInputOver.add(_this.onOver, _this);
            _this.redSquare.events.onInputOut.add(_this.onOut, _this);
            _this.add(_this.redSquare);
            _this.whiteSquare = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(SquaresOut.GameConstants.WHITE_SQUARE));
            _this.whiteSquare.scale.set((SquaresOut.GameConstants.SQUARE_WIDTH - 6) / 64);
            _this.whiteSquare.anchor.set(.5);
            _this.whiteSquare.inputEnabled = true;
            _this.whiteSquare.events.onInputDown.add(_this.onClick, _this);
            _this.whiteSquare.events.onInputOver.add(_this.onOver, _this);
            _this.whiteSquare.events.onInputOut.add(_this.onOut, _this);
            _this.add(_this.whiteSquare);
            if (_this.color === SquaresOut.GameConstants.RED_SQUARE) {
                _this.whiteSquare.visible = false;
            }
            else {
                _this.redSquare.visible = false;
            }
            _this.overSprite = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(SquaresOut.GameConstants.GRAY_SQUARE));
            _this.overSprite.scale.set((SquaresOut.GameConstants.SQUARE_WIDTH - 6) / 64);
            _this.overSprite.anchor.set(.5);
            _this.overSprite.visible = false;
            _this.overSprite.alpha = .25;
            _this.add(_this.overSprite);
            return _this;
        }
        Square.prototype.flip = function () {
            this.color = this.color === SquaresOut.GameConstants.RED_SQUARE ? SquaresOut.GameConstants.WHITE_SQUARE : SquaresOut.GameConstants.RED_SQUARE;
            this.redSquare.visible = !this.redSquare.visible;
            this.whiteSquare.visible = !this.whiteSquare.visible;
        };
        Square.prototype.onClick = function () {
            if (SquaresOut.GameVars.levelPassed) {
                return;
            }
            this.flip();
            SquaresOut.LevelManager.currentInstance.squareFlipped(this.column, this.row);
        };
        Square.prototype.onOver = function () {
            this.overSprite.visible = true;
        };
        Square.prototype.onOut = function () {
            this.overSprite.visible = false;
        };
        return Square;
    }(Phaser.Group));
    SquaresOut.Square = Square;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var Boot = (function (_super) {
        __extends(Boot, _super);
        function Boot() {
            return _super.apply(this, arguments) || this;
        }
        Boot.prototype.init = function () {
            Boot.currentInstance = this;
            this.input.maxPointers = 1;
            this.game.stage.disableVisibilityChange = true;
            this.game.stage.backgroundColor = "#cccccc";
            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.game.scale.pageAlignHorizontally = true;
            if (this.game.device.desktop) {
                this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
                this.game.scale.pageAlignHorizontally = true;
            }
            else {
                this.game.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
                this.game.scale.pageAlignHorizontally = true;
                this.game.scale.isPortrait = false;
                this.game.scale.forceOrientation(true, false);
            }
            if (SquaresOut.GameConstants.DEVELOPMENT) {
                this.game.time.advancedTiming = true;
            }
            SquaresOut.GameManager.init(this.game);
        };
        Boot.prototype.preload = function () {
        };
        Boot.prototype.create = function () {
            this.game.state.start("PreLoader", true, false);
        };
        Boot.prototype.shutdown = function () {
            Boot.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        return Boot;
    }(Phaser.State));
    SquaresOut.Boot = Boot;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var GameConstants = (function () {
        function GameConstants() {
        }
        return GameConstants;
    }());
    GameConstants.VERSION = "0.0";
    GameConstants.ASSETS_PATH = "assets";
    GameConstants.DEVELOPMENT = true;
    GameConstants.GAME_WIDTH = 480;
    GameConstants.GAME_HEIGHT = 640;
    GameConstants.RED_SQUARE = "red square";
    GameConstants.BLUE_SQUARE = "blue square";
    GameConstants.GREEN_SQUARE = "green square";
    GameConstants.WHITE_SQUARE = "white square";
    GameConstants.GRAY_SQUARE = "gray square";
    GameConstants.SQUARE_WIDTH = 75;
    GameConstants.LEVEL_STATE_KEY = "squares-level-state";
    GameConstants.AUDIO_STATE_KEY = "squares-out-audio";
    SquaresOut.GameConstants = GameConstants;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var GameManager = (function () {
        function GameManager() {
        }
        GameManager.init = function (game) {
            GameManager.game = game;
        };
        GameManager.setLocalStorageData = function (key, data) {
            return null;
        };
        return GameManager;
    }());
    SquaresOut.GameManager = GameManager;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var GameVars = (function () {
        function GameVars() {
        }
        GameVars.getLocalStorageData = function (key) {
            return null;
        };
        GameVars.setLocalStorageData = function (key, data) {
            return null;
        };
        return GameVars;
    }());
    SquaresOut.GameVars = GameVars;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var LevelSelection = (function (_super) {
        __extends(LevelSelection, _super);
        function LevelSelection() {
            return _super.apply(this, arguments) || this;
        }
        LevelSelection.prototype.init = function () {
            LevelSelection.currentInstance = this;
        };
        LevelSelection.prototype.create = function () {
            var backgroundSprite = this.add.sprite(0, 0, this.game.cache.getBitmapData("yellow-gradient"));
            backgroundSprite.scale.set(SquaresOut.GameConstants.GAME_WIDTH / 16, SquaresOut.GameConstants.GAME_HEIGHT / 128);
        };
        LevelSelection.prototype.shutdown = function () {
            LevelSelection.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        return LevelSelection;
    }(Phaser.State));
    SquaresOut.LevelSelection = LevelSelection;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var PreLoader = (function (_super) {
        __extends(PreLoader, _super);
        function PreLoader() {
            return _super.apply(this, arguments) || this;
        }
        PreLoader.prototype.init = function () {
            PreLoader.currentInstance = this;
            this.load.path = SquaresOut.GameConstants.ASSETS_PATH;
        };
        PreLoader.prototype.preload = function () {
            this.generateBitmapData();
            this.load.atlas("texture_atlas_1", "/texture_atlas_1.png", "/texture_atlas_1.json");
        };
        PreLoader.prototype.create = function () {
            this.game.state.start("BoardState", true, false);
        };
        PreLoader.prototype.generateBitmapData = function () {
            var bmd = this.game.add.bitmapData(16, 128, "intro_background", true);
            var grd = bmd.ctx.createLinearGradient(0, 0, 0, 128);
            grd.addColorStop(0, "#11c0e9");
            grd.addColorStop(1, "#6fbe4d");
            bmd.ctx.fillStyle = grd;
            bmd.ctx.fillRect(0, 0, 16, 128);
            bmd = this.game.add.bitmapData(16, 128, "yellow-gradient", true);
            grd = bmd.ctx.createLinearGradient(0, 0, 0, 128);
            grd.addColorStop(0, "#FFDC42");
            grd.addColorStop(1, "#FFB400");
            bmd.ctx.fillStyle = grd;
            bmd.ctx.fillRect(0, 0, 16, 128);
            bmd = this.game.add.bitmapData(64, 64, SquaresOut.GameConstants.RED_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#FF0000";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, SquaresOut.GameConstants.GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#00FF00";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, SquaresOut.GameConstants.BLUE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#0000FF";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, SquaresOut.GameConstants.WHITE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#FFFFFF";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, SquaresOut.GameConstants.GRAY_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#999999";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 64, "dark_gradient", true);
            grd = bmd.ctx.createLinearGradient(0, 0, 0, 64);
            grd.addColorStop(0, "#283939");
            grd.addColorStop(1, "#000000");
            bmd.ctx.fillStyle = grd;
            bmd.ctx.fillRect(0, 0, 16, 64);
            bmd = this.game.add.bitmapData(16, 16, "preload-bar", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#fc8e00";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 128, "black_gradient", true);
            for (var i = 0; i < 16; i++) {
                for (var j = 0; j < 128; j++) {
                    bmd.setPixel32(i, j, 0, 0, 0, 255 * j / 127);
                }
            }
        };
        return PreLoader;
    }(Phaser.State));
    SquaresOut.PreLoader = PreLoader;
})(SquaresOut || (SquaresOut = {}));
var SquaresOut;
(function (SquaresOut) {
    var SplashState = (function (_super) {
        __extends(SplashState, _super);
        function SplashState() {
            return _super.apply(this, arguments) || this;
        }
        SplashState.prototype.init = function () {
            SplashState.currentInstance = this;
        };
        SplashState.prototype.create = function () {
            var backgroundSprite = this.add.sprite(0, 0, this.game.cache.getBitmapData("yellow-gradient"));
            backgroundSprite.scale.set(SquaresOut.GameConstants.GAME_WIDTH / 16, SquaresOut.GameConstants.GAME_HEIGHT / 128);
            var gameTitle = this.add.text(SquaresOut.GameConstants.GAME_WIDTH / 2, 100, "SquaresOut", { font: "80px Arial", fill: "#FF1493" });
            gameTitle.anchor.x = .5;
        };
        SplashState.prototype.shutdown = function () {
            SplashState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        return SplashState;
    }(Phaser.State));
    SquaresOut.SplashState = SplashState;
})(SquaresOut || (SquaresOut = {}));
//# sourceMappingURL=squares-out.min.js.map