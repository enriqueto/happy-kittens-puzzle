var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var Game = (function (_super) {
        __extends(Game, _super);
        function Game() {
            var _this = _super.call(this, HappyKittensPuzzle.GameConstants.GAME_WIDTH, HappyKittensPuzzle.GameConstants.GAME_HEIGHT, Phaser.AUTO, "content", null, false, true) || this;
            Game.currentInstance = _this;
            _this.state.add("PreLoader", HappyKittensPuzzle.PreLoader, false);
            _this.state.add("LevelSelectionState", HappyKittensPuzzle.LevelSelectionState, false);
            _this.state.add("LevelEditionState", HappyKittensPuzzle.LevelEditionState, false);
            _this.state.add("BoardState", HappyKittensPuzzle.BoardState, false);
            _this.state.add("Boot", HappyKittensPuzzle.Boot, true);
            return _this;
        }
        return Game;
    }(Phaser.Game));
    HappyKittensPuzzle.Game = Game;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
window.onload = function () {
    var game = new HappyKittensPuzzle.Game();
    if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
        GamePix.on.pause = function () {
            HappyKittensPuzzle.Game.currentInstance.paused = true;
        };
        GamePix.on.resume = function () {
            HappyKittensPuzzle.Game.currentInstance.paused = false;
        };
        GamePix.on.soundOn = function () {
            if (!HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                HappyKittensPuzzle.Game.currentInstance.sound.mute = false;
            }
        };
        GamePix.on.soundOff = function () {
            HappyKittensPuzzle.Game.currentInstance.sound.mute = true;
        };
    }
};
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var AudioButton = (function (_super) {
        __extends(AudioButton, _super);
        function AudioButton(game, x, y) {
            var _this = _super.call(this, game, null, "audio-button") || this;
            _this.button = new Phaser.Button(_this.game, x, y, "texture_atlas_1", _this.onAudioButtonClicked, _this);
            if (HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                _this.button.setFrames("button-audio-off-on.png", "button-audio-off-off.png", "button-audio-off-on.png");
            }
            else {
                _this.button.setFrames("button-audio-on-on.png", "button-audio-on-off.png", "button-audio-on-on.png");
            }
            _this.button.forceOut = true;
            _this.add(_this.button);
            return _this;
        }
        AudioButton.prototype.onAudioButtonClicked = function (b) {
            b.clearFrames();
            if (HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                HappyKittensPuzzle.AudioManager.getInstance().unmute();
                this.button.setFrames("button-audio-on-on.png", "button-audio-on-off.png", "button-audio-on-on.png");
            }
            else {
                HappyKittensPuzzle.AudioManager.getInstance().mute();
                this.button.setFrames("button-audio-off-on.png", "button-audio-off-off.png", "button-audio-off-on.png");
            }
        };
        return AudioButton;
    }(Phaser.Group));
    AudioButton.PX = 282;
    AudioButton.PY = 20;
    HappyKittensPuzzle.AudioButton = AudioButton;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var AudioManager = (function () {
        function AudioManager() {
            if (AudioManager._instance) {
                throw new Error("Error: Instantiation failed: Use GameVars.getInstance() instead of new");
            }
            else {
                AudioManager._instance = this;
            }
        }
        AudioManager.getInstance = function () {
            if (AudioManager._instance === null) {
                AudioManager._instance = new AudioManager();
            }
            return AudioManager._instance;
        };
        AudioManager.prototype.init = function (game) {
            this.game = game;
            this.loopPlayingKey = null;
            this.audioSprite = this.game.add.audioSprite("audio-sprite");
            var audioStateStr = HappyKittensPuzzle.GameVars.getLocalStorageData(HappyKittensPuzzle.GameConstants.AUDIO_STATE_KEY);
            if (audioStateStr !== "") {
                this.isMuted = JSON.parse(audioStateStr);
            }
            else {
                this.isMuted = false;
            }
            this.game.sound.mute = this.isMuted;
        };
        AudioManager.prototype.mute = function () {
            this.isMuted = true;
            this.game.sound.mute = true;
            HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
        };
        AudioManager.prototype.unmute = function () {
            this.isMuted = false;
            this.game.sound.mute = false;
            HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
        };
        AudioManager.prototype.playSound = function (key, loop, volume) {
            loop = loop || false;
            this.audioSprite.play(key, volume);
            if (loop) {
                if (this.loopPlayingKey && (this.loopPlayingKey !== key)) {
                    this.stopSound(this.loopPlayingKey, false, true);
                }
                this.loopPlayingKey = key;
            }
        };
        AudioManager.prototype.stopSound = function (key, fade, loop) {
            if (key === null || typeof key === "undefined") {
                return;
            }
            if (fade) {
                var sound = this.audioSprite.get(key);
                sound.fadeOut(850);
            }
            else {
                this.audioSprite.stop(key);
            }
            if (loop) {
                this.loopPlayingKey = null;
            }
        };
        return AudioManager;
    }());
    AudioManager._instance = null;
    HappyKittensPuzzle.AudioManager = AudioManager;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var Boot = (function (_super) {
        __extends(Boot, _super);
        function Boot() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Boot.prototype.init = function () {
            Boot.currentInstance = this;
            this.input.maxPointers = 1;
            this.game.stage.disableVisibilityChange = true;
            this.game.stage.backgroundColor = "#000000";
            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.game.scale.pageAlignHorizontally = true;
            if (this.game.device.desktop) {
                HappyKittensPuzzle.GameVars.scaleY = 1;
                HappyKittensPuzzle.GameVars.upperStripe_py = 20;
                HappyKittensPuzzle.GameVars.lowerStripe_py = 900;
                HappyKittensPuzzle.GameVars.stripesScale = 1;
                this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
                this.game.scale.pageAlignHorizontally = true;
            }
            else {
                this.game.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
                var aspectRatio = window.innerHeight / window.innerWidth;
                HappyKittensPuzzle.GameVars.scaleY = (4 / 3) / aspectRatio;
                this.game.scale.pageAlignHorizontally = true;
                this.game.scale.isPortrait = false;
                HappyKittensPuzzle.GameVars.stripesScale = 1;
                if (aspectRatio === 4 / 3) {
                    HappyKittensPuzzle.GameVars.upperStripe_py = 20;
                    HappyKittensPuzzle.GameVars.lowerStripe_py = 900;
                }
                else if (aspectRatio >= 1.75) {
                    HappyKittensPuzzle.GameVars.upperStripe_py = 65;
                    HappyKittensPuzzle.GameVars.lowerStripe_py = 905;
                }
                else if (aspectRatio >= 1.5) {
                    HappyKittensPuzzle.GameVars.upperStripe_py = 35;
                    HappyKittensPuzzle.GameVars.lowerStripe_py = 910;
                }
                else {
                    HappyKittensPuzzle.GameVars.upperStripe_py = 30;
                    HappyKittensPuzzle.GameVars.lowerStripe_py = 920;
                    HappyKittensPuzzle.GameVars.stripesScale = .78;
                }
                this.game.scale.forceOrientation(true, false);
                this.game.scale.onOrientationChange.add(this.onOrientationChange, this);
                this.bootedInWrongOrientation = window.innerWidth > window.innerHeight ? true : false;
                this.game.sound.muteOnPause = true;
            }
            ifvisible.on("blur", function () {
                HappyKittensPuzzle.Game.currentInstance.sound.mute = true;
            });
            ifvisible.on("focus", function () {
                if (!HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                    HappyKittensPuzzle.Game.currentInstance.sound.mute = false;
                }
            });
            if (HappyKittensPuzzle.GameConstants.DEVELOPMENT) {
                this.game.time.advancedTiming = true;
            }
            HappyKittensPuzzle.GameManager.init(this.game);
        };
        Boot.prototype.preload = function () {
            this.load.crossOrigin = "anonymous";
            this.load.path = HappyKittensPuzzle.GameConstants.ASSETS_PATH;
            this.load.image("game-title", "/game-title.png");
            this.load.script("webfont", "//ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js");
            WebFontConfig = {
                active: function () {
                    Boot.currentInstance.game.time.events.add(Phaser.Timer.SECOND, Boot.currentInstance.startPreloader, Boot.currentInstance);
                },
                google: {
                    families: ["Concert+One"]
                }
            };
        };
        Boot.prototype.create = function () {
            this.game.plugins.add(Fabrique.Plugins.CacheBuster);
            this.game.load.cacheBuster = HappyKittensPuzzle.GameConstants.VERSION;
        };
        Boot.prototype.shutdown = function () {
            Boot.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        Boot.prototype.startPreloader = function () {
            if (!this.game.device.desktop && this.bootedInWrongOrientation) {
                return;
            }
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                if (top.location.href.indexOf("lagged.com") || top.location.href.indexOf("footchinko.com") > -1 || top.location.href.indexOf("localhost") > -1) {
                    this.game.state.start("PreLoader", true, false);
                }
            }
            else if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.IZZYGAMES) {
                if (top.location.href.indexOf("spiele-umsonst.de") || top.location.href.indexOf("izzygames.com") > -1 || top.location.href.indexOf("footchinko.com") || top.location.href.indexOf("localhost") > -1) {
                    this.game.state.start("PreLoader", true, false);
                }
            }
            else {
                this.game.state.start("PreLoader", true, false);
            }
        };
        Boot.prototype.onOrientationChange = function () {
            if (!Boot.currentInstance) {
                return;
            }
            this.game.time.events.add(300, function () {
                if (this.bootedInWrongOrientation && window.innerWidth < window.innerHeight) {
                    this.game.state.restart(true, false);
                }
            }, this);
        };
        return Boot;
    }(Phaser.State));
    HappyKittensPuzzle.Boot = Boot;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var GameConstants = (function () {
        function GameConstants() {
        }
        return GameConstants;
    }());
    GameConstants.VERSION = "1.1";
    GameConstants.ASSETS_PATH = "assets";
    GameConstants.DEVELOPMENT = true;
    GameConstants.EDITING_LEVELS = false;
    GameConstants.GAME_WIDTH = 768;
    GameConstants.GAME_HEIGHT = 1024;
    GameConstants.GAMEPIX = "gamepix";
    GameConstants.LAGGED = "lagged";
    GameConstants.IZZYGAMES = "izzygames";
    GameConstants.COOLGAMES = "coolgames";
    GameConstants.NONE = "none";
    GameConstants.SPONSOR = GameConstants.COOLGAMES;
    GameConstants.HAPPY = "red square";
    GameConstants.GRUMPY = "white square";
    GameConstants.BLACK_SQUARE = "black square";
    GameConstants.BLUE_SQUARE = "blue square";
    GameConstants.WHITE_SQUARE = "white square";
    GameConstants.DARK_GREEN_SQUARE = "dark green square";
    GameConstants.GREEN_SQUARE = "green square";
    GameConstants.GRAY_SQUARE = "gray square";
    GameConstants.YELLOW_SQUARE = "yellow square";
    GameConstants.ORANGE_SQUARE = "orange square";
    GameConstants.DARK_CYAN_SQUARE = "dark cyan square";
    GameConstants.SQUARE_WIDTH = 135;
    GameConstants.TIME_FADE = 350;
    GameConstants.TOTAL_LEVELS = 60;
    GameConstants.LEVEL_BEST_KEY = "happy-kittens-levels-best-results";
    GameConstants.SCORE_KEY = "happy-kittens-score";
    GameConstants.AUDIO_STATE_KEY = "happy-kittens-audio";
    HappyKittensPuzzle.GameConstants = GameConstants;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var GameManager = (function () {
        function GameManager() {
        }
        GameManager.init = function (game) {
            GameManager.game = game;
            var bestResultsStr = HappyKittensPuzzle.GameVars.getLocalStorageData(HappyKittensPuzzle.GameConstants.LEVEL_BEST_KEY);
            if (bestResultsStr !== "") {
                HappyKittensPuzzle.GameVars.levelsBestResults = JSON.parse(bestResultsStr);
            }
            else {
                HappyKittensPuzzle.GameVars.levelsBestResults = [];
                HappyKittensPuzzle.GameVars.levelsBestResults[0] = 0;
                for (var i = 1; i < HappyKittensPuzzle.GameConstants.TOTAL_LEVELS; i++) {
                    HappyKittensPuzzle.GameVars.levelsBestResults[i] = -1;
                }
                HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.LEVEL_BEST_KEY, JSON.stringify(HappyKittensPuzzle.GameVars.levelsBestResults));
            }
            HappyKittensPuzzle.GameVars.currentLevel = HappyKittensPuzzle.GameConstants.TOTAL_LEVELS;
            for (var i = 0; i < HappyKittensPuzzle.GameConstants.TOTAL_LEVELS; i++) {
                if (HappyKittensPuzzle.GameVars.levelsBestResults[i] === 0) {
                    HappyKittensPuzzle.GameVars.currentLevel = i + 1;
                    break;
                }
            }
            HappyKittensPuzzle.GameVars.achievedLevel = HappyKittensPuzzle.GameVars.currentLevel;
            var scoreStr = HappyKittensPuzzle.GameVars.getLocalStorageData(HappyKittensPuzzle.GameConstants.SCORE_KEY);
            if (scoreStr !== "") {
                HappyKittensPuzzle.GameVars.score = JSON.parse(scoreStr);
            }
            else {
                HappyKittensPuzzle.GameVars.score = 0;
            }
            HappyKittensPuzzle.GameVars.gameFinished = false;
        };
        GameManager.levelSelected = function (level) {
            HappyKittensPuzzle.GameVars.currentLevel = level;
            HappyKittensPuzzle.LevelSelectionState.currentInstance.goToBoardScene();
        };
        GameManager.levelPassed = function () {
            HappyKittensPuzzle.GameVars.achievedLevel = 1;
            for (var i = 0; i < HappyKittensPuzzle.GameVars.levelsBestResults.length; i++) {
                if (HappyKittensPuzzle.GameVars.levelsBestResults[i] === 0) {
                    HappyKittensPuzzle.GameVars.achievedLevel = i + 1;
                    break;
                }
            }
            var record = HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - 1];
            if (record === 0 || HappyKittensPuzzle.GameVars.moves <= record) {
                HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - 1] = HappyKittensPuzzle.GameVars.moves;
            }
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.COOLGAMES) {
                GameManager.newScore = false;
                if (HappyKittensPuzzle.GameVars.currentLevel === HappyKittensPuzzle.GameVars.achievedLevel) {
                    HappyKittensPuzzle.GameVars.achievedLevel++;
                    HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.achievedLevel - 1] = 0;
                    GameManager.newScore = true;
                    HappyKittensPuzzle.GameVars.score += GameManager.getLevelScore();
                    HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.SCORE_KEY, JSON.stringify(HappyKittensPuzzle.GameVars.score));
                }
            }
            if (HappyKittensPuzzle.GameVars.currentLevel < HappyKittensPuzzle.GameConstants.TOTAL_LEVELS) {
                HappyKittensPuzzle.GameVars.currentLevel++;
            }
            HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.LEVEL_BEST_KEY, JSON.stringify(HappyKittensPuzzle.GameVars.levelsBestResults));
            this.sponsorsAPIs();
        };
        GameManager.sponsorsAPIs = function () {
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
                GamePix.game.ping("level_complete", { score: 0, level: HappyKittensPuzzle.GameVars.currentLevel, achievements: {} });
            }
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.COOLGAMES) {
                if (GameManager.newScore) {
                    community.submitScore({
                        score: HappyKittensPuzzle.GameVars.score,
                        callback: function () {
                            if (adSense) {
                                adSense.showAdvertising();
                            }
                        }
                    });
                    analytics.level(HappyKittensPuzzle.GameVars.achievedLevel);
                    analytics.score(HappyKittensPuzzle.GameVars.score);
                }
                else {
                    if (typeof adSense !== "undefined" && HappyKittensPuzzle.GameVars.currentLevel > 5) {
                        adSense.showAdvertising();
                    }
                }
            }
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                var awardID = null;
                if (HappyKittensPuzzle.GameVars.currentLevel === 12) {
                    awardID = "happy_kitpuz_ah01";
                }
                else if (HappyKittensPuzzle.GameVars.currentLevel === 24) {
                    awardID = "happy_kitpuz_ah02";
                }
                else if (HappyKittensPuzzle.GameVars.currentLevel === 36) {
                    awardID = "happy_kitpuz_ah03";
                }
                else if (HappyKittensPuzzle.GameVars.currentLevel === 48) {
                    awardID = "happy_kitpuz_ah04";
                }
                else if (HappyKittensPuzzle.GameVars.currentLevel === 60) {
                    awardID = "happy_kitpuz_ah05";
                }
                if (awardID) {
                    var api_awards = [];
                    api_awards.push(awardID);
                    LaggedAPI.Achievements.save(api_awards, function (response) {
                        if (response.success) {
                            console.log("achievement saved");
                        }
                        else {
                            console.log(response.errormsg);
                        }
                    });
                }
                GameManager.passedLevels++;
                if (GameManager.passedLevels % 10 === 0) {
                    if (typeof prerollStart === "undefined") {
                        console.log("skip ad, prerollStart not found");
                    }
                    else {
                        LaggedAPI.APIAds.show("interstitial", "happy-kittens-puzzle", "happy-kittens-puzzle-game.jpg", function (response) {
                            if (response.success) {
                                console.log("ad done");
                            }
                            else {
                                console.log("ad error, continue");
                            }
                        });
                    }
                }
            }
        };
        GameManager.getLevelScore = function () {
            var score = 0;
            if (HappyKittensPuzzle.GameVars.currentLevel < 10) {
                score += 100;
            }
            else if (HappyKittensPuzzle.GameVars.currentLevel < 20) {
                score += 500;
            }
            else if (HappyKittensPuzzle.GameVars.currentLevel < 45) {
                score += 1000;
            }
            else {
                score += 2000;
            }
            if (HappyKittensPuzzle.GameVars.moves < 4) {
                score += 10;
            }
            else if (HappyKittensPuzzle.GameVars.moves < 10) {
                score += 20;
            }
            else if (HappyKittensPuzzle.GameVars.moves < 15) {
                score += 25;
            }
            if (HappyKittensPuzzle.GameVars.time < 5) {
                score += 100;
            }
            else if (HappyKittensPuzzle.GameVars.time < 10) {
                score += 50;
            }
            else if (HappyKittensPuzzle.GameVars.time < 20) {
                score += 25;
            }
            else if (HappyKittensPuzzle.GameVars.time < 30) {
                score += 10;
            }
            return score;
        };
        return GameManager;
    }());
    GameManager.passedLevels = 0;
    HappyKittensPuzzle.GameManager = GameManager;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var GameVars = (function () {
        function GameVars() {
        }
        GameVars.formatTime = function (timeInSeconds) {
            var hours = Math.floor(timeInSeconds / 3600);
            var minutes = Math.floor((timeInSeconds - (hours * 3600)) / 60);
            var seconds = timeInSeconds - (hours * 3600) - (minutes * 60);
            var m = minutes.toString();
            var s = seconds.toString();
            if (minutes < 10) {
                m = "0" + minutes;
            }
            if (seconds < 10) {
                s = "0" + seconds;
            }
            return m + ":" + s;
        };
        GameVars.formatNumber = function (value) {
            return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        };
        GameVars.getLocalStorageData = function (key) {
            var value = localStorage.getItem(key);
            if (value !== null) {
                return value;
            }
            else {
                return "";
            }
        };
        GameVars.setLocalStorageData = function (key, value) {
            localStorage.setItem(key, value);
        };
        return GameVars;
    }());
    HappyKittensPuzzle.GameVars = GameVars;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var PreLoader = (function (_super) {
        __extends(PreLoader, _super);
        function PreLoader() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PreLoader.prototype.init = function () {
            PreLoader.currentInstance = this;
            this.load.path = HappyKittensPuzzle.GameConstants.ASSETS_PATH;
        };
        PreLoader.prototype.preload = function () {
            this.generateBitmapData();
            this.composeScene();
            this.loadAssets();
        };
        PreLoader.prototype.create = function () {
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                LaggedAPI.init("happy_kittenpuz_init", "lagdevaF3001");
            }
            HappyKittensPuzzle.AudioManager.getInstance().init(this.game);
            HappyKittensPuzzle.AudioManager.getInstance().playSound("soundtrack", true);
            if (HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                this.game.state.start("LevelEditionState", true, false);
            }
            else {
                if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
                    GamePix.game.gameLoaded(function () {
                        HappyKittensPuzzle.Game.currentInstance.state.start("BoardState", true, false);
                    });
                }
                else {
                    this.game.state.start("BoardState", true, false);
                }
            }
        };
        PreLoader.prototype.composeScene = function () {
            var tmpLabel = this.add.text(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, 190, "abc", { font: "60px Concert One", fill: "#FF1493" });
            tmpLabel.anchor.x = .5;
            var backgroundSprite = this.add.sprite(0, 0, this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_CYAN_SQUARE));
            backgroundSprite.scale.set(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, HappyKittensPuzzle.GameConstants.GAME_HEIGHT / 64);
            var gameLogo = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, 190, "game-title");
            gameLogo.anchor.set(.5);
            gameLogo.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.loadingLabel = this.add.text(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, 475, "loading...", { font: "66px Concert One", fill: "#FFFFFF" });
            this.loadingLabel.anchor.x = .5;
            this.loadingLabel.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            var preloadBarContainer = this.add.group();
            preloadBarContainer.y = 615;
            preloadBarContainer.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            var preloadBarCapsuleShadow = new Phaser.Sprite(this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2 + 5, 4, this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.BLACK_SQUARE));
            preloadBarCapsuleShadow.scale.set(10, .85);
            preloadBarCapsuleShadow.anchor.set(.5);
            preloadBarCapsuleShadow.alpha = .35;
            preloadBarContainer.add(preloadBarCapsuleShadow);
            var preloadBarCapsule = new Phaser.Sprite(this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, 0, this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            preloadBarCapsule.scale.setTo(10, .78);
            preloadBarCapsule.anchor.set(.5);
            preloadBarContainer.add(preloadBarCapsule);
            this.preloadBar = new Phaser.Sprite(this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2 - 315, 0, this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.ORANGE_SQUARE));
            this.preloadBar.scale.setTo(0, .6);
            this.preloadBar.anchor.set(0, .5);
            preloadBarContainer.add(this.preloadBar);
        };
        PreLoader.prototype.loadAssets = function () {
            this.load.atlas("texture_atlas_1", "/texture_atlas_1.png", "/texture_atlas_1.json");
            this.load.audiosprite("audio-sprite", ["/audio/audiosprite.mp3", "/audio/audiosprite.ogg"], "/audio/audiosprite.json");
            this.load.onFileComplete.add(this.updateLoadedPercentage, this);
        };
        PreLoader.prototype.updateLoadedPercentage = function () {
            this.preloadBar.scale.x = this.load.progress / 100 * 9.844;
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
                GamePix.game.gameLoading(this.load.progress);
            }
        };
        PreLoader.prototype.generateBitmapData = function () {
            var bmd = this.game.add.bitmapData(64, 64, HappyKittensPuzzle.GameConstants.HAPPY, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#FF0000";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, HappyKittensPuzzle.GameConstants.BLACK_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#000000";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, HappyKittensPuzzle.GameConstants.WHITE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#FFFFFF";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, HappyKittensPuzzle.GameConstants.DARK_CYAN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#0380DC";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, HappyKittensPuzzle.GameConstants.GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#00FF00";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, HappyKittensPuzzle.GameConstants.BLUE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#0000FF";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#2B7638";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, HappyKittensPuzzle.GameConstants.GRUMPY, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#FFFFFF";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, HappyKittensPuzzle.GameConstants.GRAY_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#999999";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, HappyKittensPuzzle.GameConstants.YELLOW_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#FFB74F";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, HappyKittensPuzzle.GameConstants.ORANGE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#FF8E00";
            bmd.ctx.fill();
        };
        return PreLoader;
    }(Phaser.State));
    HappyKittensPuzzle.PreLoader = PreLoader;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var YellowStripe = (function (_super) {
        __extends(YellowStripe, _super);
        function YellowStripe(game, text) {
            var _this = _super.call(this, game, null, "yellow-stripe") || this;
            _this.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2;
            _this.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            var colorStripe = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = .5;
            colorStripe.scale.set(1.5 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, 12 / 64);
            _this.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, 0, colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.ORANGE_SQUARE));
            colorStripe.anchor.x = .5;
            colorStripe.scale.set(1.5 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, 90 / 64);
            _this.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, 0, colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = .5;
            colorStripe.scale.set(1.5 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, 12 / 64);
            _this.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, 0, colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            colorStripe.anchor.x = .5;
            colorStripe.scale.set(1.5 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, 16 / 64);
            colorStripe.alpha = .45;
            _this.add(colorStripe);
            var stripeLabel = new Phaser.Text(_this.game, 0, 18, text, { font: "70px Concert One", fill: "#FFFFFF" });
            stripeLabel.anchor.x = .5;
            stripeLabel.setShadow(4, 4, "rgba(197, 97, 0, 1)", 0);
            _this.add(stripeLabel);
            return _this;
        }
        return YellowStripe;
    }(Phaser.Group));
    HappyKittensPuzzle.YellowStripe = YellowStripe;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var Board = (function (_super) {
        __extends(Board, _super);
        function Board(game) {
            var _this = _super.call(this, game, null, "board") || this;
            _this.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2;
            _this.y = 538;
            _this.cells = [];
            _this.handIcon = null;
            _this.purringAudio = false;
            var cell;
            var state;
            for (var col = 0; col < 5; col++) {
                _this.cells[col] = [];
                for (var row = 0; row < 5; row++) {
                    if (HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                        state = HappyKittensPuzzle.GameConstants.HAPPY;
                    }
                    else {
                        state = HappyKittensPuzzle.GameVars.cellStates[col][row];
                    }
                    cell = new HappyKittensPuzzle.Cell(_this.game, state, col, row);
                    cell.x = col * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - 2 * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
                    cell.y = row * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - 2 * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
                    _this.add(cell);
                    _this.cells[col].push(cell);
                }
            }
            return _this;
        }
        Board.prototype.activateTutorial = function () {
            var c = Board.TUTORIAL_CELLS[HappyKittensPuzzle.GameVars.currentLevel - 1][0];
            var r = Board.TUTORIAL_CELLS[HappyKittensPuzzle.GameVars.currentLevel - 1][1];
            for (var col = 0; col < 5; col++) {
                for (var row = 0; row < 5; row++) {
                    this.cells[col][row].activated = false;
                }
            }
            this.cells[c][r].activated = true;
            var x = c * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - 2 * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
            var y = r * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - 2 * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
            this.handIcon = new HappyKittensPuzzle.HandIcon(this.game, x, y);
            this.add(this.handIcon);
        };
        Board.prototype.levelPassed = function () {
            if (this.handIcon) {
                this.handIcon.hide();
            }
            for (var col = 0; col < 5; col++) {
                for (var row = 0; row < 5; row++) {
                    if (Math.random() > .7) {
                        this.cells[col][row].endAnimation();
                    }
                }
            }
        };
        Board.prototype.makeOneKittenSleep = function () {
            var kittens = [];
            for (var col = 0; col < 5; col++) {
                for (var row = 0; row < 5; row++) {
                    var kitten = this.cells[col][row];
                    if (kitten.state === HappyKittensPuzzle.GameConstants.HAPPY && !kitten.sleeping) {
                        kittens.push(kitten);
                    }
                }
            }
            if (kittens.length > 0) {
                var kitten = Phaser.ArrayUtils.getRandomItem(kittens);
                kitten.sleep();
                if (!this.purringAudio) {
                    this.purringAudio = true;
                    HappyKittensPuzzle.AudioManager.getInstance().playSound("cat_purring", false, .5);
                }
            }
        };
        Board.prototype.awakeSleepingKitten = function () {
            for (var col = 0; col < 5; col++) {
                for (var row = 0; row < 5; row++) {
                    var kitten = this.cells[col][row];
                    if (kitten.sleeping) {
                        kitten.awake();
                    }
                }
            }
            if (this.purringAudio) {
                this.purringAudio = false;
                HappyKittensPuzzle.AudioManager.getInstance().stopSound("cat_purring");
            }
        };
        return Board;
    }(Phaser.Group));
    Board.TUTORIAL_CELLS = [[2, 2], [0, 0], [4, 4]];
    HappyKittensPuzzle.Board = Board;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var BoardManager = (function () {
        function BoardManager(game) {
            BoardManager.currentInstance = this;
            this.game = game;
            this.frameCounterSleep = 0;
            this.currentRow = null;
            this.currentCol = null;
            this.timerEvent = null;
            HappyKittensPuzzle.GameVars.levelPassed = false;
            HappyKittensPuzzle.GameVars.moves = 0;
            HappyKittensPuzzle.GameVars.cellsFlipping = false;
            HappyKittensPuzzle.GameVars.cellStates = [];
            HappyKittensPuzzle.GameVars.currentLevel = HappyKittensPuzzle.GameVars.currentLevel || 1;
            var bmd = new Phaser.BitmapData(this.game, "tmp-bitmapdata", 8, 8);
            var levelImage = new Phaser.Image(this.game, 0, 0, "texture_atlas_1", "level-" + HappyKittensPuzzle.GameVars.currentLevel + ".png");
            bmd.draw(levelImage, 0, 0);
            bmd.update(0, 0, 8, 8);
            for (var col = 0; col < 8; col++) {
                HappyKittensPuzzle.GameVars.cellStates[col] = [];
                for (var row = 0; row < 8; row++) {
                    var hex = bmd.getPixel32(col, row);
                    var r = (hex) & 0xFF;
                    var g = (hex >> 8) & 0xFF;
                    var b = (hex >> 16) & 0xFF;
                    if (r === 0xff && g === 0x00 && b === 0x00) {
                        HappyKittensPuzzle.GameVars.cellStates[col].push(HappyKittensPuzzle.GameConstants.HAPPY);
                    }
                    if (r === 0xff && g === 0xff && b === 0xff) {
                        HappyKittensPuzzle.GameVars.cellStates[col].push(HappyKittensPuzzle.GameConstants.GRUMPY);
                    }
                }
            }
        }
        BoardManager.prototype.destroy = function () {
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.COOLGAMES) {
                this.timerEvent.pendingDelete = true;
            }
        };
        BoardManager.prototype.onSecondPassed = function () {
            HappyKittensPuzzle.GameVars.time++;
            HappyKittensPuzzle.BoardState.currentInstance.hud.updateTime();
        };
        BoardManager.prototype.update = function () {
            this.frameCounterSleep++;
            if (this.frameCounterSleep > 600 && !HappyKittensPuzzle.GameVars.levelPassed) {
                this.frameCounterSleep = 0;
                var board = HappyKittensPuzzle.BoardState.currentInstance.board;
                board.makeOneKittenSleep();
            }
        };
        BoardManager.prototype.cellOver = function (column, row) {
            var cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            var c;
            var r;
            var t = [];
            for (var i = 0; i < BoardManager.neighbourSquares.length; i++) {
                c = BoardManager.neighbourSquares[i][0] + column;
                r = BoardManager.neighbourSquares[i][1] + row;
                t.push({ c: c, r: r });
                if (c >= 0 && r >= 0 && c < 5 && r < 5) {
                    cells[c][r].over();
                }
            }
        };
        BoardManager.prototype.cellOut = function (column, row) {
            var c;
            var r;
            var cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            for (var i = 0; i < BoardManager.neighbourSquares.length; i++) {
                c = BoardManager.neighbourSquares[i][0] + column;
                r = BoardManager.neighbourSquares[i][1] + row;
                if (c >= 0 && r >= 0 && c < 5 && r < 5) {
                    cells[c][r].out();
                }
            }
        };
        BoardManager.prototype.cellFlipped = function (col, row) {
            this.frameCounterSleep = 0;
            var board = HappyKittensPuzzle.BoardState.currentInstance.board;
            board.awakeSleepingKitten();
            var cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            var c;
            var r;
            var cellsToFlip = [];
            var flipOrientation = [];
            for (var i = 0; i < BoardManager.neighbourSquares.length; i++) {
                c = BoardManager.neighbourSquares[i][0] + col;
                r = BoardManager.neighbourSquares[i][1] + row;
                if (c >= 0 && r >= 0 && c < 5 && r < 5) {
                    var verticalFlip = i === 1 || i === 2;
                    cellsToFlip.push(cells[c][r]);
                    flipOrientation.push(verticalFlip);
                }
            }
            this.game.time.events.add(275, function (args) {
                var cells = args[0];
                var flipOrientation = args[1];
                for (var i = 0; i < cells.length; i++) {
                    cells[i].flip(flipOrientation[i]);
                }
                var levelPassed = this.checkBoard();
                if (levelPassed) {
                    this.levelPassed();
                }
            }, this, [cellsToFlip, flipOrientation]);
            if (this.currentRow === null || row !== this.currentRow || col !== this.currentCol) {
                HappyKittensPuzzle.GameVars.moves++;
                HappyKittensPuzzle.BoardState.currentInstance.move();
            }
            this.currentRow = row;
            this.currentCol = col;
            HappyKittensPuzzle.GameVars.cellsFlipping = true;
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.COOLGAMES && this.timerEvent === null) {
                HappyKittensPuzzle.GameVars.time = 0;
                this.timerEvent = this.game.time.events.loop(Phaser.Timer.SECOND, this.onSecondPassed, this);
            }
            this.game.time.events.add(550, function () {
                HappyKittensPuzzle.GameVars.cellsFlipping = false;
            }, this);
        };
        BoardManager.prototype.checkBoard = function () {
            var passed = true;
            var cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            for (var col = 0; col < 5 && passed; col++) {
                for (var row = 0; row < 5 && passed; row++) {
                    if (cells[col][row].state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                        passed = false;
                        break;
                    }
                }
            }
            return passed;
        };
        BoardManager.prototype.resetLevel = function () {
            HappyKittensPuzzle.BoardState.currentInstance.reset();
        };
        BoardManager.prototype.exit = function () {
            HappyKittensPuzzle.BoardState.currentInstance.exit();
        };
        BoardManager.prototype.levelPassed = function () {
            HappyKittensPuzzle.GameVars.levelPassed = true;
            HappyKittensPuzzle.GameManager.levelPassed();
            HappyKittensPuzzle.BoardState.currentInstance.levelPassed();
        };
        return BoardManager;
    }());
    BoardManager.neighbourSquares = [[0, -1], [-1, 0], [1, 0], [0, 1]];
    HappyKittensPuzzle.BoardManager = BoardManager;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var BoardState = (function (_super) {
        __extends(BoardState, _super);
        function BoardState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BoardState.prototype.init = function () {
            BoardState.currentInstance = this;
            this.boardManager = new HappyKittensPuzzle.BoardManager(this.game);
        };
        BoardState.prototype.create = function () {
            var background = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, HappyKittensPuzzle.GameConstants.GAME_HEIGHT / 2, "texture_atlas_1", "board.png");
            background.anchor.set(.5);
            background.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.hud = new HappyKittensPuzzle.HUD(this.game);
            this.add.existing(this.hud);
            this.gui = new HappyKittensPuzzle.GUI(this.game);
            this.add.existing(this.gui);
            this.board = new HappyKittensPuzzle.Board(this.game);
            this.add.existing(this.board);
            if (HappyKittensPuzzle.GameVars.currentLevel < 4 && HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - 1] === 0) {
                this.activateTutorial();
            }
            this.game.camera.flash(0x000000, HappyKittensPuzzle.GameConstants.TIME_FADE, false);
        };
        BoardState.prototype.shutdown = function () {
            BoardState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        BoardState.prototype.update = function () {
            _super.prototype.update.call(this);
            this.boardManager.update();
        };
        BoardState.prototype.activateTutorial = function () {
            this.board.activateTutorial();
        };
        BoardState.prototype.move = function () {
            this.hud.updateMoves();
        };
        BoardState.prototype.levelPassed = function () {
            this.board.levelPassed();
            var passedLevelKittenAnimation = new HappyKittensPuzzle.PassedLevelKittenAnimation(this.game);
            passedLevelKittenAnimation.activate();
            this.add.existing(passedLevelKittenAnimation);
            this.game.time.events.add(1000, this.levelEnded, this);
        };
        BoardState.prototype.reset = function () {
            this.game.camera.fade(0x000000, HappyKittensPuzzle.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("BoardState", true, false);
            }, this);
        };
        BoardState.prototype.exit = function () {
            this.game.camera.fade(0x000000, HappyKittensPuzzle.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("LevelSelectionState", true, false);
            }, this);
        };
        BoardState.prototype.levelEnded = function () {
            if (HappyKittensPuzzle.GameVars.gameFinished) {
                this.hud.showGameFinishedMessage();
            }
            else {
                this.game.camera.fade(0x000000, HappyKittensPuzzle.GameConstants.TIME_FADE, true);
                this.game.camera.onFadeComplete.add(function () {
                    this.game.state.start("BoardState", true, false);
                }, this);
            }
        };
        return BoardState;
    }(Phaser.State));
    HappyKittensPuzzle.BoardState = BoardState;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var Cell = (function (_super) {
        __extends(Cell, _super);
        function Cell(game, state, column, row) {
            var _this = _super.call(this, game, null, "cards", false) || this;
            _this.state = state;
            _this.column = column;
            _this.row = row;
            _this.flipping = false;
            _this.rotationTween = false;
            _this.sleeping = false;
            _this.activated = true;
            _this.flipTween = null;
            _this.happyKitten = _this.create(0, 0, "texture_atlas_1", "happy_kitten_idle.png");
            _this.happyKitten.anchor.set(.5);
            _this.happyKitten.inputEnabled = true;
            _this.happyKitten.events.onInputDown.add(_this.onClick, _this);
            _this.happyKitten.animations.add(Cell.MEOW_ANIMATION, Phaser.Animation.generateFrameNames("happy_kitten_meow_", 1, 9, ".png", 4));
            _this.happyKitten.animations.add(Cell.BLINK_ANIMATION, Phaser.Animation.generateFrameNames("happy_kitten_blink_", 1, 7, ".png", 4));
            _this.happyKitten.animations.add(Cell.SLEEP_ANIMATION, Phaser.Animation.generateFrameNames("happy_kitten_sleep_", 1, 3, ".png", 4));
            _this.grumpyKitten = _this.create(0, 0, "texture_atlas_1", "grumpy_kitten_idle.png");
            _this.grumpyKitten.anchor.set(.5);
            _this.grumpyKitten.inputEnabled = true;
            _this.grumpyKitten.events.onInputDown.add(_this.onClick, _this);
            _this.grumpyKitten.animations.add(Cell.MEOW_ANIMATION, Phaser.Animation.generateFrameNames("grumpy_kitten_meow_", 1, 11, ".png", 4));
            _this.grumpyKitten.animations.add(Cell.TIC1_ANIMATION, Phaser.Animation.generateFrameNames("grumpy_kitten_tic1_", 1, 13, ".png", 4));
            _this.grumpyKitten.animations.add(Cell.TIC2_ANIMATION, Phaser.Animation.generateFrameNames("grumpy_kitten_tic2_", 1, 7, ".png", 4));
            _this.grumpyKitten.animations.add(Cell.TIC3_ANIMATION, Phaser.Animation.generateFrameNames("grumpy_kitten_tic2_", 1, 10, ".png", 4));
            if (_this.game.device.desktop) {
                _this.overImage = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "rollover_cat.png");
                _this.overImage.anchor.set(.5);
                _this.overImage.visible = false;
                _this.overImage.alpha = .65;
                _this.addAt(_this.overImage, 0);
                _this.happyKitten.events.onInputOver.add(_this.onOver, _this);
                _this.happyKitten.events.onInputOut.add(_this.onOut, _this);
                _this.grumpyKitten.events.onInputOver.add(_this.onOver, _this);
                _this.grumpyKitten.events.onInputOut.add(_this.onOut, _this);
            }
            else {
                _this.overImage = null;
            }
            if (_this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                _this.happyKitten.scale.set(0);
                _this.happyKitten.visible = false;
            }
            else {
                _this.grumpyKitten.scale.set(0);
                _this.grumpyKitten.visible = false;
            }
            return _this;
        }
        Cell.prototype.update = function () {
            var rnd = Math.random();
            if (rnd > .9995) {
                if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                    var ticAnimation = void 0;
                    rnd = Math.random();
                    if (rnd < .33) {
                        ticAnimation = Cell.TIC1_ANIMATION;
                    }
                    else if (rnd < .66) {
                        ticAnimation = Cell.TIC2_ANIMATION;
                    }
                    else {
                        ticAnimation = Cell.TIC3_ANIMATION;
                    }
                    this.grumpyKitten.play(ticAnimation, 24, false);
                }
                else if (!this.sleeping) {
                    rnd = Math.random();
                    if (rnd > .5) {
                        this.happyKitten.animations.play(Cell.BLINK_ANIMATION, 24, false);
                    }
                    else if (!this.rotationTween) {
                        this.rotationTween = true;
                        this.game.add.tween(this.happyKitten)
                            .to({ angle: Math.random() > .5 ? -4.5 : 4.5 }, 400, Phaser.Easing.Cubic.Out, true, 0, 0, true)
                            .onComplete.add(function () {
                            this.rotationTween = false;
                        }, this);
                    }
                }
            }
        };
        Cell.prototype.sleep = function () {
            this.sleeping = true;
            this.happyKitten.animations.play(Cell.SLEEP_ANIMATION, 2);
        };
        Cell.prototype.awake = function () {
            this.sleeping = false;
            if (this.state === HappyKittensPuzzle.GameConstants.HAPPY) {
                this.happyKitten.frameName = "happy_kitten_idle.png";
            }
        };
        Cell.prototype.flip = function (verticalFlipAxis) {
            if (this.flipping) {
                return;
            }
            this.flipping = true;
            if (this.game.device.desktop) {
                this.overImage.visible = false;
            }
            if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                this.state = HappyKittensPuzzle.GameConstants.HAPPY;
                if (verticalFlipAxis) {
                    this.flipTween = this.game.add.tween(this.grumpyKitten.scale)
                        .to({ x: 0 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.grumpyKitten.visible = false;
                        this.happyKitten.scale.set(0, 1);
                        this.happyKitten.visible = true;
                        this.game.add.tween(this.happyKitten.scale)
                            .to({ x: 1 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true)
                            .onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                }
                else {
                    this.flipTween = this.game.add.tween(this.grumpyKitten.scale)
                        .to({ y: 0 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.grumpyKitten.visible = false;
                        this.happyKitten.scale.set(1, 0);
                        this.happyKitten.visible = true;
                        this.game.add.tween(this.happyKitten.scale)
                            .to({ y: 1 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true)
                            .onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                }
            }
            else {
                this.state = HappyKittensPuzzle.GameConstants.GRUMPY;
                if (verticalFlipAxis) {
                    this.flipTween = this.game.add.tween(this.happyKitten.scale)
                        .to({ x: 0 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.happyKitten.visible = false;
                        this.grumpyKitten.scale.set(0, 1);
                        this.grumpyKitten.visible = true;
                        this.game.add.tween(this.grumpyKitten.scale)
                            .to({ x: 1 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true)
                            .onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                }
                else {
                    this.flipTween = this.game.add.tween(this.happyKitten.scale)
                        .to({ y: 0 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.happyKitten.visible = false;
                        this.grumpyKitten.scale.set(1, 0);
                        this.grumpyKitten.visible = true;
                        this.game.add.tween(this.grumpyKitten.scale)
                            .to({ y: 1 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true)
                            .onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                }
            }
        };
        Cell.prototype.endAnimation = function () {
            if (this.flipping) {
                return;
            }
            this.game.add.tween(this.happyKitten.scale)
                .to({ x: 1.075, y: 1.075 }, 125, Phaser.Easing.Cubic.Out, true, 300, 0, true);
        };
        Cell.prototype.over = function () {
            if (this.flipping) {
                return;
            }
            this.overImage.visible = true;
        };
        Cell.prototype.out = function () {
            this.overImage.visible = false;
        };
        Cell.prototype.onClick = function () {
            if (HappyKittensPuzzle.GameVars.cellsFlipping || (HappyKittensPuzzle.GameVars.levelPassed && !HappyKittensPuzzle.GameConstants.EDITING_LEVELS) || !this.activated) {
                return;
            }
            this.flip(true);
            this.game.time.events.add(450, function () {
                if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                    this.grumpyKitten.animations.play(Cell.MEOW_ANIMATION, 24, false);
                }
                else {
                    this.happyKitten.animations.play(Cell.MEOW_ANIMATION, 24, false);
                }
            }, this);
            if (HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                HappyKittensPuzzle.LevelEditionState.currentInstance.move(this.column, this.row);
            }
            else {
                HappyKittensPuzzle.BoardManager.currentInstance.cellFlipped(this.column, this.row);
            }
            this.game.time.events.add(250, function () {
                var rnd = Math.random();
                if (rnd < .33) {
                    HappyKittensPuzzle.AudioManager.getInstance().playSound(this.state === HappyKittensPuzzle.GameConstants.GRUMPY ? "grumpy_cat_01" : "happy_cat_01", false, .2);
                }
                else if (rnd < .66) {
                    HappyKittensPuzzle.AudioManager.getInstance().playSound(this.state === HappyKittensPuzzle.GameConstants.GRUMPY ? "grumpy_cat_02" : "happy_cat_02", false, .2);
                }
                else {
                    HappyKittensPuzzle.AudioManager.getInstance().playSound(this.state === HappyKittensPuzzle.GameConstants.GRUMPY ? "grumpy_cat_03" : "happy_cat_03", false, .2);
                }
            }, this);
        };
        Cell.prototype.onOver = function () {
            if (HappyKittensPuzzle.GameVars.levelPassed || !this.activated || this.flipping) {
                return;
            }
            if (!HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                var board = HappyKittensPuzzle.BoardState.currentInstance.board;
                board.bringToTop(this);
                if (board.handIcon) {
                    board.bringToTop(board.handIcon);
                }
            }
            this.overImage.visible = true;
            if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                this.grumpyKitten.scale.set(1.15);
            }
            else {
                this.happyKitten.scale.set(1.15);
            }
            if (!HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                HappyKittensPuzzle.BoardManager.currentInstance.cellOver(this.column, this.row);
            }
            HappyKittensPuzzle.AudioManager.getInstance().playSound("rollover_cat");
        };
        Cell.prototype.onOut = function () {
            this.overImage.visible = false;
            if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                this.grumpyKitten.frameName = "grumpy_kitten_idle.png";
                this.grumpyKitten.scale.set(1);
            }
            else {
                if (!this.sleeping) {
                    this.happyKitten.frameName = "happy_kitten_idle.png";
                }
                this.happyKitten.scale.set(1);
            }
            if (!HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                HappyKittensPuzzle.BoardManager.currentInstance.cellOut(this.column, this.row);
            }
        };
        return Cell;
    }(Phaser.Group));
    Cell.FLIP_TIME = 175;
    Cell.MEOW_ANIMATION = "meow";
    Cell.BLINK_ANIMATION = "blink";
    Cell.SLEEP_ANIMATION = "sleep";
    Cell.TIC1_ANIMATION = "tic1";
    Cell.TIC2_ANIMATION = "tic2";
    Cell.TIC3_ANIMATION = "tic3";
    HappyKittensPuzzle.Cell = Cell;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var GUI = (function (_super) {
        __extends(GUI, _super);
        function GUI(game) {
            var _this = _super.call(this, game, null, "gui") || this;
            var audioButton;
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                audioButton = new HappyKittensPuzzle.AudioButton(_this.game, -(HappyKittensPuzzle.AudioButton.PX + 40) / HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.AudioButton.PY);
            }
            else {
                audioButton = new HappyKittensPuzzle.AudioButton(_this.game, HappyKittensPuzzle.AudioButton.PX / HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.AudioButton.PY);
            }
            var yellowStripe = HappyKittensPuzzle.BoardState.currentInstance.hud.yellowStripe;
            yellowStripe.add(audioButton);
            var lowerStripe = HappyKittensPuzzle.BoardState.currentInstance.hud.lowerStripe;
            _this.exitButton = new Phaser.Button(_this.game, -340 / HappyKittensPuzzle.GameVars.stripesScale, 16, "texture_atlas_1", _this.onExitClicked, _this);
            _this.exitButton.setFrames("button-exit-on.png", "button-exit-off.png", "button-exit-on.png");
            lowerStripe.add(_this.exitButton);
            _this.resetButton = new Phaser.Button(_this.game, -260 / HappyKittensPuzzle.GameVars.stripesScale, 16, "texture_atlas_1", _this.onResetClicked, _this);
            _this.resetButton.setFrames("button-reset-on.png", "button-reset-off.png", "button-reset-on.png");
            lowerStripe.add(_this.resetButton);
            return _this;
        }
        GUI.prototype.onResetClicked = function () {
            HappyKittensPuzzle.AudioManager.getInstance().playSound("click");
            HappyKittensPuzzle.BoardManager.currentInstance.resetLevel();
        };
        GUI.prototype.onExitClicked = function () {
            HappyKittensPuzzle.AudioManager.getInstance().playSound("click");
            HappyKittensPuzzle.BoardManager.currentInstance.exit();
        };
        return GUI;
    }(Phaser.Group));
    HappyKittensPuzzle.GUI = GUI;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var HandIcon = (function (_super) {
        __extends(HandIcon, _super);
        function HandIcon(game, x, y) {
            var _this = _super.call(this, game, x + 15, y + 15 * HappyKittensPuzzle.GameVars.scaleY, "texture_atlas_1", "finger_cursor.png") || this;
            _this.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.scaleTween = _this.game.add.tween(_this.scale)
                .to({ x: 1.065, y: 1.065 * HappyKittensPuzzle.GameVars.scaleY }, 380, Phaser.Easing.Cubic.Out, true, 0, -1, true);
            return _this;
        }
        HandIcon.prototype.hide = function () {
            this.scaleTween.pendingDelete = true;
            this.game.add.tween(this)
                .to({ alpha: 0 }, 250, Phaser.Easing.Cubic.Out, true);
        };
        return HandIcon;
    }(Phaser.Image));
    HappyKittensPuzzle.HandIcon = HandIcon;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var HUD = (function (_super) {
        __extends(HUD, _super);
        function HUD(game) {
            var _this = _super.call(this, game, null, "hud") || this;
            _this.yellowStripe = new HappyKittensPuzzle.YellowStripe(_this.game, "LEVEL " + HappyKittensPuzzle.GameVars.currentLevel);
            _this.yellowStripe.y = HappyKittensPuzzle.GameVars.upperStripe_py;
            _this.add(_this.yellowStripe);
            _this.lowerStripe = new Phaser.Group(_this.game);
            _this.lowerStripe.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            _this.lowerStripe.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2;
            _this.lowerStripe.y = HappyKittensPuzzle.GameVars.lowerStripe_py;
            _this.lowerStripe.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            _this.add(_this.lowerStripe);
            var stripeBackground = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.BLACK_SQUARE));
            stripeBackground.scale.set(1.5 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, 100 / 64);
            stripeBackground.anchor.x = .5;
            stripeBackground.alpha = .5;
            _this.lowerStripe.add(stripeBackground);
            var movesLabel = new Phaser.Text(_this.game, 280 / HappyKittensPuzzle.GameVars.stripesScale, 5, "MOVES:", { font: "40px Concert One", fill: "#FFFFFF" });
            movesLabel.anchor.x = 1;
            _this.lowerStripe.add(movesLabel);
            _this.moves = new Phaser.Text(_this.game, 310 / HappyKittensPuzzle.GameVars.stripesScale, 5, HappyKittensPuzzle.GameVars.moves.toString(), { font: "40px Concert One", fill: "#FFFFFF" });
            _this.lowerStripe.add(_this.moves);
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.COOLGAMES) {
                _this.time = new Phaser.Text(_this.game, -172 / HappyKittensPuzzle.GameVars.stripesScale, 34, "TIME: 00:00", { font: "40px Concert One", fill: "#FFFFFF" });
                _this.lowerStripe.add(_this.time);
            }
            var levelBest = HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - 1];
            if (levelBest > 0) {
                var bestLabel = new Phaser.Text(_this.game, 280 / HappyKittensPuzzle.GameVars.stripesScale, 50, "LEVEL'S BEST:", { font: "40px Concert One", fill: "#FFFFFF" });
                bestLabel.anchor.x = 1;
                _this.lowerStripe.add(bestLabel);
                var best = new Phaser.Text(_this.game, 310 / HappyKittensPuzzle.GameVars.stripesScale, 50, levelBest.toString(), { font: "40px Concert One", fill: "#FFFFFF" });
                _this.lowerStripe.add(best);
                if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.COOLGAMES) {
                    _this.time.y = 5;
                }
            }
            else {
                movesLabel.y = 15;
                movesLabel.fontSize = "62px";
                _this.moves.y = 15;
                _this.moves.fontSize = "62px";
            }
            return _this;
        }
        HUD.prototype.updateTime = function () {
            this.time.text = "TIME: " + HappyKittensPuzzle.GameVars.formatTime(HappyKittensPuzzle.GameVars.time);
        };
        HUD.prototype.updateMoves = function () {
            this.moves.text = HappyKittensPuzzle.GameVars.moves.toString();
        };
        HUD.prototype.showGameFinishedMessage = function () {
            var backgroundSprite = HappyKittensPuzzle.BoardState.currentInstance.add.sprite(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, HappyKittensPuzzle.GameConstants.GAME_HEIGHT / 2, this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_CYAN_SQUARE));
            backgroundSprite.anchor.set(.5);
            backgroundSprite.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            backgroundSprite.scale.set(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, 350 / 64);
            var congratulationsMessage = new Phaser.Text(this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, HappyKittensPuzzle.GameConstants.GAME_HEIGHT / 2, "MEOW! CONGRATULATIONS ALL LEVELS CLEARED", { font: "76px Concert One", fill: "#FFFFFF" });
            congratulationsMessage.align = "center";
            congratulationsMessage.wordWrap = true;
            congratulationsMessage.wordWrapWidth = 400;
            congratulationsMessage.lineSpacing = -11;
            congratulationsMessage.setShadow(4, 4, "rgba(8, 87, 137, 1)", 0);
            congratulationsMessage.anchor.set(.5);
            congratulationsMessage.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            HappyKittensPuzzle.BoardState.currentInstance.add.existing(congratulationsMessage);
        };
        return HUD;
    }(Phaser.Group));
    HappyKittensPuzzle.HUD = HUD;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var PassedLevelKittenAnimation = (function (_super) {
        __extends(PassedLevelKittenAnimation, _super);
        function PassedLevelKittenAnimation(game) {
            var _this = _super.call(this, game, null, "passed-level-animation") || this;
            _this.kittenContainer = new Phaser.Group(_this.game);
            _this.kittenContainer.x = -100;
            _this.kittenContainer.y = HappyKittensPuzzle.GameConstants.GAME_HEIGHT / 2;
            _this.kittenContainer.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.add(_this.kittenContainer);
            var kittenTextureName = Math.random() > .5 ? "happy_kitten_idle.png" : "grumpy_kitten_idle.png";
            _this.kittenImage = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", kittenTextureName);
            _this.kittenImage.scale.set(1.15);
            _this.kittenImage.anchor.set(.5);
            _this.kittenContainer.add(_this.kittenImage);
            return _this;
        }
        PassedLevelKittenAnimation.prototype.activate = function () {
            this.game.add.tween(this.kittenImage)
                .to({ angle: 360 }, 850, Phaser.Easing.Linear.None, true, 150);
            this.game.add.tween(this.kittenContainer)
                .to({ x: HappyKittensPuzzle.GameConstants.GAME_WIDTH + 100 }, 850, Phaser.Easing.Linear.None, true, 150);
        };
        return PassedLevelKittenAnimation;
    }(Phaser.Group));
    HappyKittensPuzzle.PassedLevelKittenAnimation = PassedLevelKittenAnimation;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var LevelsContainer = (function (_super) {
        __extends(LevelsContainer, _super);
        function LevelsContainer(game, i) {
            var _this = _super.call(this, game, null, "level-container") || this;
            _this.i = i;
            _this.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            var levelSelectionButton;
            for (var col = 0; col < 3; col++) {
                for (var row = 0; row < 4; row++) {
                    levelSelectionButton = new HappyKittensPuzzle.LevelSelectionButton(_this.game, _this.i * 12 + (col + 1) + 3 * row);
                    levelSelectionButton.x = -140 * (1 - col);
                    levelSelectionButton.y = -140 * (1.5 - row);
                    _this.add(levelSelectionButton);
                }
            }
            return _this;
        }
        return LevelsContainer;
    }(Phaser.Group));
    HappyKittensPuzzle.LevelsContainer = LevelsContainer;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var LevelSelectionButton = (function (_super) {
        __extends(LevelSelectionButton, _super);
        function LevelSelectionButton(game, level) {
            var _this = _super.call(this, game, null, "level-selection-button") || this;
            _this.level = level;
            var isBlocked = _this.level > HappyKittensPuzzle.GameVars.achievedLevel;
            if (isBlocked) {
                var blockedButtonImage = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "button-level-selection-blocked.png");
                blockedButtonImage.anchor.set(.5);
                _this.add(blockedButtonImage);
            }
            else {
                var button = new Phaser.Button(_this.game, 0, 0, "texture_atlas_1", _this.onClick, _this);
                button.setFrames("button-level-selection-on-on.png", "button-level-selection-on-off.png", "button-level-selection-on-on.png");
                button.anchor.set(.5);
                _this.add(button);
            }
            var levelLabel = new Phaser.Text(_this.game, 0, -9, _this.level.toString(), { font: "60px Concert One", fill: "#FFFFFF" });
            levelLabel.anchor.set(.5);
            _this.add(levelLabel);
            return _this;
        }
        LevelSelectionButton.prototype.onClick = function () {
            if (HappyKittensPuzzle.LevelSelectionState.leavingScene) {
                return;
            }
            HappyKittensPuzzle.LevelSelectionState.leavingScene = true;
            this.game.time.events.add(150, function () {
                HappyKittensPuzzle.GameManager.levelSelected(this.level);
            }, this);
            HappyKittensPuzzle.AudioManager.getInstance().playSound("click");
        };
        return LevelSelectionButton;
    }(Phaser.Group));
    HappyKittensPuzzle.LevelSelectionButton = LevelSelectionButton;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var LevelSelectionState = (function (_super) {
        __extends(LevelSelectionState, _super);
        function LevelSelectionState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LevelSelectionState.prototype.init = function () {
            LevelSelectionState.currentInstance = this;
            LevelSelectionState.leavingScene = false;
            this.tweening = false;
        };
        LevelSelectionState.prototype.create = function () {
            var backgroundImage = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, HappyKittensPuzzle.GameConstants.GAME_HEIGHT / 2, "texture_atlas_1", "board_menu.png");
            backgroundImage.anchor.set(.5);
            backgroundImage.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            var titleContainer = new HappyKittensPuzzle.TitleContainer(this.game);
            this.add.existing(titleContainer);
            this.levelsRail = new Phaser.Group(this.game);
            this.add.existing(this.levelsRail);
            var aspectRatio = window.innerHeight / window.innerWidth;
            var levelsContainer_py;
            var levelsContainerScale = 1;
            if (this.game.device.desktop) {
                levelsContainer_py = 650;
            }
            else {
                if (aspectRatio >= 1.75) {
                    levelsContainer_py = 620;
                }
                else if (aspectRatio >= 1.5) {
                    levelsContainer_py = 640;
                }
                else {
                    levelsContainer_py = 662;
                    levelsContainerScale = .85;
                }
            }
            var levelsContainer;
            for (var i = 0; i < LevelSelectionState.LEVEL_PAGES; i++) {
                levelsContainer = new HappyKittensPuzzle.LevelsContainer(this.game, i);
                levelsContainer.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH * (.5 + i);
                levelsContainer.y = levelsContainer_py;
                levelsContainer.scale.set(levelsContainerScale);
                this.levelsRail.add(levelsContainer);
            }
            this.previousButton = this.add.button(60, levelsContainer_py, "texture_atlas_1", this.onArrowClick, this);
            this.previousButton.anchor.set(.5);
            this.previousButton.setFrames("button-next-on.png", "button-next-off.png", "button-next-on.png");
            this.previousButton.scale.set(-1, HappyKittensPuzzle.GameVars.scaleY);
            this.previousButton.name = LevelSelectionState.PREVIOUS;
            this.nextButton = this.add.button(700, levelsContainer_py, "texture_atlas_1", this.onArrowClick, this);
            this.nextButton.anchor.set(.5);
            this.nextButton.setFrames("button-next-on.png", "button-next-off.png", "button-next-on.png");
            this.nextButton.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.nextButton.name = LevelSelectionState.NEXT;
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                var laggedLogo = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, HappyKittensPuzzle.GameConstants.GAME_HEIGHT - 56, "texture_atlas_1", "lagged-3.png");
                laggedLogo.anchor.set(.5);
                laggedLogo.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            }
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.COOLGAMES) {
                var moreGamesButton = this.add.button(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, HappyKittensPuzzle.GameConstants.GAME_HEIGHT - 50, "texture_atlas_1", this.onClickMoreGames, this);
                moreGamesButton.anchor.set(.5);
                moreGamesButton.setFrames("button_more_games_on.png", "button_more_games_off.png", "button_more_games_on.png");
                moreGamesButton.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            }
            else {
                var creditsLabel = this.add.text(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, HappyKittensPuzzle.GameConstants.GAME_HEIGHT - 30, "made by ravalmatic, licensed to " + HappyKittensPuzzle.GameConstants.SPONSOR, { font: "23px Arial", fill: "#FFFFFF" });
                creditsLabel.anchor.x = .5;
                creditsLabel.scale.y = HappyKittensPuzzle.GameVars.scaleY;
                creditsLabel.alpha = .72;
            }
            this.setCurrentLevelPage();
            this.game.camera.flash(0x000000, HappyKittensPuzzle.GameConstants.TIME_FADE, false);
        };
        LevelSelectionState.prototype.shutdown = function () {
            LevelSelectionState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        LevelSelectionState.prototype.goToBoardScene = function () {
            this.game.camera.fade(0x000000, HappyKittensPuzzle.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("BoardState", true, false);
            }, this);
        };
        LevelSelectionState.prototype.setCurrentLevelPage = function () {
            this.indexLevelsPage = Math.floor((HappyKittensPuzzle.GameVars.achievedLevel - 1) / 12);
            if (this.indexLevelsPage === 0) {
                this.previousButton.visible = false;
            }
            else if (this.indexLevelsPage > 3) {
                this.nextButton.visible = false;
            }
            this.levelsRail.x = -HappyKittensPuzzle.GameConstants.GAME_WIDTH * this.indexLevelsPage;
        };
        LevelSelectionState.prototype.onArrowClick = function (b) {
            if (this.tweening) {
                return;
            }
            b.clearFrames();
            this.tweening = true;
            this.setCorrespondingContainersVisible(true, b.name);
            var px = this.levelsRail.x;
            if (b.name === LevelSelectionState.PREVIOUS) {
                px += HappyKittensPuzzle.GameConstants.GAME_WIDTH;
                this.indexLevelsPage--;
            }
            else {
                px -= HappyKittensPuzzle.GameConstants.GAME_WIDTH;
                this.indexLevelsPage++;
            }
            if (this.indexLevelsPage === 0) {
                this.previousButton.visible = false;
            }
            else if (this.indexLevelsPage === LevelSelectionState.LEVEL_PAGES - 1) {
                this.nextButton.visible = false;
            }
            else {
                this.previousButton.visible = true;
                this.nextButton.visible = true;
            }
            this.game.add.tween(this.levelsRail)
                .to({ x: px }, 350, Phaser.Easing.Quadratic.Out, true)
                .onComplete.add(function () {
                this.tweening = false;
                this.setCorrespondingContainersVisible(false);
            }, this);
            HappyKittensPuzzle.AudioManager.getInstance().playSound("slide_level_container");
        };
        LevelSelectionState.prototype.setCorrespondingContainersVisible = function (beforeTweening, pressedButtonName) {
            if (beforeTweening) {
                if (pressedButtonName === LevelSelectionState.NEXT) {
                    this.levelsRail.forEach(function (levelsContainer) {
                        if (levelsContainer.i === this.indexLevelsPage || levelsContainer.i === this.indexLevelsPage + 1) {
                            levelsContainer.visible = true;
                        }
                        else {
                            levelsContainer.visible = false;
                        }
                    }, this);
                }
                else {
                    this.levelsRail.forEach(function (levelsContainer) {
                        if (levelsContainer.i === this.indexLevelsPage || levelsContainer.i === this.indexLevelsPage - 1) {
                            levelsContainer.visible = true;
                        }
                        else {
                            levelsContainer.visible = false;
                        }
                    }, this);
                }
            }
            else {
                this.levelsRail.forEach(function (levelsContainer) {
                    if (levelsContainer.i === this.indexLevelsPage) {
                        levelsContainer.visible = true;
                    }
                    else {
                        levelsContainer.visible = false;
                    }
                }, this);
            }
        };
        LevelSelectionState.prototype.onClickMoreGames = function () {
            moregames.redirect();
        };
        return LevelSelectionState;
    }(Phaser.State));
    LevelSelectionState.PREVIOUS = "previous";
    LevelSelectionState.NEXT = "next";
    LevelSelectionState.LEVEL_PAGES = 5;
    HappyKittensPuzzle.LevelSelectionState = LevelSelectionState;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var TitleContainer = (function (_super) {
        __extends(TitleContainer, _super);
        function TitleContainer(game) {
            var _this = _super.call(this, game, null, "title-container") || this;
            var aspectRatio = window.innerHeight / window.innerWidth;
            var shadowHeight;
            var yellowStripeContainer_py;
            if (_this.game.device.desktop) {
                shadowHeight = 314;
                yellowStripeContainer_py = 190;
            }
            else {
                if (aspectRatio >= 1.75) {
                    shadowHeight = 250;
                    yellowStripeContainer_py = 154;
                }
                else if (aspectRatio >= 1.5) {
                    shadowHeight = 294;
                    yellowStripeContainer_py = 180;
                }
                else {
                    shadowHeight = 304;
                    yellowStripeContainer_py = 200;
                }
            }
            var shadow = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            shadow.scale.set(1.5 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, shadowHeight / 64);
            shadow.alpha = .45;
            _this.add(shadow);
            var gameTitle = new Phaser.Image(_this.game, -12, -12, "texture_atlas_1", "title_bar.png");
            gameTitle.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.add(gameTitle);
            var audioButton = new HappyKittensPuzzle.AudioButton(_this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH - 85, 14);
            audioButton.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.add(audioButton);
            var yellowStripeContainer = new Phaser.Group(_this.game);
            yellowStripeContainer.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2;
            yellowStripeContainer.y = yellowStripeContainer_py;
            yellowStripeContainer.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            _this.add(yellowStripeContainer);
            var colorStripe = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = .5;
            colorStripe.scale.set(1.5 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, 12 / 64);
            yellowStripeContainer.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, 0, colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.ORANGE_SQUARE));
            colorStripe.anchor.x = .5;
            colorStripe.scale.set(1.5 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, 90 / 64);
            yellowStripeContainer.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, 0, colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = .5;
            colorStripe.scale.set(1.5 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, 12 / 64);
            yellowStripeContainer.add(colorStripe);
            var stripeLabel = new Phaser.Text(_this.game, 0, 18, "SELECT LEVEL", { font: "70px Concert One", fill: "#FFFFFF" });
            stripeLabel.anchor.x = .5;
            stripeLabel.setShadow(4, 4, "rgba(197, 97, 0, 1)", 0);
            yellowStripeContainer.add(stripeLabel);
            return _this;
        }
        return TitleContainer;
    }(Phaser.Group));
    HappyKittensPuzzle.TitleContainer = TitleContainer;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var HappyKittensPuzzle;
(function (HappyKittensPuzzle) {
    var LevelEditionState = (function (_super) {
        __extends(LevelEditionState, _super);
        function LevelEditionState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LevelEditionState.prototype.init = function () {
            LevelEditionState.currentInstance = this;
            HappyKittensPuzzle.GameVars.moves = 0;
        };
        LevelEditionState.prototype.create = function () {
            var background = new Phaser.Sprite(this.game, 0, 0, this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            background.scale.set(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, HappyKittensPuzzle.GameConstants.GAME_HEIGHT / 64);
            this.add.existing(background);
            this.board = new HappyKittensPuzzle.Board(this.game);
            this.add.existing(this.board);
            this.movementsLabel = this.add.text(600, 900, "moves  " + HappyKittensPuzzle.GameVars.moves, { font: "30px Arial", fill: "#000000" });
            this.movementsLabel.anchor.x = 1;
            this.movementsLabel.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            var resetButton = this.add.button(20, 900, "texture_atlas_1", this.onResetClicked, this);
            resetButton.setFrames("button-reset-on.png", "button-reset-off.png", "button-reset-on.png");
            resetButton.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.game.camera.flash(0x000000, HappyKittensPuzzle.GameConstants.TIME_FADE, false);
        };
        LevelEditionState.prototype.shutdown = function () {
            LevelEditionState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        LevelEditionState.prototype.move = function (column, row) {
            HappyKittensPuzzle.GameVars.moves++;
            this.movementsLabel.text = "moves " + HappyKittensPuzzle.GameVars.moves;
            var cells = this.board.cells;
            var c;
            var r;
            for (var i = 0; i < HappyKittensPuzzle.BoardManager.neighbourSquares.length; i++) {
                c = HappyKittensPuzzle.BoardManager.neighbourSquares[i][0] + column;
                r = HappyKittensPuzzle.BoardManager.neighbourSquares[i][1] + row;
                if (c >= 0 && r >= 0 && c < cells.length && r < cells.length) {
                    cells[c][r].flip(true);
                }
            }
        };
        LevelEditionState.prototype.onResetClicked = function () {
            this.game.state.start("LevelEditionState", true, false);
        };
        return LevelEditionState;
    }(Phaser.State));
    HappyKittensPuzzle.LevelEditionState = LevelEditionState;
})(HappyKittensPuzzle || (HappyKittensPuzzle = {}));
var Fabrique;
(function (Fabrique) {
    var Plugins;
    (function (Plugins) {
        var CacheBuster = (function (_super) {
            __extends(CacheBuster, _super);
            function CacheBuster(game, parent) {
                var _this = _super.call(this, game, parent) || this;
                _this.patchLoader();
                return _this;
            }
            CacheBuster.prototype.patchLoader = function () {
                Object.defineProperty(Phaser.Loader, "cacheBuster", {
                    value: null
                });
                Phaser.Loader.prototype.transformUrl = function (url, file) {
                    if (!url) {
                        return "";
                    }
                    if (this.cacheBuster !== null && null === url.match(/^(data:)/)) {
                        url += "?v=" + this.cacheBuster;
                    }
                    if (url.match(/^(?:blob:|data:|http:\/\/|https:\/\/|\/\/)/)) {
                        return url;
                    }
                    else {
                        return this.baseURL + file.path + url;
                    }
                };
            };
            return CacheBuster;
        }(Phaser.Plugin));
        Plugins.CacheBuster = CacheBuster;
    })(Plugins = Fabrique.Plugins || (Fabrique.Plugins = {}));
})(Fabrique || (Fabrique = {}));
//# sourceMappingURL=happy-kittens-puzzle.min.js.map