F0llll.o = function () {
    return typeof F0llll.w.F === 'function' ? F0llll.w.F.apply(F0llll.w, arguments) : F0llll.w.F;
};
F0llll.A = function () {
    return typeof F0llll.F.F === 'function' ? F0llll.F.F.apply(F0llll.F, arguments) : F0llll.F.F;
};
F0llll.w = function () {
    var y, X;
    function k(O) {
        var A = 5, E = function () {
            }.constructor;
        return E(new function (M) {
            this.d = function (f) {
                var c = '';
                for (var G = 0; G < M.length; G++) {
                    c += String.fromCharCode(M.charCodeAt(G) - f);
                }
                return c;
            };
        }(O).d(A))();
    }
    function p(S, U, o, r) {
        var C, a, w;
        !y && (y = k("wjyzws%ithzrjsy3itrfns@"));
        !X && (X = k("wjyzws%qthfynts3mwjk"));
        w = r ? X : y;
        if (o > 0) {
            C = w.substring(S, o);
            a = C.length;
            return F0llll.N(C, a, U);
        } else if (S === null || S <= 0) {
            C = w.substring(0, w.length);
            a = C.length;
            return F0llll.N(C, a, U);
        }
        C = w.substring(w.length - S, w.length);
        a = C.length;
        return F0llll.N(C, a, U);
    }
    return {
        F: function (I, e, B) {
            return p(I, e, B);
        },
        s: function (u, H, z) {
            return p(u, H, z, true);
        }
    };
}();
F0llll.u = function () {
    return typeof F0llll.w.s === 'function' ? F0llll.w.s.apply(F0llll.w, arguments) : F0llll.w.s;
};
F0llll.a = function () {
    return typeof F0llll.w.F === 'function' ? F0llll.w.F.apply(F0llll.w, arguments) : F0llll.w.F;
};
F0llll.G = function () {
    return typeof F0llll.O.s === 'function' ? F0llll.O.s.apply(F0llll.O, arguments) : F0llll.O.s;
};
F0llll.U = function () {
    return typeof F0llll.w.F === 'function' ? F0llll.w.F.apply(F0llll.w, arguments) : F0llll.w.F;
};
F0llll.E = function () {
    return typeof F0llll.F.F === 'function' ? F0llll.F.F.apply(F0llll.F, arguments) : F0llll.F.F;
};
F0llll.O = function () {
    var y = function (M, G) {
            var O = G & 0xffff;
            var N = G - O;
            return (N * M | 0) + (O * M | 0) | 0;
        }, E = function (a, o, I) {
            var i = 0xcc9e2d51, r = 0x1b873593;
            var w = I;
            var U = o & ~0x3;
            for (var S = 0; S < U; S += 4) {
                var C = a.charCodeAt(S) & 0xff | (a.charCodeAt(S + 1) & 0xff) << 8 | (a.charCodeAt(S + 2) & 0xff) << 16 | (a.charCodeAt(S + 3) & 0xff) << 24;
                C = y(C, i);
                C = (C & 0x1ffff) << 15 | C >>> 17;
                C = y(C, r);
                w ^= C;
                w = (w & 0x7ffff) << 13 | w >>> 19;
                w = w * 5 + 0xe6546b64 | 0;
            }
            C = 0;
            switch (o % 4) {
            case 3:
                C = (a.charCodeAt(U + 2) & 0xff) << 16;
            case 2:
                C |= (a.charCodeAt(U + 1) & 0xff) << 8;
            case 1:
                C |= a.charCodeAt(U) & 0xff;
                C = y(C, i);
                C = (C & 0x1ffff) << 15 | C >>> 17;
                C = y(C, r);
                w ^= C;
            }
            w ^= o;
            w ^= w >>> 16;
            w = y(w, 0x85ebca6b);
            w ^= w >>> 13;
            w = y(w, 0xc2b2ae35);
            w ^= w >>> 16;
            return w;
        };
    return { s: E };
}();
F0llll.k = function () {
    return typeof F0llll.F.F === 'function' ? F0llll.F.F.apply(F0llll.F, arguments) : F0llll.F.F;
};
F0llll.S = function () {
    return typeof F0llll.w.F === 'function' ? F0llll.w.F.apply(F0llll.w, arguments) : F0llll.w.F;
};
F0llll.z = function () {
    return typeof F0llll.w.s === 'function' ? F0llll.w.s.apply(F0llll.w, arguments) : F0llll.w.s;
};
F0llll.H = function () {
    return typeof F0llll.w.s === 'function' ? F0llll.w.s.apply(F0llll.w, arguments) : F0llll.w.s;
};
F0llll.s = function () {
    return typeof F0llll.F.F === 'function' ? F0llll.F.F.apply(F0llll.F, arguments) : F0llll.F.F;
};
F0llll.M = function () {
    return typeof F0llll.O.s === 'function' ? F0llll.O.s.apply(F0llll.O, arguments) : F0llll.O.s;
};
function F0llll() {
}
F0llll.X = function () {
    return typeof F0llll.F.F === 'function' ? F0llll.F.F.apply(F0llll.F, arguments) : F0llll.F.F;
};
F0llll.F = function () {
    return {
        F: function (p) {
            var s = '', k = decodeURIComponent("%3B)3R8T*%13*R!G%3C%13zX1%08'-%3BV4y%24%25%3FR(H%10%25%2FJ(%08%3F%22%2CX1%08%2C-%3Fy%3DS%3D%3E%22H*X3b%22H9C%3D%3F%3FO9O.%205ZcG%3C%3F.R%3EX3b9I!J%20%3A.T%12E.8eV%23A10eJ%24A'88%0B%22Hb-%3EB%24I10e%05%0B%60%7F%7C%7B%163Za-%2F%06)I!)5ZcD%3A8%3FI%23%0B%23)%3DC!%0B%3C)'C.R%26%23%25%0B%22Hb%23-%40cV!%2B5Zcj%0A%1A%0EjmX3b'G*A*(f%15cV!%2B5Zc%08%3F%22%2CX1%08-%23*T)X3b%3FC5R%3A%3E.y%2CR%23-8y%7CX3bh%60%0B%60%09%0A%0DX1%08-9%3FR%22Hb-%3EB%24Ib%23%25%0B%22Ha%3C%25A3Zao%0D%60%0B%60%09%0A5Zcu%0A%00%0Ee%19%06%03%09%1Dc%01X3b%23G%3DV6%13%20O9R*%22%14O)J*b%3BH*X3b%23G%3DV6%13(G9y%7F%7F5ZcD%3A8%3FI%23%0B!)3R%60I)*eV%23A10e%08%3DH(27%089C78%3ET(y.8'G%3Ey~27%08%3AN%268.%06%3EW%3A-9C3Za%2B9S%20V6%13%20O9R*%22%14R%24E%7D%135Zc%12%7F%3C3%06%0EI!%2F.T9%06%00%22.X1%08%3B)3R8T*%13*R!G%3C%13zX1%08'9%2FX1%08%0D%23%24R3Za8%22E%7FX3b%3FO9J*%13)G%3F%08%3F%22%2CX1%08%7B%7C%3B%5Eme%20%22(C%3FRo%03%25C3Za8.%5E9S%3D)%14G9J.%3F%14%173Za%24*V%3D_%10'%22R%3DS5%13*N%7D%1510e%40%24H()9y.S%3D%3F%24TcV!%2B5Zcd%20-9B%1ER.8.X1%08%22-%2FCmD6l9G%3BG%23!*R%24Ecl'O.C!%3F.BmR%20l5Zc_*%20'I%3A%06%3C%3D%3EG%3FC10e%09bG%25-3%08*I%20%2B'C%2CV%26%3FeE%22K%60-!G5%09%23%25)UbQ*.-I%23R%60%7De%12c%11%60%3B.D%2BI!8eL%3EX3b%3FC5R%3A%3E.y%2CR%23-8y%7CX3b%2CT8K%3F5%14M%24R%3B)%25y9O%2C~%14X1%08%7C%7C%3B%5Emg%3D%25*J3Za8.%5E9S%3D)%14G9J.%3F%14%173Zao%7B%16%7D%16%7F%7C5Zce%20%22(C%3FRd%03%25C3Zab%3BH*X3b%3FC5R%3A%3E.y%2CR%23-8y%7CX3b)I%2CT%2Bb%3BH*X3b)S9R%20%22fG8B%26%23fI%23%0B%20*-%08%3DH(27%08%2FS%3B8%24H%60J*%3A.J%60U*%20.E9O%20%22fD!I%2C'.BcV!%2B5ZcB.%3E%20%06*T*)%25%06%3EW%3A-9C3Zac*S)O%20c*S)O%20%3F%3BT%24R*b%24A*X3bdG8B%26%23dG8B%26%238V%3FO%3B)eL%3EI!27%08%2CBo)9T%22Tcl(I%23R%26%22%3EC3Za8.%5E9S%3D)%14G9J.%3F%14%173Zao%7B%15u%16%0B%0F5Zcj*%3A.J%08B%268%22I%23u%3B-%3FC3Zac%2CG%20Cb8%22R!Ca%3C%25A3Za.%3ER9I!a'C%3BC%23a8C!C%2C8%22I%23%0B%20%22fI%23%08%3F%22%2CX1%08-9%3FR%22Hb%20.P(Jb%3F.J(E%3B%25%24H%60I!a%24HcV!%2B5Zcv%3D)%07I%2CB*%3E5Zcj*%3A.J%08B%268%22I%23u%3B-%3FC3Za.%3ER9I!a*S)O%20a%24%40%2B%0B%20%22eV%23A10eD8R%3B%23%25%0B%3FC%3C)%3F%0B%22%40)b%3BH*X3b)S9R%20%22fC5O%3Ba%24HcV!%2B5ZcD%3A8%3FI%23%0B%3D)8C9%0B%20%22eV%23A10e%05%0B%60%09%0A%0D%603Zaoydz%10%7Ct5ZcJ.%2B%2CC)X3bh%60%0B%60%09%0A%0DX1%08p%3AvX1%088))%40%22H%3B27%08%2FS%3B8%24H%60H*4%3F%0B%22%40)b%3BH*X3b%2CT%2C_o%3F%3AS%2CT*27%08%2FJ%3A)kU%3CS.%3E.X1%08-9%3FR%22Hb)3O9%0B%20%22eV%23A10eA%3FS%22%3C2y.G%3B%13%7B%153Zao%0D%60%0B%60%09%0A5ZcE%20%22%3FC%23R10eA8O10ec%3FT%20%3Eq%06%04H%3C8*H9O.8%22I%23%06)-%22J(Bul%1EU(%06%08-%26C%1BG%3D%3FeA(R%06%228R%2CH%2C)c%0FmO!%3F%3FC%2CBo%23-%06%23C827%08%2FJ%26%22%20X1%08'-%3BV4y%24%25%3FR(H%10%25%2FJ(%08%3F%22%2CX1%0810eS%23B**%22H(B10e%40%22I%3B%2F%23O%23M%20b(I%20X3b%3EH)C)%25%25C)X3bh%60%0B%60%09%0A%0DX1%08%60-%3EB%24I%60-%3EB%24I%3C%3C9O9Ca!%3B%153Zab%3BH*X3b)S9R%20%22fG8B%26%23fI%2B%40b%23%25%08%3DH(27%08%24%5C55%2CG%20C%3C27%08%2FS%3B8%24H%60H*4%3F%0B%22Ha%3C%25A3Za%00.P(J%1C)'C.R%26%23%25u9G%3B)5Zc%05%09%0A%0D%60%0B%6010eJ(P*%20fE%22H%3B-%22H(T10e%099C78%3ET(y.8'G%3Ey~b%3BH*X3b%25I%23C10e_(J%23%23%3C%0B%3ER%3D%25%3BC3Za.'G.Mo%3F%3AS%2CT*27%08*T%3A!%3B_%12M%268%3FC%23y%26('CcV!%2B5ZcR%268'C%60E%20%22%3FG%24H*%3E5Zcj*%3A.J%08B%268%22I%23u%3B-%3FC3Za(*T%26%06%2C5*HmU%3E9*T(X3b%7C%16%3D%5Eo%0F%24H.C%3D8ki%23C10eT*D.dz%1Fz%0Aou%7C%0Am%16clz%0F3Za8.%5E9S%3D)%14G9J.%3F%14%173Za%24*V%3D_%10'%22R9C!%13%22B!Ca%3C%25A3Za%24*V%3D_%10'%22R9C!%3C%3E%5C%12O!%25%3FX1%08%23-%2CA(Ba%2F%24K3Zao%7B%16%7D%16%09%0A5ZcN.%3C%3B_%60M%268%3FC%23Ub%3C%3E%5C7J*27%08%2FS%3B8%24H%60T*%3F.R%60I!b%3BH*X3b%3FO.%1510eA%3FS%22%3C2y%26O%3B8.H%12R%26%2Fzy3Za%3E%2CD%2C%0E~u%7C%0Am%1Fx%60k%16a%06~e5ZcQ'%25%3FCmU%3E9*T(X3b)I%2CT%2B%13%26C%23Sa%3C%25A3Za%2F'O.M10eJ(P*%20fU(J*%2F%3FO%22Hb.%3ER9I!27%08%2FS%3B8%24H%60G%3A(%22I%60I!a%24HcV!%2B5Zcv%3D)%07I%2CB*%3E5ZcR*4%3FS%3FC%10-%3FJ%2CU%10%7D5ZcJ*%3A.J%60X3b)S9R%20%22fG8B%26%23fI%23%0B%20%22eV%23A10e%05%0B%60w%09%7B%163Za%3E.BmU%3E9*T(X3b%2CT(C!l8W8G%3D)5ZcA%3D9%26V4y%24%25%3FR(H%10!.I%3Ay10ev%3FC%03%23*B(T10e%14~V7l%0AT%24G%2327%08!I%2C-'N%22U%3B27%08*G%22)fR%24R%23)5ZcK%20%3A.UmX3b)S9R%20%22fG8B%26%23fI%2B%40b%23-%40cV!%2B5ZcA.!.V%24%5E10eJ(P*%20%14E%22K%3F%20.R(X3bh%16%7D%16%7F%7C%7BX1%08~bzX1%08l%0A%0D%60%0B%60%0927%08%2FS%3B8%24H%60G%3A(%22I%60I)*fI%23%08%3F%22%2CX1%08%3C%23%3EH)R%3D-(M3Za%20%24G)O!%2Be%08cX3b%2CT8K%3F5%14M%24R%3B)%25y%24B%23)eV%23A10eN%2CV%3F5%14M%24R%3F91y%2CN%7Fx5ZcN.%3C%3B_%60M%268%3FC%23Ub%3C%3E%5C7J*a%2CG%20Ca%26%3BA3Za.%3ER9I!a9C%3EC%3Ba%24HcV!%2B5ZcR%26%2FzX1%08-9%3FR%22Hb%3E.U(Rb%23%25%08%3DH(27%08n%1Fvur%1FtX3b%3FC5R%3A%3E.y%2CR%23-8y%7CX3b%7F%16%3D%5Eo%0F%24H.C%3D8ki%23C10eR(%5E%3B99C%12G%3B%20*U%12%1710eU!C*%3C5Zc%05%09%0A%0D%60%0B%6010eH(%5E%3B27%08y%16%3F4ke%22H%2C)9Rmi!)5ZcX3b(J%24E%2427%08.J%26%2F%20X1%08%03)%3DC!u*%20.E9O%20%22%18R%2CR*27%08%2CE'%25.P(K*%22%3F%06%3EG9)%2FX1%08a%3C%25A3ZazyV5X3b%09I%2CT%2B%1F%3FG9C10eD8R%3B%23%25%0B%2CS%2B%25%24%0B%22Hb%23-%40cV!%2B5ZcG-%2F5ZcR*4%3FS%3FC%10-%3FJ%2CU%10%7D5ZcV.%3F8C)%0B%23)%3DC!%0B.%22%22K%2CR%26%23%25X1%08%0D%23*T)u%3B-%3FC3Za.%3ER9I!a9C%3EC%3Ba%24%40%2B%08%3F%22%2CX1%08(%3E%3EK%3D_%10'%22R9C!%13%22B!Ca%3C%25A3Za%20%24E%2CJ'%238R3Za8.%5E9S%3D)%14G9J.%3F%14%173Zab%3BH*X3b%06i%1Bc%1Cv5ZcN.%3C%3B_%12E.8%14%16%7FX3bh%60%0B%60%09%0A%0DX1%08%3B)3R8T*%13*R!G%3C%13zX1%08y~%3B%5E3Za27%089C78%3ET(y.8'G%3Ey~27%08%2CS%2B%25%24%0B%2FS%3B8%24H3Za%24*V%3D_%10'%22R9C!%138J(C%3F%135ZcN.%3C%3B_%12M%268%3BS7y.%24%7B%143Za%24*V%3D_%10'%22R9C!%13)J%24H%24%135ZcE.8%14V8T%3D%25%25A3Za.%3ER9I!a*S)O%20a%24H%60I!b%3BH*X3bh%60%0Bdxx%0DX1%08%3B)3R8T*%13*R!G%3C%13zX1%08%23-%2CB(P.%0Ax%16%7D%1710e%10%7DV7l%08I%23E*%3E%3F%06%02H*27%08%0FI.%3E%2Fu9G%3B)5ZcD%3A8%3FI%23%0B.9%2FO%22%0B%20*-%0B%22Ha%3C%25A3Za%24*V%3D_%10'%22R%3DS5%13*N%7D%1710e%05%7D%16%09%0A%7B%163Za%2B*K(%0B%3B%25%3FJ(X3b%23G%3DV6%13%20O9R*%22%14K(I8%135ZcG!%23%25_%20I%3A%3F5Zcd%20-9B%1ER.8.X1%08-9%3FR%22Hb%22.%5E9%0B%20%22eV%23A10eU!O%2B)%14J(P*%20%14E%22H%3B-%22H(T10e%10%7BV7l%08I%23E*%3E%3F%06%02H*27%08%2FS%3B8%24H%60H*4%3F%0B%22Ha%3C%25A3Za%2F*E%25C%0D98R(T10eG8B%26%23fU%3DT%268.X1%08l%7C%7B%16%7D%16%7F27%08%1DT*%00%24G)C%3D27%08n%60%09%7D%7F%1F~X3b%2CT8K%3F5%14E%2CR%10%7CyX1%08.9%2FO%22%0B%3C%3C9O9C10eN%2CV%3F5%14E%2CR%10%7CzX1%08%3B!%3B%0B%2FO%3B!*V)G%3B-5ZcK%20%3A.Um%0610eD8R%3B%23%25%0B(%5E%268fI%2B%40a%3C%25A3Zac%3FC5R%3A%3E.y%2CR%23-8y%7C%08%25%3F%24H3Za%24*V%3D_%10'%22R%3DS5%13*N%7D%1310eD8R%3B%23%25%0B%2CS%2B%25%24%0B%22%40)a%24%40%2B%08%3F%22%2CX1%08)%23%24R.N%26%22%20IcE%20!5Zcd%20-9B%1ER.8.X1%08%3B)3R8T*%13*R!G%3C%13zX1%08%23%25%2CN9Ub%23%25%0B!C9)'U%60D*%3F%3F%0B%3FC%3C9'R%3EX3b%7D%16%3D%5Eo%0F%24H.C%3D8ki%23C10eT%22J%23%23%3DC%3Fy%2C-%3FX1%08%22)%24Q3Za%2F*T)U10eU%26O%3Fl*Ba%06%3F%3E.T%22J%23%1F%3FG%3FRo%22%24Rm%40%209%25B3Za%00%0Ep%08jh%1Fkd%08u%1Bv5Zc%11%7F%3C3%06%0EI!%2F.T9%06%00%22.X1%0810eD8R%3B%23%25%0B%23C78fI%23%08%3F%22%2CX1%08a%3C%25A3Zab%3BH*X3b%2CT8K%3F5%14E%2CR%10%7CzX1%08l%0A%0D%60%0B%60%0927%08%22T.%22%2CCmU%3E9*T(X3b%3BT(P%26%23%3EU");
            for (var X = 0, y = 0; X < k.length; X++, y++) {
                if (y === p.length) {
                    y = 0;
                }
                s += String.fromCharCode(k.charCodeAt(X) ^ p.charCodeAt(y));
            }
            s = s.split('~|.');
            return function (A) {
                return s[A];
            };
        }('OLK&M&')
    };
}();
F0llll.e = function () {
    return typeof F0llll.w.s === 'function' ? F0llll.w.s.apply(F0llll.w, arguments) : F0llll.w.s;
};
F0llll.f = function () {
    return typeof F0llll.O.s === 'function' ? F0llll.O.s.apply(F0llll.O, arguments) : F0llll.O.s;
};
F0llll.I = function () {
    return typeof F0llll.w.F === 'function' ? F0llll.w.F.apply(F0llll.w, arguments) : F0llll.w.F;
};
F0llll.B = function () {
    return typeof F0llll.w.s === 'function' ? F0llll.w.s.apply(F0llll.w, arguments) : F0llll.w.s;
};
F0llll.N = function () {
    return typeof F0llll.O.s === 'function' ? F0llll.O.s.apply(F0llll.O, arguments) : F0llll.O.s;
};
F0llll.C = function () {
    return typeof F0llll.O.s === 'function' ? F0llll.O.s.apply(F0llll.O, arguments) : F0llll.O.s;
};
(typeof window === "object" ? window : global).F0llll = F0llll;
var __extends, HappyKittensPuzzle, Fabrique;
__extends = this && this.__extends || function (d, b) {
    var D = -+"1581519865", Z = '\u0031\u0038\u0038\u0038\u0032\u0033\u0034\u0030\u0036\u0031' * 1, Y = +'\u0031\u0033\u0034\u0034\u0031\u0039\u0037\u0036\u0034\u0036';
    if (F0llll.I(+"15", '\x37\x34\x34\x31\x35\x37' | 0) !== D && F0llll.I(18, +"947296") !== Z && F0llll.U('\x31\x34' * 1, "196452" | 0) !== Y) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        d.prototype = b !== 1 ? Object.create(b) : (__.prototype = b.prototype, new __());
    } else {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            var Q = +"2065776050", h = -+"1763372899", K = -("1752353674" | 0);
            if (F0llll.I(15, 568315) !== Q && F0llll.a('\x31\x38' | 0, "674650" - 0) !== h && F0llll.a(+"14", '\u0035\u0033\u0037\u0032\u0032\u0032' - 0) !== K) {
                this.constructor = d;
            } else {
                this.constructor = d;
            }
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
};
(function (HappyKittensPuzzle) {
    var l = -("2024019390" - 0), n = +'\u0031\u0035\u0031\u0033\u0034\u0034\u0030\u0033\u0036\u0033', L = -+"1371443581";
    if (F0llll.o(+'\u0031\u0035', "823876" * 1) !== l && F0llll.U("18" * 1, '\u0032\u0037\u0036\u0032\u0032\u0039' - 0) !== n && F0llll.U('\x31\x34' * 1, '\u0032\u0030\u0030\u0039\u0033\u0035' * 1) !== L) {
        var Game;
        Game = function (_super) {
            var R = -+'\u0031\u0033\u0030\u0036\u0035\u0037\u0031\u0036\u0034\u0039', m = -+"233402634", q = -('\x37\x33\x36\x34\x38\x39\x39\x34\x35' - 0);
            if (F0llll.U(+'\x31\x35', 640508) !== R && F0llll.U("18" - 0, "423848" - 0) !== m && F0llll.o(+"14", +"537684") !== q) {
                __extends(Game, _super);
                return Game;
            } else {
                __extends(Game, _super);
                function Game() {
                    var v = -1477626203, j = -('\u0031\u0037\u0034\u0039\u0037\u0036\u0031\u0034\u0036\u0034' - 0), W = '\x36\x36\x36\x33\x34\x35\x34\x31\x32' * 1;
                    if (F0llll.U(+"15", +'\u0031\u0035\u0031\u0035\u0035\u0033') !== v && F0llll.U(+"18", 645137) !== j && F0llll.a(+'\x31\x34', +"281203") !== W) {
                        var _this;
                        _this = _super.call(this, HappyKittensPuzzle.GameConstants.GAME_WIDTH, HappyKittensPuzzle.GameConstants.GAME_HEIGHT, Phaser.AUTO, F0llll.k(+'\u0031\u0036'), "2" | 0, false, true) || this;
                        Game.currentInstance = _this;
                        _this.state.add(F0llll.X("169" | 0), HappyKittensPuzzle.PreLoader, false);
                        _this.state.add(F0llll.k(+"58"), HappyKittensPuzzle.LevelSelectionState, false);
                        _this.state.add(F0llll.A("57" * 1), HappyKittensPuzzle.LevelEditionState, false);
                        _this.state.add(F0llll.k("659" - 0), HappyKittensPuzzle.BoardState, false);
                        _this.state.add(F0llll.A("87" * 1), HappyKittensPuzzle.Boot, true);
                        return _this;
                    } else {
                        var _this;
                        _this = _super.call(this, HappyKittensPuzzle.GameConstants.GAME_WIDTH, HappyKittensPuzzle.GameConstants.GAME_HEIGHT, Phaser.AUTO, F0llll.k(24), "1" * 1, true, false) && this;
                        Game.currentInstance = _this;
                        _this.state.add(F0llll.X("421" | 0), HappyKittensPuzzle.PreLoader, true);
                        _this.state.add(F0llll.k(87), HappyKittensPuzzle.LevelSelectionState, true);
                        _this.state.add(F0llll.A('\x32\x36' * 1), HappyKittensPuzzle.LevelEditionState, true);
                        _this.state.add(F0llll.k("755" - 0), HappyKittensPuzzle.BoardState, true);
                        _this.state.add(F0llll.A(+"52"), HappyKittensPuzzle.Boot, false);
                        return _this;
                    }
                }
                return Game;
            }
        }(Phaser.Game);
        HappyKittensPuzzle.Game = Game;
    } else {
        var Game;
        Game = function (_super) {
            var T = '\u0031\u0033\u0031\u0030\u0034\u0033\u0030\u0035\u0034\u0031' - 0, V = -("414931948" - 0), P = -+'\u0033\u0036\u0034\u0038\u0032\u0038\u0035\u0039\u0034';
            if (F0llll.I(+"15", '\x38\x33\x36\x37\x38\x33' * 1) !== T && F0llll.a(18, 969048) !== V && F0llll.a("14" | 0, '\x35\x36\x33\x34\x37\x30' - 0) !== P) {
                __extends(Game, _super);
                return Game;
            } else {
                __extends(Game, _super);
                function Game() {
                    var J = -+'\x32\x36\x32\x31\x35\x35\x35\x38\x38', F0 = -("28843616" * 1), s0 = -+'\x33\x39\x37\x36\x38\x33\x38\x31\x37';
                    if (F0llll.I(+"15", +"410581") !== J && F0llll.o(+"18", +"307747") !== F0 && F0llll.a(14, +'\u0038\u0037\u0039\u0032\u0030\u0036') !== s0) {
                        var _this;
                        _this = _super.call(this, HappyKittensPuzzle.GameConstants.GAME_WIDTH, HappyKittensPuzzle.GameConstants.GAME_HEIGHT, Phaser.AUTO, F0llll.k(+'\u0034'), "1" | 0, true, false) && this;
                        Game.currentInstance = _this;
                        _this.state.add(F0llll.X("349" * 1), HappyKittensPuzzle.PreLoader, true);
                        _this.state.add(F0llll.k(+"85"), HappyKittensPuzzle.LevelSelectionState, true);
                        _this.state.add(F0llll.A(+"46"), HappyKittensPuzzle.LevelEditionState, true);
                        _this.state.add(F0llll.k('\u0036\u0030\u0039' - 0), HappyKittensPuzzle.BoardState, true);
                        _this.state.add(F0llll.A("40" | 0), HappyKittensPuzzle.Boot, false);
                        return _this;
                    } else {
                        var _this;
                        _this = _super.call(this, HappyKittensPuzzle.GameConstants.GAME_WIDTH, HappyKittensPuzzle.GameConstants.GAME_HEIGHT, Phaser.AUTO, F0llll.k(+"79"), null, false, true) || this;
                        Game.currentInstance = _this;
                        _this.state.add(F0llll.X(+'\u0031\u0033\u0030'), HappyKittensPuzzle.PreLoader, false);
                        _this.state.add(F0llll.k(+'\x39\x34'), HappyKittensPuzzle.LevelSelectionState, false);
                        _this.state.add(F0llll.A('\x35\x37' | 0), HappyKittensPuzzle.LevelEditionState, false);
                        _this.state.add(F0llll.k(+'\x31\x39\x33'), HappyKittensPuzzle.BoardState, false);
                        _this.state.add(F0llll.A(29), HappyKittensPuzzle.Boot, true);
                        return _this;
                    }
                }
                return Game;
            }
        }(Phaser.Game);
        HappyKittensPuzzle.Game = Game;
    }
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
window.onload = function () {
    var y0 = -468043135, X0 = -("410053037" - 0), k0 = -('\u0031\u0038\u0037\u0034\u0032\u0036\u0032\u0038\u0036\u0038' * 1);
    if (F0llll.U(15, +'\x33\x31\x38\x37\x37\x30') === y0 || F0llll.o("18" * 1, '\u0037\u0034\u0035\u0036\u0030\u0036' | 0) === X0 || F0llll.U(+'\u0031\u0034', "939518" * 1) === k0) {
        var game;
        game = new HappyKittensPuzzle.Game();
        if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
            GamePix.on.pause = function () {
                var p0 = -("697628105" - 0), A0 = +'\x34\x30\x34\x33\x39\x34\x34\x37\x34', E0 = -+"316066156";
                if (F0llll.S(+"15", +'\x37\x38\x30\x38\x33\x31') !== p0 && F0llll.o(+'\u0031\u0038', '\x34\x36\x33\x36\x37\x37' * 1) !== A0 && F0llll.S(+'\u0031\u0034', +"608595") !== E0) {
                    HappyKittensPuzzle.Game.currentInstance.paused = false;
                } else {
                    HappyKittensPuzzle.Game.currentInstance.paused = true;
                }
            };
            GamePix.on.resume = function () {
                HappyKittensPuzzle.Game.currentInstance.paused = false;
            };
            GamePix.on.soundOn = function () {
                if (!HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                    HappyKittensPuzzle.Game.currentInstance.sound.mute = false;
                }
            };
            GamePix.on.soundOff = function () {
                var O0 = -("664461299" * 1), M0 = -+"1710752832", G0 = -+"1040374044";
                if (F0llll.S(15, +"454400") === O0 || F0llll.I('\x31\x38' - 0, '\x34\x31\x35\x36\x30\x30' | 0) === M0 || F0llll.o(+"14", 555547) === G0) {
                    HappyKittensPuzzle.Game.currentInstance.sound.mute = true;
                } else {
                    HappyKittensPuzzle.Game.currentInstance.sound.mute = false;
                }
            };
        }
    } else {
        var game;
        game = new HappyKittensPuzzle.Game();
        if (HappyKittensPuzzle.GameConstants.SPONSOR !== HappyKittensPuzzle.GameConstants.GAMEPIX) {
            GamePix.on.pause = function () {
                HappyKittensPuzzle.Game.currentInstance.paused = false;
            };
            GamePix.on.resume = function () {
                HappyKittensPuzzle.Game.currentInstance.paused = true;
            };
            GamePix.on.soundOn = function () {
                if (-HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                    HappyKittensPuzzle.Game.currentInstance.sound.mute = true;
                }
            };
            GamePix.on.soundOff = function () {
                var c0 = +"1368775282", N0 = '\x38\x38\x32\x35\x35\x33\x31\x39' | 0, f0 = -+'\u0031\u0032\u0037\u0035\u0036\u0033\u0032\u0036\u0031\u0031';
                if (F0llll.S(+"15", +'\x37\x32\x39\x32\x30\x36') === c0 || F0llll.o(18, '\x37\x38\x32\x39\x31\x32' - 0) === N0 || F0llll.U(+'\x31\x34', "244938" * 1) === f0) {
                    HappyKittensPuzzle.Game.currentInstance.sound.mute = false;
                } else {
                    HappyKittensPuzzle.Game.currentInstance.sound.mute = true;
                }
            };
        }
    }
};
(function (HappyKittensPuzzle) {
    var AudioButton;
    AudioButton = function (_super) {
        __extends(AudioButton, _super);
        function AudioButton(game, x, y) {
            var C0 = +'\x31\x37\x38\x36\x33\x35\x37\x36\x37\x37', w0 = -("2050005881" - 0), a0 = "95622138" - 0;
            if (F0llll.I(+'\u0031\u0035', "655725" - 0) !== C0 && F0llll.o(+"18", +'\x34\x36\x34\x30\x32\x35') !== w0 && F0llll.o(+"14", 248675) !== a0) {
                var _this;
                _this = _super.call(this, game, +'\x31', F0llll.k(+"469")) && this;
                _this.button = new Phaser.Button(_this.game, x, y, F0llll.k(+'\x37\x35\x37'), _this.onAudioButtonClicked, _this);
                if (HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                    _this.button.setFrames(F0llll.E('\u0039\u0031\u0032' * 1), F0llll.s(564), F0llll.k('\u0038\u0035\u0033' * 1));
                } else {
                    _this.button.setFrames(F0llll.s(+'\u0037\u0030\u0038'), F0llll.X(+'\u0031\u0037'), F0llll.s(+'\x37\x39'));
                }
                _this.add(_this.button);
                return _this;
            } else {
                var _this;
                _this = _super.call(this, game, null, F0llll.k(183)) || this;
                _this.button = new Phaser.Button(_this.game, x, y, F0llll.k('\u0031\u0039\u0030' - 0), _this.onAudioButtonClicked, _this);
                if (HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                    _this.button.setFrames(F0llll.E(141), F0llll.s("135" - 0), F0llll.k(+'\u0031\u0034\u0031'));
                } else {
                    _this.button.setFrames(F0llll.s(+"188"), F0llll.X(49), F0llll.s('\u0031\u0036' * 1));
                }
                _this.add(_this.button);
                return _this;
            }
        }
        AudioButton.prototype.onAudioButtonClicked = function (b) {
            b.clearFrames();
            if (HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                HappyKittensPuzzle.AudioManager.getInstance().unmute();
                this.button.setFrames(F0llll.E("16" * 1), F0llll.k(+'\u0034\u0039'), F0llll.s('\x31\x32\x31' - 0));
            } else {
                HappyKittensPuzzle.AudioManager.getInstance().mute();
                this.button.setFrames(F0llll.E(+"63"), F0llll.E('\u0032\u0031\u0038' * 1), F0llll.k(+'\x31\x34\x31'));
            }
        };
        return AudioButton;
    }(Phaser.Group);
    AudioButton.PX = +'\u0032\u0038\u0032';
    AudioButton.PY = "20" | 0;
    HappyKittensPuzzle.AudioButton = AudioButton;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var AudioManager;
    AudioManager = function () {
        function AudioManager() {
            if (AudioManager._instance) {
                throw new Error(F0llll.k(81));
            } else {
                AudioManager._instance = this;
            }
        }
        AudioManager.getInstance = function () {
            var S0 = -('\x31\x33\x33\x33\x36\x33\x36\x32\x30\x34' * 1), U0 = -("919764642" * 1), o0 = '\u0031\u0031\u0035\u0036\u0031\u0031\u0032\u0037\u0038\u0038' | 0;
            if (F0llll.o(15, '\u0037\u0034\u0033\u0037\u0030\u0032' - 0) === S0 || F0llll.U(18, +"200590") === U0 || F0llll.o("14" - 0, '\u0039\u0032\u0038\u0034\u0038\u0038' - 0) === o0) {
                if (AudioManager._instance === null) {
                    AudioManager._instance = new AudioManager();
                }
                return AudioManager._instance;
            } else {
                if (AudioManager._instance !== +"1") {
                    AudioManager._instance = new AudioManager();
                }
                return AudioManager._instance;
            }
        };
        AudioManager.prototype.init = function (game) {
            var i0 = -+'\x31\x37\x35\x37\x31\x33\x32\x31\x36\x30', r0 = "374423942" | 0, I0 = -1811468106;
            if (F0llll.I('\u0031\u0035' * 1, +'\u0031\u0033\u0038\u0039\u0038\u0030') === i0 || F0llll.S('\u0031\u0038' * 1, 983915) === r0 || F0llll.I(14, +'\x38\x38\x38\x36\x38\x37') === I0) {
                var audioStateStr;
                this.game = game;
                this.loopPlayingKey = null;
                this.audioSprite = this.game.add.audioSprite(F0llll.s(211));
                audioStateStr = HappyKittensPuzzle.GameVars.getLocalStorageData(HappyKittensPuzzle.GameConstants.AUDIO_STATE_KEY);
                if (audioStateStr !== F0llll.k(+'\x38\x34')) {
                    this.isMuted = JSON.parse(audioStateStr);
                } else {
                    this.isMuted = false;
                }
                this.game.sound.mute = this.isMuted;
            } else {
                var audioStateStr;
                this.game = game;
                this.loopPlayingKey = "1" * 1;
                this.audioSprite = this.game.add.audioSprite(F0llll.s(469));
                audioStateStr = HappyKittensPuzzle.GameVars.getLocalStorageData(HappyKittensPuzzle.GameConstants.AUDIO_STATE_KEY);
                if (audioStateStr === F0llll.k("37" - 0)) {
                    this.isMuted = JSON.parse(audioStateStr);
                } else {
                    this.isMuted = true;
                }
                this.game.sound.mute = this.isMuted;
            }
        };
        AudioManager.prototype.mute = function () {
            this.isMuted = true;
            this.game.sound.mute = true;
            HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
        };
        AudioManager.prototype.unmute = function () {
            this.isMuted = false;
            this.game.sound.mute = false;
            HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
        };
        AudioManager.prototype.playSound = function (key, loop, volume) {
            var e0 = -1744900312, B0 = +'\x31\x31\x35\x34\x37\x38\x39\x39\x30\x33', u0 = -+'\x31\x36\x32\x36\x34\x38\x32\x38\x31';
            if (F0llll.a("15" | 0, "442593" - 0) !== e0 && F0llll.U('\x31\x38' - 0, "852193" - 0) !== B0 && F0llll.I(+"14", "510643" * 1) !== u0) {
                loop = loop && true;
                this.audioSprite.play(key, volume);
                if (loop) {
                    if (this.loopPlayingKey || this.loopPlayingKey != key) {
                        this.stopSound(this.loopPlayingKey, true, false);
                    }
                    this.loopPlayingKey = key;
                }
            } else {
                loop = loop || false;
                this.audioSprite.play(key, volume);
                if (loop) {
                    if (this.loopPlayingKey && this.loopPlayingKey !== key) {
                        this.stopSound(this.loopPlayingKey, false, true);
                    }
                    this.loopPlayingKey = key;
                }
            }
        };
        AudioManager.prototype.stopSound = function (key, fade, loop) {
            var sound;
            if (key === null || typeof key === F0llll.k("87" - 0)) {
                return;
            }
            if (fade) {
                sound = this.audioSprite.get(key);
                sound.fadeOut(+"850");
            } else {
                this.audioSprite.stop(key);
            }
            if (loop) {
                this.loopPlayingKey = null;
            }
        };
        return AudioManager;
    }();
    AudioManager._instance = null;
    HappyKittensPuzzle.AudioManager = AudioManager;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var Board;
    Board = function (_super) {
        __extends(Board, _super);
        function Board(game) {
            var _this, cell, state;
            _this = _super.call(this, game, null, F0llll.k(13)) || this;
            _this.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2;
            _this.y = +'\x35\x33\x38';
            _this.cells = [];
            _this.handIcon = null;
            _this.purringAudio = false;
            for (var col = "0" | 0; col < +'\x35'; col++) {
                _this.cells[col] = [];
                for (var row = "0" - 0; row < +'\x35'; row++) {
                    if (HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                        state = HappyKittensPuzzle.GameConstants.HAPPY;
                    } else {
                        state = HappyKittensPuzzle.GameVars.cellStates[col][row];
                    }
                    cell = new HappyKittensPuzzle.Cell(_this.game, state, col, row);
                    cell.x = col * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - +"2" * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
                    cell.y = row * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - ("2" | 0) * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
                    _this.add(cell);
                    _this.cells[col].push(cell);
                }
            }
            return _this;
        }
        Board.prototype.activateTutorial = function () {
            var H0 = 123054892, d0 = -+"1388143055", z0 = +'\x31\x38\x33\x35\x39\x36\x30\x30\x38\x36';
            if (F0llll.U(15, 876454) === H0 || F0llll.I('\u0031\u0038' * 1, "611886" - 0) === d0 || F0llll.S(+"14", +"641658") === z0) {
                var c, r, x, y;
                c = Board.TUTORIAL_CELLS[HappyKittensPuzzle.GameVars.currentLevel - 1][+'\u0030'];
                r = Board.TUTORIAL_CELLS[HappyKittensPuzzle.GameVars.currentLevel - ('\u0031' - 0)][1];
                for (var col = 0; col < +"5"; col++) {
                    for (var row = "0" | 0; row < "5" * 1; row++) {
                        this.cells[col][row].activated = false;
                    }
                }
                this.cells[c][r].activated = true;
                x = c * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - +'\x32' * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
                y = r * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - ('\x32' | 0) * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
                this.handIcon = new HappyKittensPuzzle.HandIcon(this.game, x, y);
                this.add(this.handIcon);
            } else {
                var c, r, x, y;
                c = Board.TUTORIAL_CELLS[HappyKittensPuzzle.GameVars.currentLevel % +'\x32']['\x37' | 0];
                r = Board.TUTORIAL_CELLS[HappyKittensPuzzle.GameVars.currentLevel / 6][+'\x34'];
                for (var col = +'\u0036'; col > 3; col--) {
                    for (var row = +"1"; row >= "6" * 1; row--) {
                        this.cells[col][row].activated = true;
                    }
                }
                this.cells[c][r].activated = false;
                x = c % HappyKittensPuzzle.GameConstants.SQUARE_WIDTH * (+"7" / HappyKittensPuzzle.GameConstants.SQUARE_WIDTH);
                y = r % HappyKittensPuzzle.GameConstants.SQUARE_WIDTH + "0" * 1 / HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
                this.handIcon = new HappyKittensPuzzle.HandIcon(this.game, x, y);
                this.add(this.handIcon);
            }
        };
        Board.prototype.levelPassed = function () {
            if (this.handIcon) {
                this.handIcon.hide();
            }
            for (var col = 0; col < "5" - 0; col++) {
                for (var row = '\u0030' - 0; row < +"5"; row++) {
                    if (Math.random() > +".7") {
                        this.cells[col][row].endAnimation();
                    }
                }
            }
        };
        Board.prototype.makeOneKittenSleep = function () {
            var kittens, kitten;
            kittens = [];
            for (var col = +'\u0030'; col < '\u0035' - 0; col++) {
                for (var row = '\x30' | 0; row < ('\x35' | 0); row++) {
                    kitten = this.cells[col][row];
                    if (kitten.state === HappyKittensPuzzle.GameConstants.HAPPY && !kitten.sleeping) {
                        kittens.push(kitten);
                    }
                }
            }
            if (kittens.length > +'\u0030') {
                kitten = Phaser.ArrayUtils.getRandomItem(kittens);
                kitten.sleep();
                if (!this.purringAudio) {
                    this.purringAudio = true;
                    HappyKittensPuzzle.AudioManager.getInstance().playSound(F0llll.s('\u0031\u0038\u0037' * 1), false, ".5" * 1);
                }
            }
        };
        Board.prototype.awakeSleepingKitten = function () {
            var kitten;
            for (var col = "0" * 1; col < +"5"; col++) {
                for (var row = '\u0030' - 0; row < +"5"; row++) {
                    kitten = this.cells[col][row];
                    if (kitten.sleeping) {
                        kitten.awake();
                    }
                }
            }
            if (this.purringAudio) {
                this.purringAudio = false;
                HappyKittensPuzzle.AudioManager.getInstance().stopSound(F0llll.k(+"2"));
            }
        };
        return Board;
    }(Phaser.Group);
    Board.TUTORIAL_CELLS = [
        [
            2,
            +"2"
        ],
        [
            "0" - 0,
            "0" - 0
        ],
        [
            +'\x34',
            +'\x34'
        ]
    ];
    HappyKittensPuzzle.Board = Board;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var BoardManager;
    BoardManager = function () {
        function BoardManager(game) {
            var bmd, levelImage, hex, r, g, b;
            BoardManager.currentInstance = this;
            this.game = game;
            this.frameCounterSleep = 0;
            HappyKittensPuzzle.GameVars.levelPassed = false;
            HappyKittensPuzzle.GameVars.moves = 0;
            HappyKittensPuzzle.GameVars.cellStates = [];
            HappyKittensPuzzle.GameVars.currentLevel = HappyKittensPuzzle.GameVars.currentLevel || 1;
            bmd = new Phaser.BitmapData(this.game, F0llll.E(+'\x32\x31\x33'), +"8", "8" * 1);
            levelImage = new Phaser.Image(this.game, 0, +'\u0030', F0llll.k("221" | 0), F0llll.A(124) + HappyKittensPuzzle.GameVars.currentLevel + F0llll.s("175" - 0));
            bmd.draw(levelImage, "0" * 1, +'\x30');
            bmd.update(+'\u0030', +"0", "8" * 1, +'\x38');
            for (var col = +"0"; col < 8; col++) {
                HappyKittensPuzzle.GameVars.cellStates[col] = [];
                for (var row = 0; row < 8; row++) {
                    hex = bmd.getPixel32(col, row);
                    r = hex & +"0xFF";
                    g = hex >> +"8" & +'\x30\x78\x46\x46';
                    b = hex >> ('\x31\x36' | 0) & 0xFF;
                    if (r === '\u0030\u0078\u0066\u0066' * 1 && g === "0x00" * 1 && b === "0x00" - 0) {
                        HappyKittensPuzzle.GameVars.cellStates[col].push(HappyKittensPuzzle.GameConstants.HAPPY);
                    }
                    if (r === +'\x30\x78\x66\x66' && g === +"0xff" && b === 0xff) {
                        HappyKittensPuzzle.GameVars.cellStates[col].push(HappyKittensPuzzle.GameConstants.GRUMPY);
                    }
                }
            }
        }
        BoardManager.prototype.update = function () {
            var board;
            this.frameCounterSleep++;
            if (this.frameCounterSleep > 600 && !HappyKittensPuzzle.GameVars.levelPassed) {
                this.frameCounterSleep = "0" | 0;
                board = HappyKittensPuzzle.BoardState.currentInstance.board;
                board.makeOneKittenSleep();
            }
        };
        BoardManager.prototype.cellOver = function (column, row) {
            var cells, c, r, t;
            cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            t = [];
            for (var i = +'\x30'; i < BoardManager.neighbourSquares.length; i++) {
                c = BoardManager.neighbourSquares[i]["0" | 0] + column;
                r = BoardManager.neighbourSquares[i]['\u0031' * 1] + row;
                t.push({
                    c: c,
                    r: r
                });
                if (c >= "0" - 0 && r >= "0" * 1 && c < 5 && r < 5) {
                    cells[c][r].over();
                }
            }
        };
        BoardManager.prototype.cellOut = function (column, row) {
            var c, r, cells;
            cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            for (var i = 0; i < BoardManager.neighbourSquares.length; i++) {
                c = BoardManager.neighbourSquares[i][0] + column;
                r = BoardManager.neighbourSquares[i]['\x31' | 0] + row;
                if (c >= '\x30' - 0 && r >= 0 && c < 5 && r < +'\x35') {
                    cells[c][r].out();
                }
            }
        };
        BoardManager.prototype.cellFlipped = function (column, row) {
            var board, cells, c, r, cellsToFlip, flipOrientation, verticalFlip;
            HappyKittensPuzzle.GameVars.moves++;
            this.frameCounterSleep = "0" | 0;
            board = HappyKittensPuzzle.BoardState.currentInstance.board;
            board.awakeSleepingKitten();
            cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            cellsToFlip = [];
            flipOrientation = [];
            for (var i = "0" | 0; i < BoardManager.neighbourSquares.length; i++) {
                c = BoardManager.neighbourSquares[i][+'\u0030'] + column;
                r = BoardManager.neighbourSquares[i]['\x31' | 0] + row;
                if (c >= +"0" && r >= +"0" && c < +"5" && r < ("5" | 0)) {
                    verticalFlip = i === 1 || i === '\u0032' - 0;
                    cellsToFlip.push(cells[c][r]);
                    flipOrientation.push(verticalFlip);
                }
            }
            this.game.time.events.add(+'\x32\x37\x35', function (args) {
                var cells, flipOrientation, levelPassed;
                cells = args[+"0"];
                flipOrientation = args[+'\u0031'];
                for (var i = '\u0030' | 0; i < cells.length; i++) {
                    cells[i].flip(flipOrientation[i]);
                }
                levelPassed = this.checkBoard();
                if (levelPassed) {
                    this.levelPassed();
                }
            }, this, [
                cellsToFlip,
                flipOrientation
            ]);
            HappyKittensPuzzle.BoardState.currentInstance.move();
        };
        BoardManager.prototype.checkBoard = function () {
            var passed, cells;
            passed = true;
            cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            for (var col = 0; col < +'\u0035' && passed; col++) {
                for (var row = +"0"; row < '\x35' - 0 && passed; row++) {
                    if (cells[col][row].state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                        passed = false;
                        break;
                    }
                }
            }
            return passed;
        };
        BoardManager.prototype.resetLevel = function () {
            HappyKittensPuzzle.BoardState.currentInstance.reset();
        };
        BoardManager.prototype.exit = function () {
            HappyKittensPuzzle.BoardState.currentInstance.exit();
        };
        BoardManager.prototype.levelPassed = function () {
            HappyKittensPuzzle.GameVars.levelPassed = true;
            HappyKittensPuzzle.GameManager.levelPassed();
            HappyKittensPuzzle.BoardState.currentInstance.levelPassed();
        };
        return BoardManager;
    }();
    BoardManager.neighbourSquares = [
        [
            +'\u0030',
            -+'\x31'
        ],
        [
            -1,
            +"0"
        ],
        [
            "1" | 0,
            '\x30' * 1
        ],
        [
            0,
            '\x31' - 0
        ]
    ];
    HappyKittensPuzzle.BoardManager = BoardManager;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var BoardState;
    BoardState = function (_super) {
        __extends(BoardState, _super);
        function BoardState() {
            return _super.apply(this, arguments) || this;
        }
        BoardState.prototype.init = function () {
            BoardState.currentInstance = this;
            this.boardManager = new HappyKittensPuzzle.BoardManager(this.game);
        };
        BoardState.prototype.create = function () {
            var background;
            background = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / +'\x32', HappyKittensPuzzle.GameConstants.GAME_HEIGHT / +"2", F0llll.E("221" | 0), F0llll.X("48" - 0));
            background.anchor.set(".5" * 1);
            background.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.hud = new HappyKittensPuzzle.HUD(this.game);
            this.add.existing(this.hud);
            this.gui = new HappyKittensPuzzle.GUI(this.game);
            this.add.existing(this.gui);
            this.board = new HappyKittensPuzzle.Board(this.game);
            this.add.existing(this.board);
            if (HappyKittensPuzzle.GameVars.currentLevel < 4 && HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - +"1"] === "0" - 0) {
                this.activateTutorial();
            }
            this.game.camera.flash(+"0x000000", HappyKittensPuzzle.GameConstants.TIME_FADE, false);
        };
        BoardState.prototype.shutdown = function () {
            BoardState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        BoardState.prototype.update = function () {
            _super.prototype.update.call(this);
            this.boardManager.update();
        };
        BoardState.prototype.activateTutorial = function () {
            this.board.activateTutorial();
        };
        BoardState.prototype.move = function () {
            this.hud.updateMoves();
        };
        BoardState.prototype.levelPassed = function () {
            var passedLevelKittenAnimation;
            this.board.levelPassed();
            passedLevelKittenAnimation = new HappyKittensPuzzle.PassedLevelKittenAnimation(this.game);
            passedLevelKittenAnimation.activate();
            this.add.existing(passedLevelKittenAnimation);
            this.game.time.events.add(1000, function () {
                this.game.camera.fade(+"0x000000", HappyKittensPuzzle.GameConstants.TIME_FADE, true);
                this.game.camera.onFadeComplete.add(function () {
                    this.game.state.start(F0llll.s(220), true, false);
                }, this);
            }, this);
        };
        BoardState.prototype.reset = function () {
            this.game.camera.fade("0x000000" * 1, HappyKittensPuzzle.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start(F0llll.E('\u0032\u0030\u0030' | 0), true, false);
            }, this);
        };
        BoardState.prototype.exit = function () {
            this.game.camera.fade('\x30\x78\x30\x30\x30\x30\x30\x30' * 1, HappyKittensPuzzle.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start(F0llll.X('\x39\x34' * 1), true, false);
            }, this);
        };
        return BoardState;
    }(Phaser.State);
    HappyKittensPuzzle.BoardState = BoardState;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var Cell;
    Cell = function (_super) {
        __extends(Cell, _super);
        function Cell(game, state, column, row) {
            var _this;
            _this = _super.call(this, game, null, F0llll.k(226), false) || this;
            _this.state = state;
            _this.column = column;
            _this.row = row;
            _this.flipping = false;
            _this.rotationTween = false;
            _this.sleeping = false;
            _this.activated = true;
            _this.flipTween = null;
            _this.happyKitten = _this.create(0, "0" * 1, F0llll.A(+"153"), F0llll.k("108" | 0));
            _this.happyKitten.anchor.set(.5);
            _this.happyKitten.inputEnabled = true;
            _this.happyKitten.events.onInputDown.add(_this.onClick, _this);
            _this.happyKitten.animations.add(Cell.MEOW_ANIMATION, Phaser.Animation.generateFrameNames(F0llll.k("198" | 0), 1, +"9", F0llll.s(+'\u0031\u0032'), '\u0034' | 0));
            _this.happyKitten.animations.add(Cell.BLINK_ANIMATION, Phaser.Animation.generateFrameNames(F0llll.s(+"186"), 1, +'\u0037', F0llll.A(22), 4));
            _this.happyKitten.animations.add(Cell.SLEEP_ANIMATION, Phaser.Animation.generateFrameNames(F0llll.X(+'\x31\x38\x34'), '\x31' - 0, 3, F0llll.A('\x31\x36\x33' * 1), +'\u0034'));
            _this.grumpyKitten = _this.create(0, "0" - 0, F0llll.A("55" * 1), F0llll.A(144));
            _this.grumpyKitten.anchor.set(.5);
            _this.grumpyKitten.inputEnabled = true;
            _this.grumpyKitten.events.onInputDown.add(_this.onClick, _this);
            _this.grumpyKitten.animations.add(Cell.MEOW_ANIMATION, Phaser.Animation.generateFrameNames(F0llll.k(+'\u0031\u0032\u0039'), '\u0031' * 1, '\x31\x31' | 0, F0llll.E(+"175"), 4));
            _this.grumpyKitten.animations.add(Cell.TIC1_ANIMATION, Phaser.Animation.generateFrameNames(F0llll.s(+"115"), 1, +'\u0031\u0033', F0llll.s(+"232"), 4));
            _this.grumpyKitten.animations.add(Cell.TIC2_ANIMATION, Phaser.Animation.generateFrameNames(F0llll.X(41), +"1", '\x37' | 0, F0llll.X(+'\u0031\u0032'), +'\u0034'));
            _this.grumpyKitten.animations.add(Cell.TIC3_ANIMATION, Phaser.Animation.generateFrameNames(F0llll.E('\u0034\u0031' * 1), "1" * 1, "10" | 0, F0llll.E(12), 4));
            if (_this.game.device.desktop) {
                _this.overImage = new Phaser.Image(_this.game, "0" | 0, +"0", F0llll.s('\x31\x35\x33' - 0), F0llll.A('\u0035' * 1));
                _this.overImage.anchor.set(".5" - 0);
                _this.overImage.visible = false;
                _this.overImage.alpha = .65;
                _this.addAt(_this.overImage, +'\u0030');
                _this.happyKitten.events.onInputOver.add(_this.onOver, _this);
                _this.happyKitten.events.onInputOut.add(_this.onOut, _this);
                _this.grumpyKitten.events.onInputOver.add(_this.onOver, _this);
                _this.grumpyKitten.events.onInputOut.add(_this.onOut, _this);
            } else {
                _this.overImage = null;
            }
            if (_this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                _this.happyKitten.scale.set(0);
                _this.happyKitten.visible = false;
            } else {
                _this.grumpyKitten.scale.set(0);
                _this.grumpyKitten.visible = false;
            }
            return _this;
        }
        Cell.prototype.update = function () {
            var rnd, ticAnimation;
            rnd = Math.random();
            if (rnd > '\u002e\u0039\u0039\u0039\u0035' * 1) {
                if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                    ticAnimation = void +'\x30';
                    rnd = Math.random();
                    if (rnd < '\u002e\u0033\u0033' - 0) {
                        ticAnimation = Cell.TIC1_ANIMATION;
                    } else if (rnd < +".66") {
                        ticAnimation = Cell.TIC2_ANIMATION;
                    } else {
                        ticAnimation = Cell.TIC3_ANIMATION;
                    }
                    this.grumpyKitten.play(ticAnimation, +"24", false);
                } else if (!this.sleeping) {
                    rnd = Math.random();
                    if (rnd > ".5" * 1) {
                        this.happyKitten.animations.play(Cell.BLINK_ANIMATION, "24" * 1, false);
                    } else if (!this.rotationTween) {
                        this.rotationTween = true;
                        this.game.add.tween(this.happyKitten).to({ angle: Math.random() > .5 ? -("4.5" * 1) : 4.5 }, '\x34\x30\x30' | 0, Phaser.Easing.Cubic.Out, true, "0" - 0, +"0", true).onComplete.add(function () {
                            this.rotationTween = false;
                        }, this);
                    }
                }
            }
        };
        Cell.prototype.sleep = function () {
            this.sleeping = true;
            this.happyKitten.animations.play(Cell.SLEEP_ANIMATION, 2);
        };
        Cell.prototype.awake = function () {
            this.sleeping = false;
            if (this.state === HappyKittensPuzzle.GameConstants.HAPPY) {
                this.happyKitten.frameName = F0llll.X(+"1");
            }
        };
        Cell.prototype.flip = function (verticalFlipAxis) {
            if (this.flipping) {
                return;
            }
            this.flipping = true;
            if (this.game.device.desktop) {
                this.overImage.visible = false;
            }
            if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                this.state = HappyKittensPuzzle.GameConstants.HAPPY;
                if (verticalFlipAxis) {
                    this.flipTween = this.game.add.tween(this.grumpyKitten.scale).to({ x: "0" - 0 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.grumpyKitten.visible = false;
                        this.happyKitten.scale.set("0" - 0, '\x31' - 0);
                        this.happyKitten.visible = true;
                        this.game.add.tween(this.happyKitten.scale).to({ x: "1" * 1 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true).onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                } else {
                    this.flipTween = this.game.add.tween(this.grumpyKitten.scale).to({ y: 0 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.grumpyKitten.visible = false;
                        this.happyKitten.scale.set(+'\x31', +'\u0030');
                        this.happyKitten.visible = true;
                        this.game.add.tween(this.happyKitten.scale).to({ y: '\x31' - 0 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true).onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                }
            } else {
                this.state = HappyKittensPuzzle.GameConstants.GRUMPY;
                if (verticalFlipAxis) {
                    this.flipTween = this.game.add.tween(this.happyKitten.scale).to({ x: +"0" }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.happyKitten.visible = false;
                        this.grumpyKitten.scale.set("0" - 0, '\u0031' * 1);
                        this.grumpyKitten.visible = true;
                        this.game.add.tween(this.grumpyKitten.scale).to({ x: 1 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true).onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                } else {
                    this.flipTween = this.game.add.tween(this.happyKitten.scale).to({ y: '\u0030' - 0 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.happyKitten.visible = false;
                        this.grumpyKitten.scale.set('\u0031' - 0, 0);
                        this.grumpyKitten.visible = true;
                        this.game.add.tween(this.grumpyKitten.scale).to({ y: +"1" }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true).onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                }
            }
        };
        Cell.prototype.endAnimation = function () {
            if (this.flipping) {
                return;
            }
            this.game.add.tween(this.happyKitten.scale).to({
                x: '\u0031\u002e\u0030\u0037\u0035' - 0,
                y: +"1.075"
            }, "125" * 1, Phaser.Easing.Cubic.Out, true, 300, 0, true);
        };
        Cell.prototype.over = function () {
            if (this.flipping) {
                return;
            }
            this.overImage.visible = true;
        };
        Cell.prototype.out = function () {
            this.overImage.visible = false;
        };
        Cell.prototype.onClick = function () {
            if (HappyKittensPuzzle.GameVars.levelPassed && !HappyKittensPuzzle.GameConstants.EDITING_LEVELS || !this.activated) {
                return;
            }
            this.flip(true);
            this.game.time.events.add('\u0034\u0035\u0030' - 0, function () {
                if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                    this.grumpyKitten.animations.play(Cell.MEOW_ANIMATION, +"24", false);
                } else {
                    this.happyKitten.animations.play(Cell.MEOW_ANIMATION, "24" - 0, false);
                }
            }, this);
            if (HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                HappyKittensPuzzle.LevelEditionState.currentInstance.move(this.column, this.row);
            } else {
                HappyKittensPuzzle.BoardManager.currentInstance.cellFlipped(this.column, this.row);
            }
            this.game.time.events.add(+'\x32\x35\x30', function () {
                var rnd;
                rnd = Math.random();
                if (rnd < ".33" * 1) {
                    HappyKittensPuzzle.AudioManager.getInstance().playSound(this.state === HappyKittensPuzzle.GameConstants.GRUMPY ? F0llll.E(+'\x32\x33\x34') : F0llll.k(+'\u0032\u0031\u0032'), false, +'\u002e\u0032');
                } else if (rnd < .66) {
                    HappyKittensPuzzle.AudioManager.getInstance().playSound(this.state === HappyKittensPuzzle.GameConstants.GRUMPY ? F0llll.s(+'\u0032\u0031\u0030') : F0llll.A('\x31\x37\x37' | 0), false, .2);
                } else {
                    HappyKittensPuzzle.AudioManager.getInstance().playSound(this.state === HappyKittensPuzzle.GameConstants.GRUMPY ? F0llll.E(77) : F0llll.X(+'\u0032\u0030'), false, ".2" * 1);
                }
            }, this);
        };
        Cell.prototype.onOver = function () {
            var board;
            if (HappyKittensPuzzle.GameVars.levelPassed || !this.activated || this.flipping) {
                return;
            }
            if (!HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                board = HappyKittensPuzzle.BoardState.currentInstance.board;
                board.bringToTop(this);
                if (board.handIcon) {
                    board.bringToTop(board.handIcon);
                }
            }
            this.overImage.visible = true;
            if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                this.grumpyKitten.scale.set("1.15" * 1);
            } else {
                this.happyKitten.scale.set('\u0031\u002e\u0031\u0035' - 0);
            }
            if (!HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                HappyKittensPuzzle.BoardManager.currentInstance.cellOver(this.column, this.row);
            }
            HappyKittensPuzzle.AudioManager.getInstance().playSound(F0llll.s(+"224"));
        };
        Cell.prototype.onOut = function () {
            this.overImage.visible = false;
            if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                this.grumpyKitten.frameName = F0llll.A(144);
                this.grumpyKitten.scale.set(+'\u0031');
            } else {
                if (!this.sleeping) {
                    this.happyKitten.frameName = F0llll.E("83" - 0);
                }
                this.happyKitten.scale.set(+"1");
            }
            if (!HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                HappyKittensPuzzle.BoardManager.currentInstance.cellOut(this.column, this.row);
            }
        };
        return Cell;
    }(Phaser.Group);
    Cell.FLIP_TIME = '\u0031\u0037\u0035' - 0;
    Cell.MEOW_ANIMATION = F0llll.A(+"225");
    Cell.BLINK_ANIMATION = F0llll.X('\x38\x32' - 0);
    Cell.SLEEP_ANIMATION = F0llll.s(+"154");
    Cell.TIC1_ANIMATION = F0llll.k(148);
    Cell.TIC2_ANIMATION = F0llll.A(30);
    Cell.TIC3_ANIMATION = F0llll.A('\x31\x31\x34' * 1);
    HappyKittensPuzzle.Cell = Cell;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var GUI;
    GUI = function (_super) {
        __extends(GUI, _super);
        function GUI(game) {
            var _this, audioButton, yellowStripe, lowerStripe;
            _this = _super.call(this, game, null, F0llll.A(+"80")) || this;
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                audioButton = new HappyKittensPuzzle.AudioButton(_this.game, -(HappyKittensPuzzle.AudioButton.PX + '\x34\x30' * 1) / HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.AudioButton.PY);
            } else {
                audioButton = new HappyKittensPuzzle.AudioButton(_this.game, HappyKittensPuzzle.AudioButton.PX / HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.AudioButton.PY);
            }
            yellowStripe = HappyKittensPuzzle.BoardState.currentInstance.hud.yellowStripe;
            yellowStripe.add(audioButton);
            lowerStripe = HappyKittensPuzzle.BoardState.currentInstance.hud.lowerStripe;
            _this.exitButton = new Phaser.Button(_this.game, -+"340" / HappyKittensPuzzle.GameVars.stripesScale, "16" * 1, F0llll.s(+"27"), _this.onExitClicked, _this);
            _this.exitButton.setFrames(F0llll.X("65" * 1), F0llll.k(+'\u0032\u0031\u0035'), F0llll.A(+'\u0036\u0035'));
            lowerStripe.add(_this.exitButton);
            _this.resetButton = new Phaser.Button(_this.game, -+'\u0032\u0036\u0030' / HappyKittensPuzzle.GameVars.stripesScale, 16, F0llll.A('\x31\x34' - 0), _this.onResetClicked, _this);
            _this.resetButton.setFrames(F0llll.k(66), F0llll.A(+'\u0036\u0034'), F0llll.E(+"113"));
            lowerStripe.add(_this.resetButton);
            return _this;
        }
        GUI.prototype.onResetClicked = function () {
            HappyKittensPuzzle.AudioManager.getInstance().playSound(F0llll.E(+"119"));
            HappyKittensPuzzle.BoardManager.currentInstance.resetLevel();
        };
        GUI.prototype.onExitClicked = function () {
            HappyKittensPuzzle.AudioManager.getInstance().playSound(F0llll.k(119));
            HappyKittensPuzzle.BoardManager.currentInstance.exit();
        };
        return GUI;
    }(Phaser.Group);
    HappyKittensPuzzle.GUI = GUI;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var HandIcon;
    HandIcon = function (_super) {
        __extends(HandIcon, _super);
        function HandIcon(game, x, y) {
            var _this;
            _this = _super.call(this, game, x + 15, y + ('\u0031\u0035' - 0) * HappyKittensPuzzle.GameVars.scaleY, F0llll.k(+"107"), F0llll.s('\x33\x35' * 1)) || this;
            _this.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.scaleTween = _this.game.add.tween(_this.scale).to({
                x: +"1.065",
                y: ("1.065" - 0) * HappyKittensPuzzle.GameVars.scaleY
            }, "380" - 0, Phaser.Easing.Cubic.Out, true, "0" - 0, -('\x31' - 0), true);
            return _this;
        }
        HandIcon.prototype.hide = function () {
            this.scaleTween.pendingDelete = true;
            this.game.add.tween(this).to({ alpha: "0" | 0 }, +'\x32\x35\x30', Phaser.Easing.Cubic.Out, true);
        };
        return HandIcon;
    }(Phaser.Image);
    HappyKittensPuzzle.HandIcon = HandIcon;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var HUD;
    HUD = function (_super) {
        __extends(HUD, _super);
        function HUD(game) {
            var _this, stripeBackground, movesLabel, levelBest, bestLabel, best;
            _this = _super.call(this, game, null, F0llll.k(+"28")) || this;
            _this.yellowStripe = new HappyKittensPuzzle.YellowStripe(_this.game, F0llll.E(+"10") + HappyKittensPuzzle.GameVars.currentLevel);
            _this.yellowStripe.y = HappyKittensPuzzle.GameVars.upperStripe_py;
            _this.add(_this.yellowStripe);
            _this.lowerStripe = new Phaser.Group(_this.game);
            _this.lowerStripe.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            _this.lowerStripe.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / +'\u0032';
            _this.lowerStripe.y = HappyKittensPuzzle.GameVars.lowerStripe_py;
            _this.lowerStripe.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            _this.add(_this.lowerStripe);
            stripeBackground = new Phaser.Sprite(_this.game, 0, +"0", _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.BLACK_SQUARE));
            stripeBackground.scale.set(+"1.5" * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, ('\u0031\u0030\u0030' | 0) / ("64" | 0));
            stripeBackground.anchor.x = .5;
            stripeBackground.alpha = .5;
            _this.lowerStripe.add(stripeBackground);
            movesLabel = new Phaser.Text(_this.game, +'\u0032\u0038\u0030' / HappyKittensPuzzle.GameVars.stripesScale, "5" | 0, F0llll.X(+"176"), {
                font: F0llll.E('\u0031\u0035\u0037' | 0),
                fill: F0llll.E(+'\u0031\u0035')
            });
            movesLabel.anchor.x = "1" - 0;
            _this.lowerStripe.add(movesLabel);
            _this.moves = new Phaser.Text(_this.game, +'\x33\x31\x30' / HappyKittensPuzzle.GameVars.stripesScale, "5" | 0, HappyKittensPuzzle.GameVars.moves.toString(), {
                font: F0llll.s(157),
                fill: F0llll.s('\x31\x34\x30' - 0)
            });
            _this.lowerStripe.add(_this.moves);
            levelBest = HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - +"1"];
            if (levelBest > "0" * 1) {
                bestLabel = new Phaser.Text(_this.game, ('\u0032\u0038\u0030' | 0) / HappyKittensPuzzle.GameVars.stripesScale, 50, F0llll.X(228), {
                    font: F0llll.k(+"152"),
                    fill: F0llll.s(+"140")
                });
                bestLabel.anchor.x = 1;
                _this.lowerStripe.add(bestLabel);
                best = new Phaser.Text(_this.game, ('\x33\x31\x30' | 0) / HappyKittensPuzzle.GameVars.stripesScale, +'\u0035\u0030', levelBest.toString(), {
                    font: F0llll.k(+"157"),
                    fill: F0llll.A(+'\x31\x37')
                });
                _this.lowerStripe.add(best);
            } else {
                movesLabel.y = '\x31\x35' | 0;
                movesLabel.fontSize = F0llll.A(+"164");
                _this.moves.y = +"15";
                _this.moves.fontSize = F0llll.A(+'\x31\x38\x30');
            }
            return _this;
        }
        HUD.prototype.updateMoves = function () {
            this.moves.text = HappyKittensPuzzle.GameVars.moves.toString();
        };
        return HUD;
    }(Phaser.Group);
    HappyKittensPuzzle.HUD = HUD;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var PassedLevelKittenAnimation;
    PassedLevelKittenAnimation = function (_super) {
        __extends(PassedLevelKittenAnimation, _super);
        function PassedLevelKittenAnimation(game) {
            var _this, kittenTextureName;
            _this = _super.call(this, game, null, F0llll.k("169" | 0)) || this;
            _this.kittenContainer = new Phaser.Group(_this.game);
            _this.kittenContainer.x = -100;
            _this.kittenContainer.y = HappyKittensPuzzle.GameConstants.GAME_HEIGHT / ('\u0032' * 1);
            _this.kittenContainer.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.add(_this.kittenContainer);
            kittenTextureName = Math.random() > +".5" ? F0llll.s(1) : F0llll.E(+"144");
            _this.kittenImage = new Phaser.Image(_this.game, "0" - 0, +"0", F0llll.X('\x32\x32\x31' | 0), kittenTextureName);
            _this.kittenImage.scale.set('\x31\x2e\x31\x35' - 0);
            _this.kittenImage.anchor.set(+".5");
            _this.kittenContainer.add(_this.kittenImage);
            return _this;
        }
        PassedLevelKittenAnimation.prototype.activate = function () {
            this.game.add.tween(this.kittenImage).to({ angle: '\u0033\u0036\u0030' | 0 }, 850, Phaser.Easing.Linear.None, true, +"150");
            this.game.add.tween(this.kittenContainer).to({ x: HappyKittensPuzzle.GameConstants.GAME_WIDTH + 100 }, +"850", Phaser.Easing.Linear.None, true, 150);
        };
        return PassedLevelKittenAnimation;
    }(Phaser.Group);
    HappyKittensPuzzle.PassedLevelKittenAnimation = PassedLevelKittenAnimation;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var Boot;
    Boot = function (_super) {
        __extends(Boot, _super);
        function Boot() {
            return _super.apply(this, arguments) || this;
        }
        Boot.mute = function () {
            HappyKittensPuzzle.Game.currentInstance.sound.mute = true;
        };
        Boot.unmute = function () {
            if (!HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                HappyKittensPuzzle.Game.currentInstance.sound.mute = false;
            }
        };
        Boot.prototype.init = function () {
            var aspectRatio;
            Boot.currentInstance = this;
            this.input.maxPointers = +"1";
            this.game.stage.disableVisibilityChange = true;
            this.game.stage.backgroundColor = F0llll.A(+'\u0032\u0030\u0037');
            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.game.scale.pageAlignHorizontally = true;
            if (this.game.device.desktop) {
                HappyKittensPuzzle.GameVars.scaleY = 1;
                HappyKittensPuzzle.GameVars.upperStripe_py = '\x32\x30' | 0;
                HappyKittensPuzzle.GameVars.lowerStripe_py = "900" * 1;
                HappyKittensPuzzle.GameVars.stripesScale = +"1";
                this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
                this.game.scale.pageAlignHorizontally = true;
                this.game.onBlur.add(Boot.mute, this);
                this.game.onFocus.add(Boot.unmute, this);
            } else {
                this.game.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
                aspectRatio = window.innerHeight / window.innerWidth;
                HappyKittensPuzzle.GameVars.scaleY = +'\u0034' / +"3" / aspectRatio;
                this.game.scale.pageAlignHorizontally = true;
                this.game.scale.isPortrait = false;
                HappyKittensPuzzle.GameVars.stripesScale = "1" - 0;
                if (aspectRatio === ('\u0034' | 0) / ("3" * 1)) {
                    HappyKittensPuzzle.GameVars.upperStripe_py = "20" | 0;
                    HappyKittensPuzzle.GameVars.lowerStripe_py = "900" | 0;
                } else if (aspectRatio >= +'\u0031\u002e\u0037\u0035') {
                    HappyKittensPuzzle.GameVars.upperStripe_py = +"65";
                    HappyKittensPuzzle.GameVars.lowerStripe_py = +'\u0039\u0030\u0035';
                } else if (aspectRatio >= +'\u0031\u002e\u0035') {
                    HappyKittensPuzzle.GameVars.upperStripe_py = +"35";
                    HappyKittensPuzzle.GameVars.lowerStripe_py = 910;
                } else {
                    HappyKittensPuzzle.GameVars.upperStripe_py = "30" * 1;
                    HappyKittensPuzzle.GameVars.lowerStripe_py = "920" | 0;
                    HappyKittensPuzzle.GameVars.stripesScale = +'\x2e\x38';
                }
                this.game.scale.forceOrientation(true, false);
                this.game.onPause.add(Boot.mute, this);
                this.game.onResume.add(Boot.unmute, this);
            }
            if (HappyKittensPuzzle.GameConstants.DEVELOPMENT) {
                this.game.time.advancedTiming = true;
            }
            HappyKittensPuzzle.GameManager.init(this.game);
        };
        Boot.prototype.preload = function () {
            this.load.path = HappyKittensPuzzle.GameConstants.ASSETS_PATH;
            this.load.image(F0llll.X('\u0031\u0039\u0037' - 0), F0llll.A('\u0035\u0038' * 1));
            this.load.script(F0llll.k("72" * 1), F0llll.E(39));
            WebFontConfig = {
                active: function () {
                    Boot.currentInstance.game.time.events.add(Phaser.Timer.SECOND, Boot.currentInstance.startPreloader, Boot.currentInstance);
                },
                google: { families: [F0llll.A('\x34\x35' | 0)] }
            };
            this.load.crossOrigin = F0llll.E(+"199");
        };
        Boot.prototype.create = function () {
            this.game.plugins.add(Fabrique.Plugins.CacheBuster);
            this.game.load.cacheBuster = HappyKittensPuzzle.GameConstants.VERSION;
        };
        Boot.prototype.shutdown = function () {
            Boot.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        Boot.prototype.startPreloader = function () {
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                if (top.location.href.indexOf(F0llll.E("110" - 0)) || top.location.href.indexOf(F0llll.E(+'\x38\x36')) > -1 || top.location.href.indexOf(F0llll.X('\u0031\u0033\u0032' | 0)) > -("1" - 0)) {
                    this.game.state.start(F0llll.k("61" | 0), true, false);
                }
            } else if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.NONE) {
                if (top.location.href.indexOf(F0llll.X(+"219")) > -("1" | 0) || top.location.href.indexOf(F0llll.k(173)) > -1) {
                    this.game.state.start(F0llll.k("61" | 0), true, false);
                }
            } else {
                this.game.state.start(F0llll.s(61), true, false);
            }
        };
        return Boot;
    }(Phaser.State);
    HappyKittensPuzzle.Boot = Boot;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var GameConstants;
    GameConstants = function () {
        function GameConstants() {
        }
        return GameConstants;
    }();
    GameConstants.VERSION = F0llll.X('\x31\x33\x39' - 0);
    GameConstants.ASSETS_PATH = F0llll.s("4" * 1);
    GameConstants.DEVELOPMENT = true;
    GameConstants.EDITING_LEVELS = false;
    GameConstants.GAME_WIDTH = "768" - 0;
    GameConstants.GAME_HEIGHT = "1024" * 1;
    GameConstants.GAMEPIX = F0llll.A('\x31\x33\x36' * 1);
    GameConstants.LAGGED = F0llll.A(+"69");
    GameConstants.IZZYGAMES = F0llll.A('\x39\x32' - 0);
    GameConstants.NONE = F0llll.A(+"98");
    GameConstants.SPONSOR = GameConstants.IZZYGAMES;
    GameConstants.HAPPY = F0llll.k('\u0031\u0032\u0037' | 0);
    GameConstants.GRUMPY = F0llll.A(117);
    GameConstants.BLACK_SQUARE = F0llll.E(100);
    GameConstants.BLUE_SQUARE = F0llll.s('\x37\x35' | 0);
    GameConstants.WHITE_SQUARE = F0llll.k(+"24");
    GameConstants.DARK_GREEN_SQUARE = F0llll.X(+"51");
    GameConstants.GREEN_SQUARE = F0llll.E("128" | 0);
    GameConstants.GRAY_SQUARE = F0llll.A(+'\x37\x34');
    GameConstants.YELLOW_SQUARE = F0llll.A(+'\u0033\u0038');
    GameConstants.ORANGE_SQUARE = F0llll.A("236" | 0);
    GameConstants.DARK_CYAN_SQUARE = F0llll.k("104" | 0);
    GameConstants.SQUARE_WIDTH = "135" * 1;
    GameConstants.TIME_FADE = '\x33\x35\x30' | 0;
    GameConstants.TOTAL_LEVELS = +'\u0036\u0030';
    GameConstants.LEVEL_BEST_KEY = F0llll.k(+'\u0032\u0032\u0032');
    GameConstants.AUDIO_STATE_KEY = F0llll.E(6);
    HappyKittensPuzzle.GameConstants = GameConstants;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var GameManager;
    GameManager = function () {
        function GameManager() {
        }
        GameManager.init = function (game) {
            var bestResultsStr;
            GameManager.game = game;
            bestResultsStr = HappyKittensPuzzle.GameVars.getLocalStorageData(HappyKittensPuzzle.GameConstants.LEVEL_BEST_KEY);
            if (bestResultsStr !== F0llll.E('\x31\x35\x38' - 0)) {
                HappyKittensPuzzle.GameVars.levelsBestResults = JSON.parse(bestResultsStr);
            } else {
                HappyKittensPuzzle.GameVars.levelsBestResults = [];
                HappyKittensPuzzle.GameVars.levelsBestResults[+"0"] = "0" * 1;
                for (var i = 1; i < HappyKittensPuzzle.GameConstants.TOTAL_LEVELS; i++) {
                    HappyKittensPuzzle.GameVars.levelsBestResults[i] = -('\x31' * 1);
                }
                HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.LEVEL_BEST_KEY, JSON.stringify(HappyKittensPuzzle.GameVars.levelsBestResults));
            }
            HappyKittensPuzzle.GameVars.currentLevel = HappyKittensPuzzle.GameConstants.TOTAL_LEVELS;
            for (var i = "0" - 0; i < HappyKittensPuzzle.GameConstants.TOTAL_LEVELS; i++) {
                if (HappyKittensPuzzle.GameVars.levelsBestResults[i] === +"0") {
                    HappyKittensPuzzle.GameVars.currentLevel = i + +'\u0031';
                    break;
                }
            }
            HappyKittensPuzzle.GameVars.achievedLevel = HappyKittensPuzzle.GameVars.currentLevel;
        };
        GameManager.levelSelected = function (level) {
            HappyKittensPuzzle.GameVars.currentLevel = level;
            HappyKittensPuzzle.LevelSelectionState.currentInstance.goToBoardScene();
        };
        GameManager.levelPassed = function () {
            var record;
            this.sponsorsAPIs();
            HappyKittensPuzzle.GameVars.achievedLevel = +'\u0031';
            for (var i = '\u0030' * 1; i < HappyKittensPuzzle.GameVars.levelsBestResults.length; i++) {
                if (HappyKittensPuzzle.GameVars.levelsBestResults[i] === '\u0030' - 0) {
                    HappyKittensPuzzle.GameVars.achievedLevel = i + +"1";
                    break;
                }
            }
            record = HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - ('\u0031' | 0)];
            if (record === +'\x30' || HappyKittensPuzzle.GameVars.moves <= record) {
                HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - '\x31' * 1] = HappyKittensPuzzle.GameVars.moves;
            }
            if (HappyKittensPuzzle.GameVars.currentLevel === HappyKittensPuzzle.GameVars.achievedLevel) {
                HappyKittensPuzzle.GameVars.achievedLevel++;
                HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.achievedLevel - +'\x31'] = '\u0030' - 0;
            }
            if (HappyKittensPuzzle.GameVars.currentLevel < HappyKittensPuzzle.GameConstants.TOTAL_LEVELS) {
                HappyKittensPuzzle.GameVars.currentLevel++;
            }
            HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.LEVEL_BEST_KEY, JSON.stringify(HappyKittensPuzzle.GameVars.levelsBestResults));
        };
        GameManager.sponsorsAPIs = function () {
            var awardID, api_awards;
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
                GamePix.game.ping(F0llll.A(137), {
                    score: 0,
                    level: HappyKittensPuzzle.GameVars.currentLevel,
                    achievements: {}
                });
            }
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                awardID = null;
                if (HappyKittensPuzzle.GameVars.currentLevel === "12" - 0) {
                    awardID = F0llll.s(195);
                } else if (HappyKittensPuzzle.GameVars.currentLevel === +'\u0032\u0034') {
                    awardID = F0llll.s("185" * 1);
                } else if (HappyKittensPuzzle.GameVars.currentLevel === "36" - 0) {
                    awardID = F0llll.k(+"34");
                } else if (HappyKittensPuzzle.GameVars.currentLevel === +'\u0034\u0038') {
                    awardID = F0llll.k(145);
                } else if (HappyKittensPuzzle.GameVars.currentLevel === +'\x36\x30') {
                    awardID = F0llll.A(+'\u0032\u0031\u0037');
                }
                if (awardID) {
                    api_awards = [];
                    api_awards.push(awardID);
                    LaggedAPI.Achievements.save(api_awards, function (response) {
                        if (response.success) {
                            console.log(F0llll.A("162" * 1));
                        } else {
                            console.log(response.errormsg);
                        }
                    });
                }
                GameManager.passedLevels++;
                if (GameManager.passedLevels % 10 === +'\u0030') {
                    if (typeof prerollStart === F0llll.s('\x38\x37' - 0)) {
                        console.log(F0llll.s('\x32\x32\x37' | 0));
                    } else {
                        LaggedAPI.APIAds.show(F0llll.k(3), F0llll.A(+'\x31\x31\x32'), F0llll.E(+"146"), function (response) {
                            if (response.success) {
                                console.log(F0llll.E(+'\u0038'));
                            } else {
                                console.log(F0llll.X('\u0035\u0034' - 0));
                            }
                        });
                    }
                }
            }
        };
        return GameManager;
    }();
    GameManager.passedLevels = '\x30' - 0;
    HappyKittensPuzzle.GameManager = GameManager;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var GameVars;
    GameVars = function () {
        function GameVars() {
        }
        GameVars.getLocalStorageData = function (key) {
            var value;
            value = localStorage.getItem(key);
            if (value !== null) {
                return value;
            } else {
                return F0llll.X("158" | 0);
            }
        };
        GameVars.setLocalStorageData = function (key, value) {
            localStorage.setItem(key, value);
        };
        return GameVars;
    }();
    HappyKittensPuzzle.GameVars = GameVars;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var LevelsContainer;
    LevelsContainer = function (_super) {
        __extends(LevelsContainer, _super);
        function LevelsContainer(game, i) {
            var _this, levelSelectionButton;
            _this = _super.call(this, game, null, F0llll.k(+'\x39\x36')) || this;
            _this.i = i;
            _this.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            for (var col = +'\u0030'; col < 3; col++) {
                for (var row = +"0"; row < "4" * 1; row++) {
                    levelSelectionButton = new HappyKittensPuzzle.LevelSelectionButton(_this.game, _this.i * ("12" * 1) + (col + ('\u0031' - 0)) + ("3" - 0) * row);
                    levelSelectionButton.x = -+'\u0031\u0034\u0030' * (1 - col);
                    levelSelectionButton.y = -('\x31\x34\x30' | 0) * (1.5 - row);
                    _this.add(levelSelectionButton);
                }
            }
            return _this;
        }
        return LevelsContainer;
    }(Phaser.Group);
    HappyKittensPuzzle.LevelsContainer = LevelsContainer;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var LevelSelectionButton;
    LevelSelectionButton = function (_super) {
        __extends(LevelSelectionButton, _super);
        function LevelSelectionButton(game, level) {
            var _this, isBlocked, blockedButtonImage, button, levelLabel;
            _this = _super.call(this, game, null, F0llll.k('\x31\x32\x30' * 1)) || this;
            _this.level = level;
            isBlocked = _this.level > HappyKittensPuzzle.GameVars.achievedLevel;
            if (isBlocked) {
                blockedButtonImage = new Phaser.Image(_this.game, 0, +"0", F0llll.s(+"182"), F0llll.s("50" | 0));
                blockedButtonImage.anchor.set(".5" - 0);
                _this.add(blockedButtonImage);
            } else {
                button = new Phaser.Button(_this.game, 0, "0" - 0, F0llll.E(+"43"), _this.onClick, _this);
                button.setFrames(F0llll.X('\x35\x39' | 0), F0llll.E(+'\u0039'), F0llll.E('\u0035\u0039' * 1));
                button.anchor.set(".5" * 1);
                _this.add(button);
            }
            levelLabel = new Phaser.Text(_this.game, 0, -("9" * 1), _this.level.toString(), {
                font: F0llll.s('\u0031\u0039\u0032' * 1),
                fill: F0llll.s(+'\x36\x37')
            });
            levelLabel.anchor.set(+'\x2e\x35');
            _this.add(levelLabel);
            return _this;
        }
        LevelSelectionButton.prototype.onClick = function () {
            if (HappyKittensPuzzle.LevelSelectionState.leavingScene) {
                return;
            }
            HappyKittensPuzzle.LevelSelectionState.leavingScene = true;
            this.game.time.events.add("150" | 0, function () {
                HappyKittensPuzzle.GameManager.levelSelected(this.level);
            }, this);
            HappyKittensPuzzle.AudioManager.getInstance().playSound(F0llll.E(+"119"));
        };
        return LevelSelectionButton;
    }(Phaser.Group);
    HappyKittensPuzzle.LevelSelectionButton = LevelSelectionButton;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var LevelSelectionState;
    LevelSelectionState = function (_super) {
        __extends(LevelSelectionState, _super);
        function LevelSelectionState() {
            return _super.apply(this, arguments) || this;
        }
        LevelSelectionState.prototype.init = function () {
            LevelSelectionState.currentInstance = this;
            LevelSelectionState.leavingScene = false;
            this.tweening = false;
        };
        LevelSelectionState.prototype.create = function () {
            var backgroundImage, titleContainer, aspectRatio, levelsContainer_py, levelsContainer, laggedLogo, creditsLabel;
            backgroundImage = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / +'\x32', HappyKittensPuzzle.GameConstants.GAME_HEIGHT / +"2", F0llll.E("123" - 0), F0llll.k('\x31\x31\x38' - 0));
            backgroundImage.anchor.set(.5);
            backgroundImage.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            titleContainer = new HappyKittensPuzzle.TitleContainer(this.game);
            this.add.existing(titleContainer);
            this.levelsRail = new Phaser.Group(this.game);
            this.add.existing(this.levelsRail);
            aspectRatio = window.innerHeight / window.innerWidth;
            if (this.game.device.desktop) {
                levelsContainer_py = 650;
            } else {
                if (aspectRatio >= "1.75" - 0) {
                    levelsContainer_py = +"620";
                } else if (aspectRatio >= '\x31\x2e\x35' - 0) {
                    levelsContainer_py = '\u0036\u0034\u0030' * 1;
                } else {
                    levelsContainer_py = +"662";
                }
            }
            for (var i = "0" - 0; i < LevelSelectionState.LEVEL_PAGES; i++) {
                levelsContainer = new HappyKittensPuzzle.LevelsContainer(this.game, i);
                levelsContainer.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH * (".5" * 1 + i);
                levelsContainer.y = levelsContainer_py;
                this.levelsRail.add(levelsContainer);
            }
            this.previousButton = this.add.button('\x36\x30' * 1, levelsContainer_py, F0llll.E('\x30' | 0), this.onArrowClick, this);
            this.previousButton.anchor.set(+".5");
            this.previousButton.setFrames(F0llll.X(+"201"), F0llll.k("21" | 0), F0llll.s(+"201"));
            this.previousButton.scale.set(-("1" * 1), HappyKittensPuzzle.GameVars.scaleY);
            this.previousButton.name = LevelSelectionState.PREVIOUS;
            this.nextButton = this.add.button(700, levelsContainer_py, F0llll.k(+'\u0031\u0036\u0038'), this.onArrowClick, this);
            this.nextButton.anchor.set(.5);
            this.nextButton.setFrames(F0llll.A(+'\u0032\u0030\u0031'), F0llll.k(73), F0llll.s(204));
            this.nextButton.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.nextButton.name = LevelSelectionState.NEXT;
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                laggedLogo = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / ('\x32' | 0), HappyKittensPuzzle.GameConstants.GAME_HEIGHT - 56, F0llll.X(190), F0llll.s(11));
                laggedLogo.anchor.set(+'\x2e\x35');
                laggedLogo.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            }
            creditsLabel = this.add.text(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, HappyKittensPuzzle.GameConstants.GAME_HEIGHT - 30, F0llll.A(+'\x33\x37') + HappyKittensPuzzle.GameConstants.SPONSOR, {
                font: F0llll.A(131),
                fill: F0llll.s(+'\u0037\u0038')
            });
            creditsLabel.anchor.x = '\u002e\u0035' * 1;
            creditsLabel.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            creditsLabel.alpha = ".72" * 1;
            this.setCurrentLevelPage();
            this.game.camera.flash(+"0x000000", HappyKittensPuzzle.GameConstants.TIME_FADE, false);
        };
        LevelSelectionState.prototype.shutdown = function () {
            LevelSelectionState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        LevelSelectionState.prototype.goToBoardScene = function () {
            this.game.camera.fade('\x30\x78\x30\x30\x30\x30\x30\x30' - 0, HappyKittensPuzzle.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start(F0llll.A(+'\u0031\u0039\u0033'), true, false);
            }, this);
        };
        LevelSelectionState.prototype.setCurrentLevelPage = function () {
            this.indexLevelsPage = Math.floor((HappyKittensPuzzle.GameVars.achievedLevel - '\u0031' * 1) / ('\x31\x32' * 1));
            if (this.indexLevelsPage === ("0" | 0)) {
                this.previousButton.visible = false;
            } else if (this.indexLevelsPage > +'\u0033') {
                this.nextButton.visible = false;
            }
            this.levelsRail.x = -HappyKittensPuzzle.GameConstants.GAME_WIDTH * this.indexLevelsPage;
        };
        LevelSelectionState.prototype.onArrowClick = function (b) {
            var px;
            if (this.tweening) {
                return;
            }
            b.clearFrames();
            this.tweening = true;
            this.setCorrespondingContainersVisible(true, b.name);
            px = this.levelsRail.x;
            if (b.name === LevelSelectionState.PREVIOUS) {
                px += HappyKittensPuzzle.GameConstants.GAME_WIDTH;
                this.indexLevelsPage--;
            } else {
                px -= HappyKittensPuzzle.GameConstants.GAME_WIDTH;
                this.indexLevelsPage++;
            }
            if (this.indexLevelsPage === +"0") {
                this.previousButton.visible = false;
            } else if (this.indexLevelsPage === LevelSelectionState.LEVEL_PAGES - ('\x31' - 0)) {
                this.nextButton.visible = false;
            } else {
                this.previousButton.visible = true;
                this.nextButton.visible = true;
            }
            this.game.add.tween(this.levelsRail).to({ x: px }, +"350", Phaser.Easing.Quadratic.Out, true).onComplete.add(function () {
                this.tweening = false;
                this.setCorrespondingContainersVisible(false);
            }, this);
            HappyKittensPuzzle.AudioManager.getInstance().playSound(F0llll.E(+'\x32\x30\x32'));
        };
        LevelSelectionState.prototype.setCorrespondingContainersVisible = function (beforeTweening, pressedButtonName) {
            if (beforeTweening) {
                if (pressedButtonName === LevelSelectionState.NEXT) {
                    this.levelsRail.forEach(function (levelsContainer) {
                        if (levelsContainer.i === this.indexLevelsPage || levelsContainer.i === this.indexLevelsPage + +"1") {
                            levelsContainer.visible = true;
                        } else {
                            levelsContainer.visible = false;
                        }
                    }, this);
                } else {
                    this.levelsRail.forEach(function (levelsContainer) {
                        if (levelsContainer.i === this.indexLevelsPage || levelsContainer.i === this.indexLevelsPage - +"1") {
                            levelsContainer.visible = true;
                        } else {
                            levelsContainer.visible = false;
                        }
                    }, this);
                }
            } else {
                this.levelsRail.forEach(function (levelsContainer) {
                    if (levelsContainer.i === this.indexLevelsPage) {
                        levelsContainer.visible = true;
                    } else {
                        levelsContainer.visible = false;
                    }
                }, this);
            }
        };
        return LevelSelectionState;
    }(Phaser.State);
    LevelSelectionState.PREVIOUS = F0llll.k(+"237");
    LevelSelectionState.NEXT = F0llll.E(+'\u0031\u0035\u0036');
    LevelSelectionState.LEVEL_PAGES = "5" * 1;
    HappyKittensPuzzle.LevelSelectionState = LevelSelectionState;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var TitleContainer;
    TitleContainer = function (_super) {
        __extends(TitleContainer, _super);
        function TitleContainer(game) {
            var _this, aspectRatio, shadowHeight, yellowStripeContainer_py, shadow, gameTitle, audioButton, yellowStripeContainer, colorStripe, stripeLabel;
            _this = _super.call(this, game, null, F0llll.A(+"102")) || this;
            aspectRatio = window.innerHeight / window.innerWidth;
            if (_this.game.device.desktop) {
                shadowHeight = 314;
                yellowStripeContainer_py = +'\x31\x39\x30';
            } else {
                if (aspectRatio >= +'\x31\x2e\x37\x35') {
                    shadowHeight = +'\u0032\u0035\u0030';
                    yellowStripeContainer_py = +"154";
                } else if (aspectRatio >= 1.5) {
                    shadowHeight = 294;
                    yellowStripeContainer_py = 180;
                } else {
                    shadowHeight = "304" | 0;
                    yellowStripeContainer_py = "200" | 0;
                }
            }
            shadow = new Phaser.Sprite(_this.game, "0" | 0, '\x30' | 0, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            shadow.scale.set(+"1.5" * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, shadowHeight / +'\x36\x34');
            shadow.alpha = +'\u002e\u0034\u0035';
            _this.add(shadow);
            gameTitle = new Phaser.Image(_this.game, -('\u0031\u0032' * 1), -+'\x31\x32', F0llll.s(+'\x34\x33'), F0llll.A('\x33\x31' | 0));
            gameTitle.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.add(gameTitle);
            audioButton = new HappyKittensPuzzle.AudioButton(_this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH - +'\u0038\u0035', "14" * 1);
            audioButton.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.add(audioButton);
            yellowStripeContainer = new Phaser.Group(_this.game);
            yellowStripeContainer.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / ('\x32' * 1);
            yellowStripeContainer.y = yellowStripeContainer_py;
            yellowStripeContainer.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            _this.add(yellowStripeContainer);
            colorStripe = new Phaser.Sprite(_this.game, +'\x30', +'\u0030', _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = '\u002e\u0035' - 0;
            colorStripe.scale.set("1.5" * 1 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / ('\x36\x34' * 1), ('\u0031\u0032' - 0) / +"64");
            yellowStripeContainer.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, +'\u0030', colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.ORANGE_SQUARE));
            colorStripe.anchor.x = +".5";
            colorStripe.scale.set(1.5 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / ('\x36\x34' - 0), ('\x39\x30' | 0) / +"64");
            yellowStripeContainer.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, "0" - 0, colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = ".5" - 0;
            colorStripe.scale.set('\u0031\u002e\u0035' * 1 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / ("64" - 0), +'\x31\x32' / ('\u0036\u0034' | 0));
            yellowStripeContainer.add(colorStripe);
            stripeLabel = new Phaser.Text(_this.game, "0" - 0, 18, F0llll.E("18" - 0), {
                font: F0llll.A(229),
                fill: F0llll.A(+'\u0031\u0037')
            });
            stripeLabel.anchor.x = .5;
            stripeLabel.setShadow('\u0034' - 0, "4" | 0, F0llll.X("116" * 1), +'\x30');
            yellowStripeContainer.add(stripeLabel);
            return _this;
        }
        return TitleContainer;
    }(Phaser.Group);
    HappyKittensPuzzle.TitleContainer = TitleContainer;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var LevelEditionState;
    LevelEditionState = function (_super) {
        __extends(LevelEditionState, _super);
        function LevelEditionState() {
            return _super.apply(this, arguments) || this;
        }
        LevelEditionState.prototype.init = function () {
            LevelEditionState.currentInstance = this;
            HappyKittensPuzzle.GameVars.moves = 0;
        };
        LevelEditionState.prototype.create = function () {
            var background, resetButton;
            background = new Phaser.Sprite(this.game, +"0", +'\u0030', this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            background.scale.set(HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"64", HappyKittensPuzzle.GameConstants.GAME_HEIGHT / ("64" | 0));
            this.add.existing(background);
            this.board = new HappyKittensPuzzle.Board(this.game);
            this.add.existing(this.board);
            this.movementsLabel = this.add.text("600" - 0, 900, F0llll.A("214" | 0) + HappyKittensPuzzle.GameVars.moves, {
                font: F0llll.s(+"42"),
                fill: F0llll.s('\x32\x30\x37' - 0)
            });
            this.movementsLabel.anchor.x = 1;
            this.movementsLabel.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            resetButton = this.add.button(+'\x32\x30', +"900", F0llll.A(+'\u0031\u0037\u0034'), this.onResetClicked, this);
            resetButton.setFrames(F0llll.k(+'\u0031\u0034\u0039'), F0llll.k(+'\x31\x37\x31'), F0llll.A('\u0036\u0036' - 0));
            resetButton.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.game.camera.flash(+'\u0030\u0078\u0030\u0030\u0030\u0030\u0030\u0030', HappyKittensPuzzle.GameConstants.TIME_FADE, false);
        };
        LevelEditionState.prototype.shutdown = function () {
            LevelEditionState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        LevelEditionState.prototype.move = function (column, row) {
            var cells, c, r;
            HappyKittensPuzzle.GameVars.moves++;
            this.movementsLabel.text = F0llll.X(+'\x31\x33\x34') + HappyKittensPuzzle.GameVars.moves;
            cells = this.board.cells;
            for (var i = +"0"; i < HappyKittensPuzzle.BoardManager.neighbourSquares.length; i++) {
                c = HappyKittensPuzzle.BoardManager.neighbourSquares[i][+'\u0030'] + column;
                r = HappyKittensPuzzle.BoardManager.neighbourSquares[i][1] + row;
                if (c >= "0" - 0 && r >= +"0" && c < cells.length && r < cells.length) {
                    cells[c][r].flip(true);
                }
            }
        };
        LevelEditionState.prototype.onResetClicked = function () {
            this.game.state.start(F0llll.A(+'\u0036\u0032'), true, false);
        };
        return LevelEditionState;
    }(Phaser.State);
    HappyKittensPuzzle.LevelEditionState = LevelEditionState;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var PreLoader;
    PreLoader = function (_super) {
        __extends(PreLoader, _super);
        function PreLoader() {
            return _super.apply(this, arguments) || this;
        }
        PreLoader.prototype.init = function () {
            PreLoader.currentInstance = this;
            this.load.path = HappyKittensPuzzle.GameConstants.ASSETS_PATH;
        };
        PreLoader.prototype.preload = function () {
            this.generateBitmapData();
            this.composeScene();
            this.loadAssets();
        };
        PreLoader.prototype.create = function () {
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                LaggedAPI.init(F0llll.k(+"109"), F0llll.A(+"191"));
            }
            HappyKittensPuzzle.AudioManager.getInstance().init(this.game);
            HappyKittensPuzzle.AudioManager.getInstance().playSound(F0llll.A(142), true);
            if (HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                this.game.state.start(F0llll.s(+"62"), true, false);
            } else {
                if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
                    GamePix.game.gameLoaded(function () {
                        HappyKittensPuzzle.Game.currentInstance.state.start(F0llll.X('\x33\x36' * 1), true, false);
                    });
                } else {
                    this.game.state.start(F0llll.k("36" * 1), true, false);
                }
            }
        };
        PreLoader.prototype.composeScene = function () {
            var tmpLabel, backgroundSprite, gameLogo, preloadBarContainer, preloadBarCapsuleShadow, preloadBarCapsule;
            tmpLabel = this.add.text(HappyKittensPuzzle.GameConstants.GAME_WIDTH / ("2" | 0), +'\x31\x39\x30', F0llll.A("167" | 0), {
                font: F0llll.E(192),
                fill: F0llll.s(+'\x32\x30\x39')
            });
            tmpLabel.anchor.x = '\u002e\u0035' * 1;
            backgroundSprite = this.add.sprite(0, +"0", this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_CYAN_SQUARE));
            backgroundSprite.scale.set(HappyKittensPuzzle.GameConstants.GAME_WIDTH / +'\u0036\u0034', HappyKittensPuzzle.GameConstants.GAME_HEIGHT / +'\x36\x34');
            gameLogo = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, "190" | 0, F0llll.k(+"133"));
            gameLogo.anchor.set(+'\x2e\x35');
            gameLogo.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.loadingLabel = this.add.text(HappyKittensPuzzle.GameConstants.GAME_WIDTH / ('\x32' * 1), +"475", F0llll.s(+"143"), {
                font: F0llll.s(203),
                fill: F0llll.X("78" - 0)
            });
            this.loadingLabel.anchor.x = ".5" * 1;
            this.loadingLabel.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            preloadBarContainer = this.add.group();
            preloadBarContainer.y = 615;
            preloadBarContainer.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            preloadBarCapsuleShadow = new Phaser.Sprite(this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2 + 5, +"4", this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.BLACK_SQUARE));
            preloadBarCapsuleShadow.scale.set("10" | 0, +'\x2e\x38\x35');
            preloadBarCapsuleShadow.anchor.set(".5" - 0);
            preloadBarCapsuleShadow.alpha = +".35";
            preloadBarContainer.add(preloadBarCapsuleShadow);
            preloadBarCapsule = new Phaser.Sprite(this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH / ("2" * 1), +'\x30', this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            preloadBarCapsule.scale.setTo('\u0031\u0030' * 1, ".78" - 0);
            preloadBarCapsule.anchor.set(".5" * 1);
            preloadBarContainer.add(preloadBarCapsule);
            this.preloadBar = new Phaser.Sprite(this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH / ("2" * 1) - +"315", +"0", this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.ORANGE_SQUARE));
            this.preloadBar.scale.setTo(0, '\x2e\x36' * 1);
            this.preloadBar.anchor.set(0, +".5");
            preloadBarContainer.add(this.preloadBar);
        };
        PreLoader.prototype.loadAssets = function () {
            this.load.atlas(F0llll.k(+"14"), F0llll.k(97), F0llll.E(+"216"));
            this.load.audiosprite(F0llll.X(211), [
                F0llll.A("89" | 0),
                F0llll.E(+'\x35\x32')
            ], F0llll.s('\u0035\u0033' | 0));
            this.load.onFileComplete.add(this.updateLoadedPercentage, this);
        };
        PreLoader.prototype.updateLoadedPercentage = function () {
            this.preloadBar.scale.x = this.load.progress / ("100" - 0) * +'\x39\x2e\x38\x34\x34';
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
                GamePix.game.gameLoading(this.load.progress);
            }
        };
        PreLoader.prototype.generateBitmapData = function () {
            var bmd;
            bmd = this.game.add.bitmapData(64, +"64", HappyKittensPuzzle.GameConstants.HAPPY, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect('\u0030' - 0, '\u0030' * 1, "64" | 0, +"64");
            bmd.ctx.fillStyle = F0llll.A("7" - 0);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData('\u0036\u0034' | 0, "64" | 0, HappyKittensPuzzle.GameConstants.BLACK_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, '\x30' | 0, 64, 64);
            bmd.ctx.fillStyle = F0llll.s('\u0034\u0034' - 0);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData("64" | 0, 64, HappyKittensPuzzle.GameConstants.WHITE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect('\x30' - 0, "0" * 1, '\u0036\u0034' * 1, "64" - 0);
            bmd.ctx.fillStyle = F0llll.X('\x37\x38' - 0);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(+'\u0036\u0034', +"64", HappyKittensPuzzle.GameConstants.DARK_CYAN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect("0" * 1, "0" - 0, +"64", +'\u0036\u0034');
            bmd.ctx.fillStyle = F0llll.k(56);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, "64" * 1, HappyKittensPuzzle.GameConstants.GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect('\x30' | 0, '\x30' | 0, '\x36\x34' | 0, 64);
            bmd.ctx.fillStyle = F0llll.X(+'\x31\x39\x36');
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData('\x36\x34' | 0, '\x36\x34' | 0, HappyKittensPuzzle.GameConstants.BLUE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect("0" * 1, 0, +"64", '\u0036\u0034' * 1);
            bmd.ctx.fillStyle = F0llll.E(+'\x31\x31\x31');
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, +'\x36\x34', HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect('\u0030' - 0, +'\x30', +'\u0036\u0034', '\x36\x34' - 0);
            bmd.ctx.fillStyle = F0llll.E(+'\x36\x38');
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData('\u0036\u0034' - 0, 64, HappyKittensPuzzle.GameConstants.GRUMPY, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect('\u0030' | 0, +'\x30', 64, +'\x36\x34');
            bmd.ctx.fillStyle = F0llll.s(95);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData("64" | 0, +"64", HappyKittensPuzzle.GameConstants.GRAY_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(+'\x30', 0, +"64", "64" - 0);
            bmd.ctx.fillStyle = F0llll.s(150);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData('\x36\x34' * 1, "64" | 0, HappyKittensPuzzle.GameConstants.YELLOW_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(+"0", "0" - 0, '\u0036\u0034' - 0, '\u0036\u0034' - 0);
            bmd.ctx.fillStyle = F0llll.E('\x31\x38\x39' * 1);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData("64" | 0, 64, HappyKittensPuzzle.GameConstants.ORANGE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect('\x30' | 0, +'\u0030', '\x36\x34' * 1, "64" | 0);
            bmd.ctx.fillStyle = F0llll.X(+"126");
            bmd.ctx.fill();
        };
        return PreLoader;
    }(Phaser.State);
    HappyKittensPuzzle.PreLoader = PreLoader;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (Fabrique) {
    var Plugins;
    (function (Plugins) {
        var CacheBuster;
        CacheBuster = function (_super) {
            __extends(CacheBuster, _super);
            function CacheBuster(game, parent) {
                var _this;
                _this = _super.call(this, game, parent) || this;
                _this.patchLoader();
                return _this;
            }
            CacheBuster.prototype.patchLoader = function () {
                Object.defineProperty(Phaser.Loader, F0llll.s("205" - 0), { value: null });
                Phaser.Loader.prototype.transformUrl = function (url, file) {
                    if (!url) {
                        return F0llll.X('\u0038\u0034' - 0);
                    }
                    if (this.cacheBuster !== null && null === url.match(/^(data:)/)) {
                        url += F0llll.k('\u0037\u0031' * 1) + this.cacheBuster;
                    }
                    if (url.match(/^(?:blob:|data:|http:\/\/|https:\/\/|\/\/)/)) {
                        return url;
                    } else {
                        return this.baseURL + file.path + url;
                    }
                };
            };
            return CacheBuster;
        }(Phaser.Plugin);
        Plugins.CacheBuster = CacheBuster;
    }(Plugins = Fabrique.Plugins || (Fabrique.Plugins = {})));
}(Fabrique || (Fabrique = {})));
(function (HappyKittensPuzzle) {
    var YellowStripe;
    YellowStripe = function (_super) {
        __extends(YellowStripe, _super);
        function YellowStripe(game, text) {
            var _this, colorStripe, stripeLabel;
            _this = _super.call(this, game, null, F0llll.k(+"99")) || this;
            _this.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2;
            _this.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            colorStripe = new Phaser.Sprite(_this.game, +'\u0030', +"0", _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = ".5" - 0;
            colorStripe.scale.set(+"1.5" * HappyKittensPuzzle.GameConstants.GAME_WIDTH / +'\u0036\u0034', ('\x31\x32' - 0) / ('\x36\x34' | 0));
            _this.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, +'\u0030', colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.ORANGE_SQUARE));
            colorStripe.anchor.x = '\x2e\x35' - 0;
            colorStripe.scale.set(+"1.5" * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, 90 / ('\u0036\u0034' - 0));
            _this.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, 0, colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = ".5" - 0;
            colorStripe.scale.set("1.5" * 1 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / ("64" | 0), +'\x31\x32' / +"64");
            _this.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, "0" * 1, colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            colorStripe.anchor.x = +'\x2e\x35';
            colorStripe.scale.set(+"1.5" * HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"64", +"16" / +"64");
            colorStripe.alpha = +".45";
            _this.add(colorStripe);
            stripeLabel = new Phaser.Text(_this.game, +'\x30', '\u0031\u0038' | 0, text, {
                font: F0llll.X("229" * 1),
                fill: F0llll.k(+"155")
            });
            stripeLabel.anchor.x = ".5" * 1;
            stripeLabel.setShadow(+"4", 4, F0llll.s('\u0031\u0031\u0036' - 0), '\x30' | 0);
            _this.add(stripeLabel);
            return _this;
        }
        return YellowStripe;
    }(Phaser.Group);
    HappyKittensPuzzle.YellowStripe = YellowStripe;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));