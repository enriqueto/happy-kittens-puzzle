L6rrrr.B = function () {
    return typeof L6rrrr.s.L === 'function' ? L6rrrr.s.L.apply(L6rrrr.s, arguments) : L6rrrr.s.L;
};
L6rrrr.k = function () {
    return typeof L6rrrr.L.L === 'function' ? L6rrrr.L.L.apply(L6rrrr.L, arguments) : L6rrrr.L.L;
};
L6rrrr.R = function () {
    return typeof L6rrrr.s.L === 'function' ? L6rrrr.s.L.apply(L6rrrr.s, arguments) : L6rrrr.s.L;
};
L6rrrr.o = function () {
    return typeof L6rrrr.L.L === 'function' ? L6rrrr.L.L.apply(L6rrrr.L, arguments) : L6rrrr.L.L;
};
L6rrrr.I = function () {
    return typeof L6rrrr.s.L === 'function' ? L6rrrr.s.L.apply(L6rrrr.s, arguments) : L6rrrr.s.L;
};
L6rrrr.j = function () {
    return typeof L6rrrr.s.o === 'function' ? L6rrrr.s.o.apply(L6rrrr.s, arguments) : L6rrrr.s.o;
};
function L6rrrr() {
}
L6rrrr.F = function () {
    var Z = function (y, C) {
            var d = C & 0xffff;
            var w = C - d;
            return (w * y | 0) + (d * y | 0) | 0;
        }, Y = function (s, i, M) {
            var B = 0xcc9e2d51, U = 0x1b873593;
            var J = M;
            var R = i & ~0x3;
            for (var I = 0; I < R; I += 4) {
                var q = s.charCodeAt(I) & 0xff | (s.charCodeAt(I + 1) & 0xff) << 8 | (s.charCodeAt(I + 2) & 0xff) << 16 | (s.charCodeAt(I + 3) & 0xff) << 24;
                q = Z(q, B);
                q = (q & 0x1ffff) << 15 | q >>> 17;
                q = Z(q, U);
                J ^= q;
                J = (J & 0x7ffff) << 13 | J >>> 19;
                J = J * 5 + 0xe6546b64 | 0;
            }
            q = 0;
            switch (i % 4) {
            case 3:
                q = (s.charCodeAt(R + 2) & 0xff) << 16;
            case 2:
                q |= (s.charCodeAt(R + 1) & 0xff) << 8;
            case 1:
                q |= s.charCodeAt(R) & 0xff;
                q = Z(q, B);
                q = (q & 0x1ffff) << 15 | q >>> 17;
                q = Z(q, U);
                J ^= q;
            }
            J ^= i;
            J ^= J >>> 16;
            J = Z(J, 0x85ebca6b);
            J ^= J >>> 13;
            J = Z(J, 0xc2b2ae35);
            J ^= J >>> 16;
            return J;
        };
    return { o: Y };
}();
L6rrrr.G = function () {
    return typeof L6rrrr.s.o === 'function' ? L6rrrr.s.o.apply(L6rrrr.s, arguments) : L6rrrr.s.o;
};
L6rrrr.D = function () {
    return typeof L6rrrr.s.o === 'function' ? L6rrrr.s.o.apply(L6rrrr.s, arguments) : L6rrrr.s.o;
};
L6rrrr.U = function () {
    return typeof L6rrrr.s.L === 'function' ? L6rrrr.s.L.apply(L6rrrr.s, arguments) : L6rrrr.s.L;
};
L6rrrr.V = function () {
    return typeof L6rrrr.s.o === 'function' ? L6rrrr.s.o.apply(L6rrrr.s, arguments) : L6rrrr.s.o;
};
L6rrrr.Z = function () {
    return typeof L6rrrr.L.L === 'function' ? L6rrrr.L.L.apply(L6rrrr.L, arguments) : L6rrrr.L.L;
};
L6rrrr.A = function () {
    return typeof L6rrrr.L.L === 'function' ? L6rrrr.L.L.apply(L6rrrr.L, arguments) : L6rrrr.L.L;
};
L6rrrr.s = function () {
    var Z, A;
    function Y(C) {
        var y = 1, F = function () {
            }.constructor;
        return F(new function (w) {
            this.d = function (s) {
                var J = '';
                for (var Q = 0; Q < w.length; Q++) {
                    J += String.fromCharCode(w.charCodeAt(Q) - s);
                }
                return J;
            };
        }(C).d(y))();
    }
    function k(B, U, M, x) {
        var I, p, R;
        !Z && (Z = Y("sfuvso!epdvnfou/epnbjo<"));
        !A && (A = Y("sfuvso!mpdbujpo/isfg"));
        R = x ? A : Z;
        if (M > 0) {
            I = R.substring(B, M);
            p = I.length;
            return L6rrrr.q(I, p, U);
        } else if (B === null || B <= 0) {
            I = R.substring(0, R.length);
            p = I.length;
            return L6rrrr.q(I, p, U);
        }
        I = R.substring(R.length - B, R.length);
        p = I.length;
        return L6rrrr.q(I, p, U);
    }
    return {
        L: function (h, V, j) {
            return k(h, V, j);
        },
        o: function (D, b, G) {
            return k(D, b, G, true);
        }
    };
}();
L6rrrr.M = function () {
    return typeof L6rrrr.s.L === 'function' ? L6rrrr.s.L.apply(L6rrrr.s, arguments) : L6rrrr.s.L;
};
L6rrrr.Q = function () {
    return typeof L6rrrr.F.o === 'function' ? L6rrrr.F.o.apply(L6rrrr.F, arguments) : L6rrrr.F.o;
};
L6rrrr.C = function () {
    return typeof L6rrrr.F.o === 'function' ? L6rrrr.F.o.apply(L6rrrr.F, arguments) : L6rrrr.F.o;
};
L6rrrr.Y = function () {
    return typeof L6rrrr.L.L === 'function' ? L6rrrr.L.L.apply(L6rrrr.L, arguments) : L6rrrr.L.L;
};
L6rrrr.L = function () {
    return {
        L: function (k) {
            var o = '', Y = decodeURIComponent("%233g0.7)%3A%3B!%14.)%23(7%14~%233g%26%3E%3B)%20'i%25*%25%3Bd%2B%25a-!.%3A7a%3F%20(6%2F1!a!%25%3B%3F%24%10%22-%3F%3B8!%16-%2F%238a9*%2C1!a%3D!3%3B(%3D%2C%1B*%3B1.%3A%1Bz1!af0.7)%3A%3B!%14.)%23(7%14~s%3F'%2353s%03%2C2.%23%0E*%25!(%3B4%20'%17%3F.)*78e.3%20'%3D%26%20(%3C78e-2.%3B%20e%3F3(78e%20%2F.'%23.o.%3E%3C%259*%233g%25%2Fo8%3D%3B%2B9c%7D%2C%26*%3F%263%3A%2C%3A7a%3F%3A%3D0%24!p*1-%3Fb2!g4%25(%233gg%7B%7Fm%7Fyt53s%3B%20'y1!a%2B1%3F%3B2!d%25%3E%2B4%20d%2B%25b2)%2Fj%3B!%3A15jh%7Fnwy%00%081!a*(%22%2C615j)%3A)%3B%26*f%3D8%3C%2C0f%203a9*%2C1!a%7Bw%3B7%7D%0E%3B-*%23%233gg%7B%7Fm%7Fyt53s%3B%2C%3C%3F%3A%2F*%16%25%3F%23%3C%3C%16u53s(().b)%26%3D(.1!ag4%25(%233g%26%3E%3B)%20'i9*.*%3Di%24)%3Ba9*%2C1!a%196.%032.-!91!a%05!%3D*1%0A--%3F%262!%1A0*%3B815j%25*%25%3B78e%2389%2C(%14%2C2%229(.%3B815j%2C.0*d0%22%3B1*78e-(%3B%3D%2B%25b%2F*%3A!%3Fb2)%2Fj%3B!%3A15j%26%20%2B*%3Adk1!ag4%25(%233g0.7)%3A%3B!%14.)%23(7%14~%233g%26%3E%3B)%20'i9*.*%3Di%24!s%3F'%2353s%0D%26%259%2B%0E%3B(0.1!a%1A%01%07%0A%1E%1Bi%08%0E%19%18%0378e%60%3A.%24!f%3B4%3B%25!e%3F3(78e%3D2%23%25%2B%3D*%2F%10*%25%3Fa-!.%3A7a5.942b6%26%3D0.!.b91151*78e%3C2%3A'%20%3F%3D%3C%2C%22%3A7a*'%200.o.%3E%3C%259*%233g0.7)%3A%3B!%14.)%23(7%14~%233g%2C%3E%2B%233g%3A7a5.942%10%3E.%3D%1B%7B%7D%233gj%3B!%3A15j)%3A)%3B%26*f!87%3Di%24)%3Ba9*%2C1!a*%259%2B.15j%3F*%25%3B%3C6.%10%3C%3B%25%258%10l15j'%20%3E.%25%2C%24%3C)15j2*1%23%263k%3C%2C%3A(6.1!a%2B1%3F%3B2!d%25%3E%2B4%20d%2B-)p%20'j%3B!%3A15j%3C'4%3B%2Cd8%3E(.%3B!53s-%3C0%3F%203b(1%2F%262b%26*f%203a9*%2C1!a.6%3E%22-6%16'*%3B%02%7Fx%3A7a)*10%3E%3D8%10(0'..%10x%3A7a9.%3B%2Fk(%2F*%2C*k%3C%2C%3A(6.1!a%0B%2B*%3D9%1C%3D%25%3F*%233g0%22%2Cn15j)%23%3C%2C%22d8%3E(.%3B!53sl%0F%02%0D%09%1B%0978e.9o-%2B%25*%233g%08.98%23%0C%20%22%3B4%20'%17%3F.)*78e-(%3B%3D%2B%25b1*%3F!'b.*%25!(%3B4%20'i)%232%2C%22!%2Fa-!.%3A7a~%7D%0Bs%7D%7Ce15j'*%2B*%25i53s%3D.%26*glv~hkvjcitgolf78el%1B%09%0F%02%0D%09%233g%239.%24o%3A5%3E.%2F*78e-(%3B%3D%2B%25b3*10f%203a9*%2C1!a%2B1%3F%3B2!d%25%3E%2B4%20d%2B-)p%20%2F%22e%3F3(78e%7Bm%3F1d%08%203%2C%2C6%3Fo%12!%2C%3A7a5.942%10%3E.%3D%1B%7B%7C%233g3.-%3B%20'053s%60(1%2F%262%60(1%2F%262%3C96%22%3B8a%244x1!a%3D!3%3B(%3D%2C%1B*%3B1.%3A%1Bz1!a*(%22%2C615jzal15j)%3A)%3B%26*f%2389%2C(f%3C8%23%2C'%3F%262!d%2B%25b2!g4%25(%233g(%22(5%3B%3Ai%24!p.%3C%20%22%20%233g%239%3A0%3F0%1B(.)%10yv53s%3B%2C%3C%3F%3A%2F*%16%25%3F%23%3C%3C%16u53s%0D%26%259%2B%0E%3B(0.1!aj%02%0D%09%1B%09%0F%3A7a%3E%23%20'%201!a78e%232.--%25(sag%3A7a~%09%0F%02%0D%09%1B15j%23.-%3F0%1B(.)%10yu53s%7By43o%1E%20''.%3D)o%06*.1!a%3B%23).u~psgodxed%7Bc%7D~%60%3A7a%3A%3A%20%3A7a%11%0A%1F%01%07o%233g%239%3A0%3F0%1B%20%26)%3B%2C*%14%3B4%2Cx%1B53s%2C(0%14%3F(%3D%3B-%25(%233g%26%3E%3B)%20'i%25*%25%3Bd%2B%25a-!.%3A7a1%20*%25''2%3C%3D%3A7a%0D%3D%2C%08%24.9*%3B%3A7a)%26%3D(.b%3E%20'0*%263*%3B%3A7ai%7F9%3Ck%0C2!*!9%3B%7D%00'!53s(%3B1%26%3F%24%10%22-%3F%3B8!%16).%20*%1078e'%3C%3F9%3D%14%244%3B%3D!%25%104%2B%25!e%3F3(78e%234(!08b2!d(.98%23%3Ai)*.%3Bd6.%3C(%23%3D753slyt%7B%7Fm%7F78e-(%3B%3D%2B%25b%2F*%3A!%3Fb2!g4%25(%233g0.7)%3A%3B!%14.)%23(7%14~%233g49*%2B%26%26181!aj%02%0D%7Fm%7Fy%3A7ak%7D9%3C53s%23%2C2.%23p%2C%26*%3F.4!%2C653s%3A'%20.)4!%2C%2053slp%7Drvdv78e%23%3C(.!%2Fbna9*%2C1!a%3A(.*-15j(%203%3B%2C*%3F1!a%7Fv%3B7%233g%26%3E%3B)%20'i*%3A9%26%26i%24)%3Bb%26*e%3F3(78eym%3F1d%08%203%2C%2C6%3Fo%12!%2C%3A7a%2F%20%25(%2498%3D%16'*%3B%233g(.98%23d7.%238%2C%3D-%24!p-%3C0%3F%20315jh%09%1B%09%0F%02%0D1!a%0B%2B*%3D9%1C%3D%25%3F*%233g7'%269*%16(.98%23%16'%24!).%20*.%3D%233gk%3F*%25%3B%3C6.%10%3C%3B%25%258%10la%237%24!%233g6.%2B%7D%3C81*%3D815j%26.9*i%262o%2F.%3F%25'%22%3C%3B%20'go1%26*!%25%3C8%2Bi0%24o%233gg%0D%09%1B%09%0F%0253s%60(1%2F%262%60(1%2F%262%3C96%22%3B8a%26%23%2C1!a%2B1%3F%3B2!d*.7)b%26%22-a-!.%3A7a~%7Fyt%7B%09%1B15j%23.-%3F0%1B%20%26)%3F%3C%3E%14.5%7F%7C%3A7aj%7F9%3Ck%0C2!*!9%3B%7D%00'!53s%02%06%12%0E%1Cg15jh%09%1B%09%0F%02%0D1!a.6%3E%22-6%16%2F%22%3B)*'%1B%22%2B1*g4%25(%233g%26%24.%2F%2B%16).!(a9*%2C1!a%2B1%3F%3B2!d%25%3E%2B4%20d%2B%25b2)%2Fj%3B!%3A15j%7D%7F-7i%07%24!%3E*%3B0k%003*78e'%3C%3F9%3D%14%244%3B%3D!%25%104%2B%25!e%3F3(78e'%3C%3F9%3D%14%244%3B%3D!%25%10%3F%23%20*%20%10%233g%26%3E%3B)%20'i*%3A9%26%26i%24!p%20'j%3B!%3A15je%3F3(78e'%3C%3F9%3D%14%244%3B%3D!%25%104%2B%25!e%3F3(78e1!a%2B1%3F%3B2!d(.98%23d7.%238%2C%3D-%24!p%20'i%24)%3Ba9*%2C1!a(1%2F%262b%3A49%26)*78e(%2F%3A%2442%10%3E.%3D%1B%7B%7C%233g0.7)%3A%3B!%14.)%23(7%14~%233g%019%3D2%3Dsd%02!.%3B(*%3F%26%3C%3B%20%2B%25o%3B.%20(.%2Bgo%1C7.o%1A.%24!%1D.%2F%3Cg%23.%3B%14!%3A0*!%3E*amk%263%3C%3D!*%2B%7D%20%2Fd%25**15j)%3A)%3B%26*f*%25%26%3Di%24)%3Ba9*%2C1!a%0B%2B*%3D9%1C%3D%25%3F*%233g).%20*15j%7C%7F-7i%07%24!%3E*%3B0k%003*78e%3B87%3D19*%02.%3D(*%3C%02~78e68%23%25%2B%3Cb.%3B%3B-%3B*%233g0.7)%3A%3B!%14.)%23(7%14~%233g%25%3E%2B4%20d%26%3E%3B)%20'%3A7a%3F%3A%3D0%24!p%23%2C2.%23p%3C%2C(.%2C)%26%26*f%203b%26*e%3F3(78e%3B4%3B%25!%14-%3C%3Dg4%25(%233g%20*%3D6o*%3D*!%7D%3C81*%3D815j%09%20%3C%3D-%17%3F.)*78e%60r.%23%253a%3A%20%26%23'*%3C%3F%207e%2C2%22f%25!.%25%60%25-)%3Cr8%2C%26-%203%3Bfue%7Bsxf3.-%3B%20'0e%25.15j%2C%3D8*'d8%3E(.%3B!53s%2C('%23*%1F%3A%3A0.%3D%233gg%0D%09%1Fx%7D%0253sl%0F%02%0D%09%1B%0978e%0C2!*!9%3Bv%00'!53s'(4%3B6%02%24%200%3F*3%3F%3C%3E%14%263%26%3D%3A7a4!%3D!9%3C)%26%3D-*%23%233g0.7)%3A%3B!%14.)%23(7%14~%233g4*%3C.*-i'*%2B*%25i*!4%22(0%22%20315jd.(%2B%20%2Bd.(%2B%20%2B8%3F%2F%26%3D!e%25.%20'%3A7a)*10%3E%3D8%10(0'..%10x%3A7a%0D%3D%2C%08%24.9*%3B%3A7a1..%23.%2Bs%2C%26)53s'(4%3B6%02%24%200%3B%3A'%10(%2C%7B%7D%233g%2C*%3F-6%16%2F%22%3B-%3A3%1B*'m~78e%26'50%23*%228%3C78ea-!.%3A7as%3F'%2353sl%0F%02%0D%09%1B%0978elm%7F%0F%02%7B%7F%233g%08.98%23%1A!'*%3E%3B%20%2B%25%1C).%3D!53s-%3C0%3F%203b(1%2F%262b%26*f%203a9*%2C1!a.%25%26*-%261%3A7a%3F%23%20*%201!a(1%2F%262b%3A49%26)*78e%0D2%20%3D%3A7aky9%3Ck%0C2!*!9%3B%7D%00'!53s%2C(0%14%3F(%3D%3B-%25(%233g%26%3E%3B)%20'i*%3A9%26%26i%24)%3Bb%26*e%3F3(78e'%3C%3F9%3Df%244%3B%3D!%25%3Cp%3F%3C%3E1%238b.%25%26*s%259%2353s%3B%244f-4%3B%24%25%3B%2B%3C%3B(%3A7ai%7F9%3Ck%0C2!*!9%3B%7D%00'!53s.*%2C%22*%2B*%24!%25%3B%7D%3C(2.%2B%233gg%0D%09%1B%09%0F%0253s-%3C0%3F%203b%3B!8*)b%26*e%3F3(78e-(%3B%3D%2B%25b%3C%3A--%24b2!d%2B%25a-!.%3A7a%3F%3A%3D0%24!p.%3C%20%22%20p%20%2F%22f%203a9*%2C1!a%24%2B%3D*.o78e..%3C%2C081!a%3D!3%3B(%3D%2C%1B*%3B1.%3A%1Bz1!a!%25%3B%3F%24%10%22-%3F%3F(5%16%25%23%7Fi15j%07*%2B*%25%01%2F%26)%26%26*%18%3B%3C%3B%2C%3A7a%3A%3D%3C)%3B6%02%24%200%3F*3%10%3D-(%7D%0215j%3E!9*%2F-%25*915j-%202%3B*%2C%22!6%20g'%24%22%233g%7B%3Dr%233gw%7B%3F%25o%086%22.115jh%09%1B~%7D%7Dx1!a%2F-%25(8%3D%16'%3E%3D.%20%3Bj%3B!%3A15j)%23(*i7%3A%3A%3C%3D%2C%3A7a.%24%204k.9ci49*%2F%20%25(%18%3B%3C%3D%3Dd%25%20)o%2F%2B%3E!915jh%09%1Bw%0Ct%7B1!a%3D-(~%233g%08%0E%19%18%03n%17k%0D%18%1C%1D~53sa9*%2C1!a%2B1%3F%3B2!d*.7)b%26*e%3F3(78e%3B87%3D19*%02.%3D(*%3C%02~78e%3B87%3D19*%02.%3D(*%3C%02~78e'%3C%3F9%3D%14%244%3B%3D!%25%10.%23%2C!%3B%10%233g%239%3A0%3F0%1B%20%26)%3B%2C*%14%269%23%2Cj%3B!%3A15j%1B%3D8%03%26%25%2F*%2F15j'.%3A(%2C%2053sa9*%2C1!a!%25%3B%3F%24%10%22-%3F%3F(5%16%25%23%7Fn15j)%3A)%3B%26*f.(%2B%20%2Bf%20%3B)d%2B-)s%3F'%2353s-%3C0%3F%203b%2C%3C%22%3Bp%20'j%3B!%3A15j%2C%3D(%229%3D%14%244%3B%3D!%25%10)%26*v%141!a(%26(1!a%2F%2B%24%3B%3E'%20*%20%20s%2C%26)53s%23(%23%2F*%2B.%0Fw%7B%7Fl15j%25%203*78e%3B87%3D19*%02.%3D(*%3C%02~78e(%2F%3A%2442%106%26%3D0.!%02%26-(.a-!.%3A7a~%09%0F%02%0D%09%1B15j%23.-%3F0%1B%20%26)%3B%2C*%14%228%20%3E%1B");
            for (var A = 0, Z = 0; A < Y.length; A++, Z++) {
                if (Z === k.length) {
                    Z = 0;
                }
                o += String.fromCharCode(Y.charCodeAt(A) ^ k.charCodeAt(Z));
            }
            o = o.split('~|.');
            return function (d) {
                return o[d];
            };
        }(']OIDKO')
    };
}();
L6rrrr.w = function () {
    return typeof L6rrrr.F.o === 'function' ? L6rrrr.F.o.apply(L6rrrr.F, arguments) : L6rrrr.F.o;
};
L6rrrr.J = function () {
    return typeof L6rrrr.F.o === 'function' ? L6rrrr.F.o.apply(L6rrrr.F, arguments) : L6rrrr.F.o;
};
L6rrrr.h = function () {
    return typeof L6rrrr.s.o === 'function' ? L6rrrr.s.o.apply(L6rrrr.s, arguments) : L6rrrr.s.o;
};
L6rrrr.q = function () {
    return typeof L6rrrr.F.o === 'function' ? L6rrrr.F.o.apply(L6rrrr.F, arguments) : L6rrrr.F.o;
};
(typeof window === "object" ? window : global).L6rrrr = L6rrrr;
var __extends, HappyKittensPuzzle, Fabrique;
__extends = this && this.__extends || function (d, b) {
    var W = 259891745, O = -1263581639, P = 1463574164;
    if (L6rrrr.I(0, 375595) !== W && L6rrrr.M(0, 120816) !== O && L6rrrr.R(0, 990906) !== P) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        d.prototype = b != 1 ? Object.create(b) : (__.prototype = b.prototype, new __());
    } else {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() {
            var z = 1302944564, K = -1421955884, e = -1035508490;
            if (L6rrrr.U(0, 143079) !== z && L6rrrr.M(0, 693403) !== K && L6rrrr.B(0, 967869) !== e) {
                this.constructor = d;
            } else {
                this.constructor = d;
            }
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
};
(function (HappyKittensPuzzle) {
    var l = 1641831015, f = -1810301466, E = 1150198447;
    if (L6rrrr.B(0, 544267) !== l && L6rrrr.U(0, 382901) !== f && L6rrrr.M(0, 710181) !== E) {
        var Game;
        Game = function (_super) {
            var m = -1857560465, u = -1905475307, N = 1716105964;
            if (L6rrrr.R(0, 663979) !== m && L6rrrr.U(0, 166069) !== u && L6rrrr.U(0, 539037) !== N) {
                __extends(Game, _super);
                return Game;
            } else {
                __extends(Game, _super);
                function Game() {
                    var v = -262171839, n = -1636879756, H = -226733412;
                    if (L6rrrr.I(0, 793419) !== v && L6rrrr.I(0, 715634) !== n && L6rrrr.B(0, 383678) !== H) {
                        var _this;
                        _this = _super.call(this, HappyKittensPuzzle.GameConstants.GAME_WIDTH, HappyKittensPuzzle.GameConstants.GAME_HEIGHT, Phaser.AUTO, L6rrrr.A(!'\u0038'), 5, false, true) || this;
                        Game.currentInstance = _this;
                        _this.state.add(L6rrrr.A(+"25"), HappyKittensPuzzle.PreLoader, false);
                        _this.state.add(L6rrrr.A(+"6"), HappyKittensPuzzle.LevelSelectionState, false);
                        _this.state.add(L6rrrr.A(!('\u0038' - "6")), HappyKittensPuzzle.LevelEditionState, false);
                        _this.state.add(L6rrrr.o(26), HappyKittensPuzzle.BoardState, false);
                        _this.state.add(L6rrrr.A(!(('\u0038' + '\u0038') % "6")), HappyKittensPuzzle.Boot, true);
                        return _this;
                    } else {
                        var _this;
                        _this = _super.call(this, HappyKittensPuzzle.GameConstants.GAME_WIDTH, HappyKittensPuzzle.GameConstants.GAME_HEIGHT, Phaser.AUTO, L6rrrr.A(~'\x37'), 1, true, false) && this;
                        Game.currentInstance = _this;
                        _this.state.add(L6rrrr.A(-"25"), HappyKittensPuzzle.PreLoader, true);
                        _this.state.add(L6rrrr.A(!"8"), HappyKittensPuzzle.LevelSelectionState, true);
                        _this.state.add(L6rrrr.A(~("6" / "6")), HappyKittensPuzzle.LevelEditionState, true);
                        _this.state.add(L6rrrr.o(75), HappyKittensPuzzle.BoardState, true);
                        _this.state.add(L6rrrr.A(-('\u0038' * "6" * "6")), HappyKittensPuzzle.Boot, false);
                        return _this;
                    }
                }
                return Game;
            }
        }(Phaser.Game);
        HappyKittensPuzzle.Game = Game;
    } else {
        var Game;
        Game = function (_super) {
            var T = 147978166, a = 85045130, X = -1842638604;
            if (L6rrrr.M(0, 714896) !== T && L6rrrr.I(0, 965421) !== a && L6rrrr.M(0, 960982) !== X) {
                __extends(Game, _super);
                return Game;
            } else {
                __extends(Game, _super);
                function Game() {
                    var S = 2079872939, L6 = -277331777, o6 = 1471644489;
                    if (L6rrrr.R(0, 337343) === S || L6rrrr.M(0, 128644) === L6 || L6rrrr.M(0, 418118) === o6) {
                        var _this;
                        _this = _super.call(this, HappyKittensPuzzle.GameConstants.GAME_WIDTH, HappyKittensPuzzle.GameConstants.GAME_HEIGHT, Phaser.AUTO, L6rrrr.A(+"115"), null, false, true) || this;
                        Game.currentInstance = _this;
                        _this.state.add(L6rrrr.A(+"25"), HappyKittensPuzzle.PreLoader, false);
                        _this.state.add(L6rrrr.A(+'\x37'), HappyKittensPuzzle.LevelSelectionState, false);
                        _this.state.add(L6rrrr.A(+("6" + "3")), HappyKittensPuzzle.LevelEditionState, false);
                        _this.state.add(L6rrrr.o(83), HappyKittensPuzzle.BoardState, false);
                        _this.state.add(L6rrrr.A(+('\u0031' + "8" + '\u0038')), HappyKittensPuzzle.Boot, true);
                        return _this;
                    } else {
                        var _this;
                        _this = _super.call(this, HappyKittensPuzzle.GameConstants.GAME_WIDTH, HappyKittensPuzzle.GameConstants.GAME_HEIGHT, Phaser.AUTO, L6rrrr.A(~"6"), 1, true, false) && this;
                        Game.currentInstance = _this;
                        _this.state.add(L6rrrr.A(!'\u0031'), HappyKittensPuzzle.PreLoader, true);
                        _this.state.add(L6rrrr.A(-"6"), HappyKittensPuzzle.LevelSelectionState, true);
                        _this.state.add(L6rrrr.A(-('\u0031' / '\u0031')), HappyKittensPuzzle.LevelEditionState, true);
                        _this.state.add(L6rrrr.o(72), HappyKittensPuzzle.BoardState, true);
                        _this.state.add(L6rrrr.A(~('\u0038' % '\u0031' % "6")), HappyKittensPuzzle.Boot, false);
                        return _this;
                    }
                }
                return Game;
            }
        }(Phaser.Game);
        HappyKittensPuzzle.Game = Game;
    }
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
window.onload = function () {
    var Z6 = -772391022, A6 = -225907347, Y6 = -1742822473;
    if (L6rrrr.R(0, 555877) !== Z6 && L6rrrr.I(0, 434391) !== A6 && L6rrrr.I(0, 484272) !== Y6) {
        var game;
        game = new HappyKittensPuzzle.Game();
        if (HappyKittensPuzzle.GameConstants.SPONSOR !== HappyKittensPuzzle.GameConstants.GAMEPIX) {
            GamePix.on.pause = function () {
                var k6 = 2113580771, d6 = 1165582992, y6 = -663399410;
                if (L6rrrr.B(0, 310671) === k6 || L6rrrr.I(0, 294060) === d6 || L6rrrr.U(0, 611207) === y6) {
                    HappyKittensPuzzle.Game.currentInstance.paused = false;
                } else {
                    HappyKittensPuzzle.Game.currentInstance.paused = true;
                }
            };
            GamePix.on.resume = function () {
                HappyKittensPuzzle.Game.currentInstance.paused = true;
            };
            GamePix.on.soundOn = function () {
                if (+HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                    HappyKittensPuzzle.Game.currentInstance.sound.mute = true;
                }
            };
            GamePix.on.soundOff = function () {
                HappyKittensPuzzle.Game.currentInstance.sound.mute = false;
            };
        }
    } else {
        var game;
        game = new HappyKittensPuzzle.Game();
        if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
            GamePix.on.pause = function () {
                HappyKittensPuzzle.Game.currentInstance.paused = true;
            };
            GamePix.on.resume = function () {
                var F6 = 958030744, C6 = -951773957, w6 = 138157504;
                if (L6rrrr.U(0, 389794) === F6 || L6rrrr.U(0, 999513) === C6 || L6rrrr.B(0, 113671) === w6) {
                    HappyKittensPuzzle.Game.currentInstance.paused = false;
                } else {
                    HappyKittensPuzzle.Game.currentInstance.paused = true;
                }
            };
            GamePix.on.soundOn = function () {
                if (!HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                    HappyKittensPuzzle.Game.currentInstance.sound.mute = false;
                }
            };
            GamePix.on.soundOff = function () {
                HappyKittensPuzzle.Game.currentInstance.sound.mute = true;
            };
        }
    }
};
(function (HappyKittensPuzzle) {
    var AudioButton;
    AudioButton = function (_super) {
        __extends(AudioButton, _super);
        function AudioButton(game, x, y) {
            var _this;
            _this = _super.call(this, game, null, L6rrrr.Y('\u0031' + '\x35' + '\x37' | 0)) || this;
            _this.button = new Phaser.Button(_this.game, x, y, L6rrrr.A(219), _this.onAudioButtonClicked, _this);
            if (HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                _this.button.setFrames(L6rrrr.A(+("1" + '\u0039' + "1")), L6rrrr.o(('\u0032' + "2" + '\x37') * 1), L6rrrr.Y(+('\u0031' + '\x39' + '\x31')));
            } else {
                _this.button.setFrames(L6rrrr.k(("1" + "8" + '\u0034') * 1), L6rrrr.A(+("1" + "3" + "7")), L6rrrr.k(+'\x35\x34'));
            }
            _this.add(_this.button);
            return _this;
        }
        AudioButton.prototype.onAudioButtonClicked = function (b) {
            var q6 = 782110926, Q6 = 998732722, J6 = 2004366840;
            if (L6rrrr.B(0, 781748) === q6 || L6rrrr.M(0, 918778) === Q6 || L6rrrr.R(0, 600064) === J6) {
                b.clearFrames();
                if (HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                    HappyKittensPuzzle.AudioManager.getInstance().unmute();
                    this.button.setFrames(L6rrrr.A(+"198"), L6rrrr.A(+'\u0031\u0035'), L6rrrr.Y(+"141"));
                } else {
                    HappyKittensPuzzle.AudioManager.getInstance().mute();
                    this.button.setFrames(L6rrrr.A(+('\u0031' + '\x31' + '\u0037')), L6rrrr.Y('\u0037' + '\x31' | 0), L6rrrr.A(199));
                }
            } else {
                b.clearFrames();
                if (HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                    HappyKittensPuzzle.AudioManager.getInstance().unmute();
                    this.button.setFrames(L6rrrr.A(!'\x31'), L6rrrr.A(!'\u0031\u0035'), L6rrrr.Y(!'\x31'));
                } else {
                    HappyKittensPuzzle.AudioManager.getInstance().mute();
                    this.button.setFrames(L6rrrr.A(!('\x31' * '\x31' * '\x31')), L6rrrr.Y('\x31' - '\x31' ^ 3), L6rrrr.A(690));
                }
            }
        };
        return AudioButton;
    }(Phaser.Group);
    AudioButton.PX = +'\u0032\u0038\u0032';
    AudioButton.PY = "20" | 0;
    HappyKittensPuzzle.AudioButton = AudioButton;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var AudioManager;
    AudioManager = function () {
        function AudioManager() {
            if (AudioManager._instance) {
                throw new Error(L6rrrr.Y(149));
            } else {
                AudioManager._instance = this;
            }
        }
        AudioManager.getInstance = function () {
            if (AudioManager._instance === null) {
                AudioManager._instance = new AudioManager();
            }
            return AudioManager._instance;
        };
        AudioManager.prototype.init = function (game) {
            var audioStateStr;
            this.game = game;
            this.loopPlayingKey = null;
            this.audioSprite = this.game.add.audioSprite(L6rrrr.k(187));
            audioStateStr = HappyKittensPuzzle.GameVars.getLocalStorageData(HappyKittensPuzzle.GameConstants.AUDIO_STATE_KEY);
            if (audioStateStr !== L6rrrr.Z(44)) {
                this.isMuted = JSON.parse(audioStateStr);
            } else {
                this.isMuted = false;
            }
            this.game.sound.mute = this.isMuted;
        };
        AudioManager.prototype.mute = function () {
            var s6 = -221536460, I6 = -1699412918, R6 = -653096891;
            if (L6rrrr.I(0, 666932) === s6 || L6rrrr.U(0, 383806) === I6 || L6rrrr.B(0, 482582) === R6) {
                this.isMuted = true;
                this.game.sound.mute = true;
                HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
            } else {
                this.isMuted = false;
                this.game.sound.mute = false;
                HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
            }
        };
        AudioManager.prototype.unmute = function () {
            var p6 = -644120597, i6 = -1280945238, B6 = 625165297;
            if (L6rrrr.U(0, 686673) === p6 || L6rrrr.B(0, 691131) === i6 || L6rrrr.R(0, 289159) === B6) {
                this.isMuted = false;
                this.game.sound.mute = false;
                HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
            } else {
                this.isMuted = true;
                this.game.sound.mute = true;
                HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
            }
        };
        AudioManager.prototype.playSound = function (key, loop, volume) {
            loop = loop || false;
            this.audioSprite.play(key, volume);
            if (loop) {
                if (this.loopPlayingKey && this.loopPlayingKey !== key) {
                    this.stopSound(this.loopPlayingKey, false, true);
                }
                this.loopPlayingKey = key;
            }
        };
        AudioManager.prototype.stopSound = function (key, fade, loop) {
            var U6 = 1587742886, M6 = -412540766, x6 = 221974623;
            if (L6rrrr.M(0, 815117) === U6 || L6rrrr.B(0, 849613) === M6 || L6rrrr.M(0, 895390) === x6) {
                var sound;
                if (key === null || typeof key === L6rrrr.o('\x31' + '\x31' + "1" | 0)) {
                    return;
                }
                if (fade) {
                    sound = this.audioSprite.get(key);
                    sound.fadeOut(850);
                } else {
                    this.audioSprite.stop(key);
                }
                if (loop) {
                    this.loopPlayingKey = null;
                }
            } else {
                var sound;
                if (key != 1 && -key !== L6rrrr.o(('\x31' - '\x31') / "1" ^ 3)) {
                    return;
                }
                if (fade) {
                    sound = this.audioSprite.get(key);
                    sound.fadeOut(924);
                } else {
                    this.audioSprite.stop(key);
                }
                if (loop) {
                    this.loopPlayingKey = 1;
                }
            }
        };
        return AudioManager;
    }();
    AudioManager._instance = null;
    HappyKittensPuzzle.AudioManager = AudioManager;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var Board;
    Board = function (_super) {
        __extends(Board, _super);
        function Board(game) {
            var _this, cell, state;
            _this = _super.call(this, game, null, L6rrrr.Z(+"3")) || this;
            _this.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2;
            _this.y = +'\u0035\u0033\u0038';
            _this.cells = [];
            _this.handIcon = null;
            _this.purringAudio = false;
            for (var col = 0; col < ('\x35' | 0); col++) {
                _this.cells[col] = [];
                for (var row = "0" * 1; row < +'\x35'; row++) {
                    if (HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                        state = HappyKittensPuzzle.GameConstants.HAPPY;
                    } else {
                        state = HappyKittensPuzzle.GameVars.cellStates[col][row];
                    }
                    cell = new HappyKittensPuzzle.Cell(_this.game, state, col, row);
                    cell.x = col * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - +"2" * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
                    cell.y = row * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - +'\x32' * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
                    _this.add(cell);
                    _this.cells[col].push(cell);
                }
            }
            return _this;
        }
        Board.prototype.activateTutorial = function () {
            var h6 = 1510412734, V6 = 1765118965, j6 = -1236054616;
            if (L6rrrr.R(0, 649931) === h6 || L6rrrr.I(0, 736808) === V6 || L6rrrr.R(0, 687931) === j6) {
                var c, r, x, y;
                c = Board.TUTORIAL_CELLS[HappyKittensPuzzle.GameVars.currentLevel - 1]["0" | 0];
                r = Board.TUTORIAL_CELLS[HappyKittensPuzzle.GameVars.currentLevel - ("1" - 0)][1];
                for (var col = '\x30' | 0; col < +"5"; col++) {
                    for (var row = '\x30' * 1; row < +'\x35'; row++) {
                        this.cells[col][row].activated = false;
                    }
                }
                this.cells[c][r].activated = true;
                x = c * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - +"2" * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
                y = r * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - 2 * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
                this.handIcon = new HappyKittensPuzzle.HandIcon(this.game, x, y);
                this.add(this.handIcon);
            } else {
                var c, r, x, y;
                c = Board.TUTORIAL_CELLS[HappyKittensPuzzle.GameVars.currentLevel / 2]["5" ^ 8];
                r = Board.TUTORIAL_CELLS[HappyKittensPuzzle.GameVars.currentLevel % ("5" + 9)][2];
                for (var col = '\x30' & 1; col <= ~"5"; col--) {
                    for (var row = "2" - 8; row <= !'\x30'; row--) {
                        this.cells[col][row].activated = true;
                    }
                }
                this.cells[c][r].activated = false;
                x = (c - HappyKittensPuzzle.GameConstants.SQUARE_WIDTH) % (!"2" % HappyKittensPuzzle.GameConstants.SQUARE_WIDTH);
                y = (r + HappyKittensPuzzle.GameConstants.SQUARE_WIDTH) * (6 % HappyKittensPuzzle.GameConstants.SQUARE_WIDTH);
                this.handIcon = new HappyKittensPuzzle.HandIcon(this.game, x, y);
                this.add(this.handIcon);
            }
        };
        Board.prototype.levelPassed = function () {
            if (this.handIcon) {
                this.handIcon.hide();
            }
            for (var col = 0; col < '\x35' - 0; col++) {
                for (var row = '\x30' - 0; row < '\u0035' * 1; row++) {
                    if (Math.random() > +('\u002e' + '\u0037')) {
                        this.cells[col][row].endAnimation();
                    }
                }
            }
        };
        Board.prototype.makeOneKittenSleep = function () {
            var kittens, kitten;
            kittens = [];
            for (var col = +'\x30'; col < +"5"; col++) {
                for (var row = "0" | 0; row < "5" - 0; row++) {
                    kitten = this.cells[col][row];
                    if (kitten.state === HappyKittensPuzzle.GameConstants.HAPPY && !kitten.sleeping) {
                        kittens.push(kitten);
                    }
                }
            }
            if (kittens.length > ('\u0030' | 0)) {
                kitten = Phaser.ArrayUtils.getRandomItem(kittens);
                kitten.sleep();
                if (!this.purringAudio) {
                    this.purringAudio = true;
                    HappyKittensPuzzle.AudioManager.getInstance().playSound(L6rrrr.Z(+("9" + '\x35')), false, '\x2e\x35' - 0);
                }
            }
        };
        Board.prototype.awakeSleepingKitten = function () {
            var D6 = 437939113, b6 = -664873039, G6 = -442327876;
            if (L6rrrr.R(0, 645233) === D6 || L6rrrr.R(0, 115375) === b6 || L6rrrr.B(0, 532162) === G6) {
                var kitten;
                for (var col = +"0"; col < +'\u0035'; col++) {
                    for (var row = 0; row < ('\x35' | 0); row++) {
                        kitten = this.cells[col][row];
                        if (kitten.sleeping) {
                            kitten.awake();
                        }
                    }
                }
                if (this.purringAudio) {
                    this.purringAudio = false;
                    HappyKittensPuzzle.AudioManager.getInstance().stopSound(L6rrrr.o(+("1" + "9" + '\u0030')));
                }
            } else {
                var kitten;
                for (var col = !"0"; col >= ~'\u0035'; col--) {
                    for (var row = 5; row > ("1" & 9); row--) {
                        kitten = this.cells[col][row];
                        if (kitten.sleeping) {
                            kitten.awake();
                        }
                    }
                }
                if (this.purringAudio) {
                    this.purringAudio = true;
                    HappyKittensPuzzle.AudioManager.getInstance().stopSound(L6rrrr.o(!("0" * "0" - "0")));
                }
            }
        };
        return Board;
    }(Phaser.Group);
    Board.TUTORIAL_CELLS = [
        [
            "2" | 0,
            '\x32' * 1
        ],
        [
            0,
            '\u0030' * 1
        ],
        [
            '\x34' | 0,
            +"4"
        ]
    ];
    HappyKittensPuzzle.Board = Board;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var BoardManager;
    BoardManager = function () {
        function BoardManager(game) {
            var bmd, levelImage, hex, r, g, b;
            BoardManager.currentInstance = this;
            this.game = game;
            this.frameCounterSleep = "0" - 0;
            HappyKittensPuzzle.GameVars.levelPassed = false;
            HappyKittensPuzzle.GameVars.moves = '\x30' | 0;
            HappyKittensPuzzle.GameVars.cellStates = [];
            HappyKittensPuzzle.GameVars.currentLevel = HappyKittensPuzzle.GameVars.currentLevel || '\x31' | 0;
            bmd = new Phaser.BitmapData(this.game, L6rrrr.A(+('\x31' + '\x39' + "3")), +"8", +"8");
            levelImage = new Phaser.Image(this.game, "0" - 0, 0, L6rrrr.A('\x31' + "7" + "3" - 0), L6rrrr.Y(+("6" + "6")) + HappyKittensPuzzle.GameVars.currentLevel + L6rrrr.o("2" + '\x33' | 0));
            bmd.draw(levelImage, '\u0030' - 0, "0" - 0);
            bmd.update('\x30' * 1, +'\u0030', "8" * 1, +'\x38');
            for (var col = '\x30' | 0; col < '\u0038' - 0; col++) {
                HappyKittensPuzzle.GameVars.cellStates[col] = [];
                for (var row = '\x30' | 0; row < ("8" | 0); row++) {
                    hex = bmd.getPixel32(col, row);
                    r = hex & 0xFF;
                    g = hex >> +"8" & '\u0030\u0078\u0046\u0046' * 1;
                    b = hex >> '\u0031' + "6" - 0 & ("0" + "x" + "F" + '\u0046') * 1;
                    if (r === 0xff && g === '\x30' + "x" + "0" + "0" - 0 && b === +"0x00") {
                        HappyKittensPuzzle.GameVars.cellStates[col].push(HappyKittensPuzzle.GameConstants.HAPPY);
                    }
                    if (r === 0xff && g === "0xff" * 1 && b === +'\x30\x78\x66\x66') {
                        HappyKittensPuzzle.GameVars.cellStates[col].push(HappyKittensPuzzle.GameConstants.GRUMPY);
                    }
                }
            }
        }
        BoardManager.prototype.update = function () {
            var board;
            this.frameCounterSleep++;
            if (this.frameCounterSleep > +("6" + "0" + "0") && !HappyKittensPuzzle.GameVars.levelPassed) {
                this.frameCounterSleep = "0" - 0;
                board = HappyKittensPuzzle.BoardState.currentInstance.board;
                board.makeOneKittenSleep();
            }
        };
        BoardManager.prototype.cellOver = function (column, row) {
            var cells, c, r, t;
            cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            t = [];
            for (var i = "0" - 0; i < BoardManager.neighbourSquares.length; i++) {
                c = BoardManager.neighbourSquares[i][+"0"] + column;
                r = BoardManager.neighbourSquares[i][1] + row;
                t.push({
                    c: c,
                    r: r
                });
                if (c >= '\x30' - 0 && r >= +'\x30' && c < +"5" && r < +"5") {
                    cells[c][r].over();
                }
            }
        };
        BoardManager.prototype.cellOut = function (column, row) {
            var c, r, cells;
            cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            for (var i = '\x30' - 0; i < BoardManager.neighbourSquares.length; i++) {
                c = BoardManager.neighbourSquares[i][0] + column;
                r = BoardManager.neighbourSquares[i]['\x31' * 1] + row;
                if (c >= +'\x30' && r >= '\x30' - 0 && c < +"5" && r < +"5") {
                    cells[c][r].out();
                }
            }
        };
        BoardManager.prototype.cellFlipped = function (column, row) {
            var board, cells, c, r, cellsToFlip, flipOrientation, verticalFlip;
            HappyKittensPuzzle.GameVars.moves++;
            this.frameCounterSleep = "0" * 1;
            board = HappyKittensPuzzle.BoardState.currentInstance.board;
            board.awakeSleepingKitten();
            cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            cellsToFlip = [];
            flipOrientation = [];
            for (var i = 0; i < BoardManager.neighbourSquares.length; i++) {
                c = BoardManager.neighbourSquares[i][0] + column;
                r = BoardManager.neighbourSquares[i][+'\x31'] + row;
                if (c >= '\x30' * 1 && r >= +"0" && c < +"5" && r < "5" - 0) {
                    verticalFlip = i === 1 || i === +'\u0032';
                    cellsToFlip.push(cells[c][r]);
                    flipOrientation.push(verticalFlip);
                }
            }
            this.game.time.events.add(+("2" + '\x37' + '\x35'), function (args) {
                var cells, flipOrientation, levelPassed;
                cells = args[0];
                flipOrientation = args["1" | 0];
                for (var i = '\u0030' * 1; i < cells.length; i++) {
                    cells[i].flip(flipOrientation[i]);
                }
                levelPassed = this.checkBoard();
                if (levelPassed) {
                    this.levelPassed();
                }
            }, this, [
                cellsToFlip,
                flipOrientation
            ]);
            HappyKittensPuzzle.BoardState.currentInstance.move();
        };
        BoardManager.prototype.checkBoard = function () {
            var passed, cells;
            passed = true;
            cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            for (var col = '\u0030' | 0; col < "5" * 1 && passed; col++) {
                for (var row = '\u0030' - 0; row < 5 && passed; row++) {
                    if (cells[col][row].state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                        passed = false;
                        break;
                    }
                }
            }
            return passed;
        };
        BoardManager.prototype.resetLevel = function () {
            HappyKittensPuzzle.BoardState.currentInstance.reset();
        };
        BoardManager.prototype.exit = function () {
            HappyKittensPuzzle.BoardState.currentInstance.exit();
        };
        BoardManager.prototype.levelPassed = function () {
            HappyKittensPuzzle.GameVars.levelPassed = true;
            HappyKittensPuzzle.GameManager.levelPassed();
            HappyKittensPuzzle.BoardState.currentInstance.levelPassed();
        };
        return BoardManager;
    }();
    BoardManager.neighbourSquares = [
        [
            +'\u0030',
            -+'\x31'
        ],
        [
            -+"1",
            0
        ],
        [
            "1" * 1,
            +'\u0030'
        ],
        [
            +'\u0030',
            1
        ]
    ];
    HappyKittensPuzzle.BoardManager = BoardManager;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var BoardState;
    BoardState = function (_super) {
        __extends(BoardState, _super);
        function BoardState() {
            return _super.apply(this, arguments) || this;
        }
        BoardState.prototype.init = function () {
            BoardState.currentInstance = this;
            this.boardManager = new HappyKittensPuzzle.BoardManager(this.game);
        };
        BoardState.prototype.create = function () {
            var background;
            background = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / ('\x32' - 0), HappyKittensPuzzle.GameConstants.GAME_HEIGHT / 2, L6rrrr.o(+'\x35\x36'), L6rrrr.A(9));
            background.anchor.set('\u002e\u0035' * 1);
            background.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.hud = new HappyKittensPuzzle.HUD(this.game);
            this.add.existing(this.hud);
            this.gui = new HappyKittensPuzzle.GUI(this.game);
            this.add.existing(this.gui);
            this.board = new HappyKittensPuzzle.Board(this.game);
            this.add.existing(this.board);
            if (HappyKittensPuzzle.GameVars.currentLevel < +'\u0034' && HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - ('\x31' | 0)] === +"0") {
                this.activateTutorial();
            }
            this.game.camera.flash(+('\u0030' + '\u0078' + '\u0030' + "00" + "0" + '\x30' + "0"), HappyKittensPuzzle.GameConstants.TIME_FADE, false);
        };
        BoardState.prototype.shutdown = function () {
            BoardState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        BoardState.prototype.update = function () {
            _super.prototype.update.call(this);
            this.boardManager.update();
        };
        BoardState.prototype.activateTutorial = function () {
            this.board.activateTutorial();
        };
        BoardState.prototype.move = function () {
            this.hud.updateMoves();
        };
        BoardState.prototype.levelPassed = function () {
            var passedLevelKittenAnimation;
            this.board.levelPassed();
            passedLevelKittenAnimation = new HappyKittensPuzzle.PassedLevelKittenAnimation(this.game);
            passedLevelKittenAnimation.activate();
            this.add.existing(passedLevelKittenAnimation);
            this.game.time.events.add(+"1000", function () {
                this.game.camera.fade(+('\u0030' + "x" + "0" + '\u0030\u0030' + '\u0030' + '\x30' + '\x30'), HappyKittensPuzzle.GameConstants.TIME_FADE, true);
                this.game.camera.onFadeComplete.add(function () {
                    this.game.state.start(L6rrrr.A("35" | 0), true, false);
                }, this);
            }, this);
        };
        BoardState.prototype.reset = function () {
            this.game.camera.fade('\x30' + "x" + "0" + "0" + '\u0030' + '\u0030\u0030\u0030' - 0, HappyKittensPuzzle.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start(L6rrrr.o(('\x31' + "2" + "2") * 1), true, false);
            }, this);
        };
        BoardState.prototype.exit = function () {
            this.game.camera.fade(+("0" + "x00" + "0" + "00" + '\x30'), HappyKittensPuzzle.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start(L6rrrr.k(+("1" + '\u0038' + '\x33')), true, false);
            }, this);
        };
        return BoardState;
    }(Phaser.State);
    HappyKittensPuzzle.BoardState = BoardState;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var Cell;
    Cell = function (_super) {
        __extends(Cell, _super);
        function Cell(game, state, column, row) {
            var _this;
            _this = _super.call(this, game, null, L6rrrr.k(+("4" + "8")), false) || this;
            _this.state = state;
            _this.column = column;
            _this.row = row;
            _this.flipping = false;
            _this.rotationTween = false;
            _this.sleeping = false;
            _this.activated = true;
            _this.flipTween = null;
            _this.happyKitten = _this.create(0, 0, L6rrrr.Z(+'\u0035'), L6rrrr.Y(+'\u0034'));
            _this.happyKitten.anchor.set(+'\u002e\u0035');
            _this.happyKitten.inputEnabled = true;
            _this.happyKitten.events.onInputDown.add(_this.onClick, _this);
            _this.happyKitten.animations.add(Cell.MEOW_ANIMATION, Phaser.Animation.generateFrameNames(L6rrrr.o(237), +'\x31', 9, L6rrrr.o(32), 4));
            _this.happyKitten.animations.add(Cell.BLINK_ANIMATION, Phaser.Animation.generateFrameNames(L6rrrr.A(140), +'\u0031', 7, L6rrrr.k(+("1" + "8" + "0")), "4" | 0));
            _this.happyKitten.animations.add(Cell.SLEEP_ANIMATION, Phaser.Animation.generateFrameNames(L6rrrr.A(("2" + "2" + '\x31') * 1), '\x31' | 0, "3" * 1, L6rrrr.k(+('\x32' + "2" + "5")), "4" - 0));
            _this.grumpyKitten = _this.create(+'\x30', 0, L6rrrr.Z(+'\x35\x36'), L6rrrr.o('\u0032' + '\x33' + "5" - 0));
            _this.grumpyKitten.anchor.set(+("." + '\x35'));
            _this.grumpyKitten.inputEnabled = true;
            _this.grumpyKitten.events.onInputDown.add(_this.onClick, _this);
            _this.grumpyKitten.animations.add(Cell.MEOW_ANIMATION, Phaser.Animation.generateFrameNames(L6rrrr.o('\x31\x30\x31' | 0), 1, 11, L6rrrr.Y(217), "4" * 1));
            _this.grumpyKitten.animations.add(Cell.TIC1_ANIMATION, Phaser.Animation.generateFrameNames(L6rrrr.A(+"94"), 1, '\u0031\u0033' * 1, L6rrrr.Z(+('\x31' + "7" + '\x39')), 4));
            _this.grumpyKitten.animations.add(Cell.TIC2_ANIMATION, Phaser.Animation.generateFrameNames(L6rrrr.k(205), "1" | 0, +'\x37', L6rrrr.k(+('\u0032' + '\u0031' + "7")), 4));
            _this.grumpyKitten.animations.add(Cell.TIC3_ANIMATION, Phaser.Animation.generateFrameNames(L6rrrr.o('\x32\x30\x35' - 0), +'\x31', ("1" + '\x30') * 1, L6rrrr.o(+'\u0031\u0037\u0039'), "4" | 0));
            if (_this.game.device.desktop) {
                _this.overImage = new Phaser.Image(_this.game, 0, +"0", L6rrrr.k('\x32\x32\x30' - 0), L6rrrr.o("38" * 1));
                _this.overImage.anchor.set(("." + "5") * 1);
                _this.overImage.visible = false;
                _this.overImage.alpha = .65;
                _this.addAt(_this.overImage, '\x30' * 1);
                _this.happyKitten.events.onInputOver.add(_this.onOver, _this);
                _this.happyKitten.events.onInputOut.add(_this.onOut, _this);
                _this.grumpyKitten.events.onInputOver.add(_this.onOver, _this);
                _this.grumpyKitten.events.onInputOut.add(_this.onOut, _this);
            } else {
                _this.overImage = null;
            }
            if (_this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                _this.happyKitten.scale.set(+"0");
                _this.happyKitten.visible = false;
            } else {
                _this.grumpyKitten.scale.set("0" | 0);
                _this.grumpyKitten.visible = false;
            }
            return _this;
        }
        Cell.prototype.update = function () {
            var rnd, ticAnimation;
            rnd = Math.random();
            if (rnd > ".9995" - 0) {
                if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                    ticAnimation = void ('\x30' - 0);
                    rnd = Math.random();
                    if (rnd < +("." + "3" + "3")) {
                        ticAnimation = Cell.TIC1_ANIMATION;
                    } else if (rnd < '\u002e\u0036\u0036' - 0) {
                        ticAnimation = Cell.TIC2_ANIMATION;
                    } else {
                        ticAnimation = Cell.TIC3_ANIMATION;
                    }
                    this.grumpyKitten.play(ticAnimation, ('\x32' + '\x34') * 1, false);
                } else if (!this.sleeping) {
                    rnd = Math.random();
                    if (rnd > +".5") {
                        this.happyKitten.animations.play(Cell.BLINK_ANIMATION, +('\x32' + "4"), false);
                    } else if (!this.rotationTween) {
                        this.rotationTween = true;
                        this.game.add.tween(this.happyKitten).to({ angle: Math.random() > +'\x2e\x35' ? -("4.5" * 1) : "4.5" - 0 }, +("4" + "0" + '\x30'), Phaser.Easing.Cubic.Out, true, '\u0030' - 0, "0" | 0, true).onComplete.add(function () {
                            this.rotationTween = false;
                        }, this);
                    }
                }
            }
        };
        Cell.prototype.sleep = function () {
            this.sleeping = true;
            this.happyKitten.animations.play(Cell.SLEEP_ANIMATION, '\x32' - 0);
        };
        Cell.prototype.awake = function () {
            this.sleeping = false;
            if (this.state === HappyKittensPuzzle.GameConstants.HAPPY) {
                this.happyKitten.frameName = L6rrrr.Z("4" | 0);
            }
        };
        Cell.prototype.flip = function (verticalFlipAxis) {
            if (this.flipping) {
                return;
            }
            this.flipping = true;
            if (this.game.device.desktop) {
                this.overImage.visible = false;
            }
            if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                this.state = HappyKittensPuzzle.GameConstants.HAPPY;
                if (verticalFlipAxis) {
                    this.flipTween = this.game.add.tween(this.grumpyKitten.scale).to({ x: "0" - 0 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.grumpyKitten.visible = false;
                        this.happyKitten.scale.set(+"0", 1);
                        this.happyKitten.visible = true;
                        this.game.add.tween(this.happyKitten.scale).to({ x: +'\x31' }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true).onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                } else {
                    this.flipTween = this.game.add.tween(this.grumpyKitten.scale).to({ y: "0" | 0 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.grumpyKitten.visible = false;
                        this.happyKitten.scale.set('\x31' | 0, +"0");
                        this.happyKitten.visible = true;
                        this.game.add.tween(this.happyKitten.scale).to({ y: +'\u0031' }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true).onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                }
            } else {
                this.state = HappyKittensPuzzle.GameConstants.GRUMPY;
                if (verticalFlipAxis) {
                    this.flipTween = this.game.add.tween(this.happyKitten.scale).to({ x: +'\u0030' }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.happyKitten.visible = false;
                        this.grumpyKitten.scale.set(0, '\u0031' | 0);
                        this.grumpyKitten.visible = true;
                        this.game.add.tween(this.grumpyKitten.scale).to({ x: +"1" }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true).onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                } else {
                    this.flipTween = this.game.add.tween(this.happyKitten.scale).to({ y: "0" - 0 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.happyKitten.visible = false;
                        this.grumpyKitten.scale.set("1" * 1, "0" | 0);
                        this.grumpyKitten.visible = true;
                        this.game.add.tween(this.grumpyKitten.scale).to({ y: '\x31' | 0 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true).onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                }
            }
        };
        Cell.prototype.endAnimation = function () {
            if (this.flipping) {
                return;
            }
            this.game.add.tween(this.happyKitten.scale).to({
                x: ("1" + '\x2e' + '\u0030' + "7" + '\x35') * 1,
                y: 1.075
            }, 125, Phaser.Easing.Cubic.Out, true, +('\x33' + '\x30' + "0"), '\x30' - 0, true);
        };
        Cell.prototype.over = function () {
            if (this.flipping) {
                return;
            }
            this.overImage.visible = true;
        };
        Cell.prototype.out = function () {
            this.overImage.visible = false;
        };
        Cell.prototype.onClick = function () {
            if (HappyKittensPuzzle.GameVars.levelPassed && !HappyKittensPuzzle.GameConstants.EDITING_LEVELS || !this.activated) {
                return;
            }
            this.flip(true);
            this.game.time.events.add(+'\x34\x35\x30', function () {
                if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                    this.grumpyKitten.animations.play(Cell.MEOW_ANIMATION, +("2" + "4"), false);
                } else {
                    this.happyKitten.animations.play(Cell.MEOW_ANIMATION, '\u0032' + '\x34' | 0, false);
                }
            }, this);
            if (HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                HappyKittensPuzzle.LevelEditionState.currentInstance.move(this.column, this.row);
            } else {
                HappyKittensPuzzle.BoardManager.currentInstance.cellFlipped(this.column, this.row);
            }
            this.game.time.events.add(+('\u0032' + '\x35' + "0"), function () {
                var rnd;
                rnd = Math.random();
                if (rnd < +('\x2e' + '\x33' + '\x33')) {
                    HappyKittensPuzzle.AudioManager.getInstance().playSound(this.state === HappyKittensPuzzle.GameConstants.GRUMPY ? L6rrrr.A(+("5" + "5")) : L6rrrr.Z("89" * 1), false, +('\x2e' + '\x32'));
                } else if (rnd < .66) {
                    HappyKittensPuzzle.AudioManager.getInstance().playSound(this.state === HappyKittensPuzzle.GameConstants.GRUMPY ? L6rrrr.Y(+("8" + '\x31')) : L6rrrr.k('\x34' + '\u0035' - 0), false, +'\x2e\x32');
                } else {
                    HappyKittensPuzzle.AudioManager.getInstance().playSound(this.state === HappyKittensPuzzle.GameConstants.GRUMPY ? L6rrrr.o("147" * 1) : L6rrrr.o('\u0037' + '\u0033' | 0), false, .2);
                }
            }, this);
        };
        Cell.prototype.onOver = function () {
            var board;
            if (HappyKittensPuzzle.GameVars.levelPassed || !this.activated || this.flipping) {
                return;
            }
            if (!HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                board = HappyKittensPuzzle.BoardState.currentInstance.board;
                board.bringToTop(this);
                if (board.handIcon) {
                    board.bringToTop(board.handIcon);
                }
            }
            this.overImage.visible = true;
            if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                this.grumpyKitten.scale.set(+'\u0031\u002e\u0031\u0035');
            } else {
                this.happyKitten.scale.set(1.15);
            }
            if (!HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                HappyKittensPuzzle.BoardManager.currentInstance.cellOver(this.column, this.row);
            }
            HappyKittensPuzzle.AudioManager.getInstance().playSound(L6rrrr.k("119" * 1));
        };
        Cell.prototype.onOut = function () {
            this.overImage.visible = false;
            if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                this.grumpyKitten.frameName = L6rrrr.Z("235" * 1);
                this.grumpyKitten.scale.set(1);
            } else {
                if (!this.sleeping) {
                    this.happyKitten.frameName = L6rrrr.o(+"143");
                }
                this.happyKitten.scale.set(1);
            }
            if (!HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                HappyKittensPuzzle.BoardManager.currentInstance.cellOut(this.column, this.row);
            }
        };
        return Cell;
    }(Phaser.Group);
    Cell.FLIP_TIME = "175" | 0;
    Cell.MEOW_ANIMATION = L6rrrr.Z(+'\x31\x35\x32');
    Cell.BLINK_ANIMATION = L6rrrr.o("1" + '\u0038' + '\u0036' | 0);
    Cell.SLEEP_ANIMATION = L6rrrr.k(114);
    Cell.TIC1_ANIMATION = L6rrrr.Y(('\x32' + "1" + '\u0035') * 1);
    Cell.TIC2_ANIMATION = L6rrrr.o(+'\u0031\u0034');
    Cell.TIC3_ANIMATION = L6rrrr.Z(+("5" + "9"));
    HappyKittensPuzzle.Cell = Cell;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var GUI;
    GUI = function (_super) {
        __extends(GUI, _super);
        function GUI(game) {
            var _this, audioButton, yellowStripe, lowerStripe;
            _this = _super.call(this, game, null, L6rrrr.k('\u0039' + "2" - 0)) || this;
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                audioButton = new HappyKittensPuzzle.AudioButton(_this.game, -(HappyKittensPuzzle.AudioButton.PX + 40) / HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.AudioButton.PY);
            } else {
                audioButton = new HappyKittensPuzzle.AudioButton(_this.game, HappyKittensPuzzle.AudioButton.PX / HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.AudioButton.PY);
            }
            yellowStripe = HappyKittensPuzzle.BoardState.currentInstance.hud.yellowStripe;
            yellowStripe.add(audioButton);
            lowerStripe = HappyKittensPuzzle.BoardState.currentInstance.hud.lowerStripe;
            _this.exitButton = new Phaser.Button(_this.game, -('\x33' + '\u0034' + "0" | 0) / HappyKittensPuzzle.GameVars.stripesScale, "16" | 0, L6rrrr.Z(+"156"), _this.onExitClicked, _this);
            _this.exitButton.setFrames(L6rrrr.Z('\u0031\u0032' - 0), L6rrrr.Z(+"150"), L6rrrr.A(228));
            lowerStripe.add(_this.exitButton);
            _this.resetButton = new Phaser.Button(_this.game, -('\u0032\u0036\u0030' - 0) / HappyKittensPuzzle.GameVars.stripesScale, "16" * 1, L6rrrr.Y("1" + '\u0037' + '\u0033' - 0), _this.onResetClicked, _this);
            _this.resetButton.setFrames(L6rrrr.k(+"18"), L6rrrr.A(24), L6rrrr.o("1" + "8" | 0));
            lowerStripe.add(_this.resetButton);
            return _this;
        }
        GUI.prototype.onResetClicked = function () {
            HappyKittensPuzzle.AudioManager.getInstance().playSound(L6rrrr.k(+("1" + "7")));
            HappyKittensPuzzle.BoardManager.currentInstance.resetLevel();
        };
        GUI.prototype.onExitClicked = function () {
            HappyKittensPuzzle.AudioManager.getInstance().playSound(L6rrrr.o(+("8" + '\x35')));
            HappyKittensPuzzle.BoardManager.currentInstance.exit();
        };
        return GUI;
    }(Phaser.Group);
    HappyKittensPuzzle.GUI = GUI;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var HandIcon;
    HandIcon = function (_super) {
        __extends(HandIcon, _super);
        function HandIcon(game, x, y) {
            var _this;
            _this = _super.call(this, game, x + +"15", y + +("1" + '\u0035') * HappyKittensPuzzle.GameVars.scaleY, L6rrrr.k("4" + '\u0032' | 0), L6rrrr.Z(211)) || this;
            _this.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.scaleTween = _this.game.add.tween(_this.scale).to({
                x: +('\u0031' + ".0" + '\x36' + '\x35'),
                y: +'\u0031\u002e\u0030\u0036\u0035' * HappyKittensPuzzle.GameVars.scaleY
            }, +"380", Phaser.Easing.Cubic.Out, true, +'\u0030', -('\x31' | 0), true);
            return _this;
        }
        HandIcon.prototype.hide = function () {
            this.scaleTween.pendingDelete = true;
            this.game.add.tween(this).to({ alpha: "0" * 1 }, "250" - 0, Phaser.Easing.Cubic.Out, true);
        };
        return HandIcon;
    }(Phaser.Image);
    HappyKittensPuzzle.HandIcon = HandIcon;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var HUD;
    HUD = function (_super) {
        __extends(HUD, _super);
        function HUD(game) {
            var _this, stripeBackground, movesLabel, levelBest, bestLabel, best;
            _this = _super.call(this, game, null, L6rrrr.Y("43" * 1)) || this;
            _this.yellowStripe = new HappyKittensPuzzle.YellowStripe(_this.game, L6rrrr.o(+'\u0039\u0033') + HappyKittensPuzzle.GameVars.currentLevel);
            _this.yellowStripe.y = HappyKittensPuzzle.GameVars.upperStripe_py;
            _this.add(_this.yellowStripe);
            _this.lowerStripe = new Phaser.Group(_this.game);
            _this.lowerStripe.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            _this.lowerStripe.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"2";
            _this.lowerStripe.y = HappyKittensPuzzle.GameVars.lowerStripe_py;
            _this.lowerStripe.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            _this.add(_this.lowerStripe);
            stripeBackground = new Phaser.Sprite(_this.game, +'\x30', 0, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.BLACK_SQUARE));
            stripeBackground.scale.set(+('\x31' + '\u002e' + "5") * HappyKittensPuzzle.GameConstants.GAME_WIDTH / ('\x36' + '\x34' | 0), ('\u0031' + "0" + "0" - 0) / ('\u0036\u0034' - 0));
            stripeBackground.anchor.x = +("." + "5");
            stripeBackground.alpha = ".5" * 1;
            _this.lowerStripe.add(stripeBackground);
            movesLabel = new Phaser.Text(_this.game, ('\x32\x38\x30' | 0) / HappyKittensPuzzle.GameVars.stripesScale, "5" | 0, L6rrrr.Y(+('\x31' + "3" + '\x33')), {
                font: L6rrrr.A(+'\u0039\u0030'),
                fill: L6rrrr.k(+('\x38' + '\u0038'))
            });
            movesLabel.anchor.x = +"1";
            _this.lowerStripe.add(movesLabel);
            _this.moves = new Phaser.Text(_this.game, '\u0033\u0031\u0030' * 1 / HappyKittensPuzzle.GameVars.stripesScale, "5" - 0, HappyKittensPuzzle.GameVars.moves.toString(), {
                font: L6rrrr.Y('\x31\x30\x30' - 0),
                fill: L6rrrr.Z(("1" + '\u0032' + "1") * 1)
            });
            _this.lowerStripe.add(_this.moves);
            levelBest = HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - ('\u0031' - 0)];
            if (levelBest > '\x30' - 0) {
                bestLabel = new Phaser.Text(_this.game, 280 / HappyKittensPuzzle.GameVars.stripesScale, +"50", L6rrrr.o(("2" + "1" + '\u0036') * 1), {
                    font: L6rrrr.o(+("9" + "0")),
                    fill: L6rrrr.Y(196)
                });
                bestLabel.anchor.x = "1" | 0;
                _this.lowerStripe.add(bestLabel);
                best = new Phaser.Text(_this.game, ('\u0033' + '\x31' + '\x30') * 1 / HappyKittensPuzzle.GameVars.stripesScale, '\x35\x30' | 0, levelBest.toString(), {
                    font: L6rrrr.A(+('\u0037' + "2")),
                    fill: L6rrrr.o("236" - 0)
                });
                _this.lowerStripe.add(best);
            } else {
                movesLabel.y = +("1" + '\x35');
                movesLabel.fontSize = L6rrrr.k(+'\x31\x30\x39');
                _this.moves.y = ('\u0031' + "5") * 1;
                _this.moves.fontSize = L6rrrr.Z(109);
            }
            return _this;
        }
        HUD.prototype.updateMoves = function () {
            this.moves.text = HappyKittensPuzzle.GameVars.moves.toString();
        };
        return HUD;
    }(Phaser.Group);
    HappyKittensPuzzle.HUD = HUD;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var PassedLevelKittenAnimation;
    PassedLevelKittenAnimation = function (_super) {
        __extends(PassedLevelKittenAnimation, _super);
        function PassedLevelKittenAnimation(game) {
            var _this, kittenTextureName;
            _this = _super.call(this, game, null, L6rrrr.o(+('\u0031' + "7" + "1"))) || this;
            _this.kittenContainer = new Phaser.Group(_this.game);
            _this.kittenContainer.x = -100;
            _this.kittenContainer.y = HappyKittensPuzzle.GameConstants.GAME_HEIGHT / 2;
            _this.kittenContainer.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.add(_this.kittenContainer);
            kittenTextureName = Math.random() > ".5" * 1 ? L6rrrr.k(+('\x31' + '\u0030' + '\x32')) : L6rrrr.k('\x32' + '\x32' + '\u0032' - 0);
            _this.kittenImage = new Phaser.Image(_this.game, '\u0030' * 1, +'\x30', L6rrrr.o("42" - 0), kittenTextureName);
            _this.kittenImage.scale.set(('\x31' + '\u002e' + '\x31' + "5") * 1);
            _this.kittenImage.anchor.set(("." + '\u0035') * 1);
            _this.kittenContainer.add(_this.kittenImage);
            return _this;
        }
        PassedLevelKittenAnimation.prototype.activate = function () {
            this.game.add.tween(this.kittenImage).to({ angle: +('\x33' + '\u0036' + '\x30') }, '\u0038\u0035\u0030' - 0, Phaser.Easing.Linear.None, true, +("1" + '\u0035' + "0"));
            this.game.add.tween(this.kittenContainer).to({ x: HappyKittensPuzzle.GameConstants.GAME_WIDTH + +('\u0031' + '\u0030' + "0") }, 850, Phaser.Easing.Linear.None, true, +('\x31' + "5" + "0"));
        };
        return PassedLevelKittenAnimation;
    }(Phaser.Group);
    HappyKittensPuzzle.PassedLevelKittenAnimation = PassedLevelKittenAnimation;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var Boot;
    Boot = function (_super) {
        __extends(Boot, _super);
        function Boot() {
            return _super.apply(this, arguments) || this;
        }
        Boot.mute = function () {
            HappyKittensPuzzle.Game.currentInstance.sound.mute = true;
        };
        Boot.unmute = function () {
            if (!HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                HappyKittensPuzzle.Game.currentInstance.sound.mute = false;
            }
        };
        Boot.prototype.init = function () {
            var aspectRatio;
            Boot.currentInstance = this;
            this.input.maxPointers = +'\u0031';
            this.game.stage.disableVisibilityChange = true;
            this.game.stage.backgroundColor = L6rrrr.k(('\x31' + "0" + "4") * 1);
            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.game.scale.pageAlignHorizontally = true;
            if (this.game.device.desktop) {
                HappyKittensPuzzle.GameVars.scaleY = "1" - 0;
                HappyKittensPuzzle.GameVars.upperStripe_py = +'\x32\x30';
                HappyKittensPuzzle.GameVars.lowerStripe_py = '\x39\x30\x30' | 0;
                HappyKittensPuzzle.GameVars.stripesScale = +"1";
                this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
                this.game.scale.pageAlignHorizontally = true;
                this.game.onBlur.add(Boot.mute, this);
                this.game.onFocus.add(Boot.unmute, this);
            } else {
                this.game.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
                aspectRatio = window.innerHeight / window.innerWidth;
                HappyKittensPuzzle.GameVars.scaleY = ('\u0034' - 0) / 3 / aspectRatio;
                this.game.scale.pageAlignHorizontally = true;
                this.game.scale.isPortrait = false;
                HappyKittensPuzzle.GameVars.stripesScale = +"1";
                if (aspectRatio === "4" * 1 / ("3" | 0)) {
                    HappyKittensPuzzle.GameVars.upperStripe_py = ('\u0032' + "0") * 1;
                    HappyKittensPuzzle.GameVars.lowerStripe_py = +("9" + "0" + '\x30');
                } else if (aspectRatio >= "1.75" - 0) {
                    HappyKittensPuzzle.GameVars.upperStripe_py = 65;
                    HappyKittensPuzzle.GameVars.lowerStripe_py = +"905";
                } else if (aspectRatio >= +('\x31' + "." + "5")) {
                    HappyKittensPuzzle.GameVars.upperStripe_py = 35;
                    HappyKittensPuzzle.GameVars.lowerStripe_py = "910" * 1;
                } else {
                    HappyKittensPuzzle.GameVars.upperStripe_py = 30;
                    HappyKittensPuzzle.GameVars.lowerStripe_py = +'\u0039\u0032\u0030';
                    HappyKittensPuzzle.GameVars.stripesScale = ".8" * 1;
                }
                this.game.scale.forceOrientation(true, false);
                this.game.onPause.add(Boot.mute, this);
                this.game.onResume.add(Boot.unmute, this);
            }
            if (HappyKittensPuzzle.GameConstants.DEVELOPMENT) {
                this.game.time.advancedTiming = true;
            }
            HappyKittensPuzzle.GameManager.init(this.game);
        };
        Boot.prototype.preload = function () {
            this.load.path = HappyKittensPuzzle.GameConstants.ASSETS_PATH;
            this.load.image(L6rrrr.Z(+'\x32\x32'), L6rrrr.o(+('\x33' + "7")));
            this.load.script(L6rrrr.Z(74), L6rrrr.k("1" + '\u0036' + '\u0032' | 0));
            WebFontConfig = {
                active: function () {
                    Boot.currentInstance.game.time.events.add(Phaser.Timer.SECOND, Boot.currentInstance.startPreloader, Boot.currentInstance);
                },
                google: { families: [L6rrrr.Y(+('\x31' + '\x36' + '\x37'))] }
            };
            this.load.crossOrigin = L6rrrr.o(+"8");
        };
        Boot.prototype.create = function () {
            this.game.plugins.add(Fabrique.Plugins.CacheBuster);
            this.game.load.cacheBuster = HappyKittensPuzzle.GameConstants.VERSION;
        };
        Boot.prototype.shutdown = function () {
            Boot.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        Boot.prototype.startPreloader = function () {
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                if (top.location.href.indexOf(L6rrrr.Y("175" | 0)) || top.location.href.indexOf(L6rrrr.A('\u0032' + "3" + '\x31' - 0)) > -1 || top.location.href.indexOf(L6rrrr.Z(+("5" + "0"))) > -("1" * 1)) {
                    this.game.state.start(L6rrrr.Z(+"98"), true, false);
                }
            } else if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.NONE) {
                if (top.location.href.indexOf(L6rrrr.o(+'\x32\x33\x31')) > -('\x31' | 0) || top.location.href.indexOf(L6rrrr.Z(+("9" + "7"))) > -+'\u0031') {
                    this.game.state.start(L6rrrr.Z(("1" + '\x37' + '\u0034') * 1), true, false);
                }
            } else {
                this.game.state.start(L6rrrr.A(+'\u0039\u0038'), true, false);
            }
        };
        return Boot;
    }(Phaser.State);
    HappyKittensPuzzle.Boot = Boot;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var GameConstants;
    GameConstants = function () {
        function GameConstants() {
        }
        return GameConstants;
    }();
    GameConstants.VERSION = L6rrrr.Z(+'\u0037\u0038');
    GameConstants.ASSETS_PATH = L6rrrr.Y(+"201");
    GameConstants.DEVELOPMENT = true;
    GameConstants.EDITING_LEVELS = false;
    GameConstants.GAME_WIDTH = +"768";
    GameConstants.GAME_HEIGHT = +("1" + '\x30' + '\x32' + '\x34');
    GameConstants.GAMEPIX = L6rrrr.o(+('\u0031' + '\u0038' + '\u0035'));
    GameConstants.LAGGED = L6rrrr.A(+'\x32\x32\x34');
    GameConstants.IZZYGAMES = L6rrrr.k(178);
    GameConstants.NONE = L6rrrr.o(233);
    GameConstants.SPONSOR = GameConstants.IZZYGAMES;
    GameConstants.HAPPY = L6rrrr.Z(125);
    GameConstants.GRUMPY = L6rrrr.A(53);
    GameConstants.BLACK_SQUARE = L6rrrr.o(('\x36' + "0") * 1);
    GameConstants.BLUE_SQUARE = L6rrrr.Y(212);
    GameConstants.WHITE_SQUARE = L6rrrr.o(("4" + "1") * 1);
    GameConstants.DARK_GREEN_SQUARE = L6rrrr.Z(+("5" + "7"));
    GameConstants.GREEN_SQUARE = L6rrrr.Z('\u0031\u0036\u0033' * 1);
    GameConstants.GRAY_SQUARE = L6rrrr.Y('\x36\x39' * 1);
    GameConstants.YELLOW_SQUARE = L6rrrr.Z(+('\x35' + '\x31'));
    GameConstants.ORANGE_SQUARE = L6rrrr.Z("10" * 1);
    GameConstants.DARK_CYAN_SQUARE = L6rrrr.Y("160" | 0);
    GameConstants.SQUARE_WIDTH = '\x31\x33\x35' - 0;
    GameConstants.TIME_FADE = '\x33' + "5" + "0" | 0;
    GameConstants.TOTAL_LEVELS = 60;
    GameConstants.LEVEL_BEST_KEY = L6rrrr.o(+'\x31\x30\x33');
    GameConstants.AUDIO_STATE_KEY = L6rrrr.Z('\u0038\u0030' * 1);
    HappyKittensPuzzle.GameConstants = GameConstants;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var GameManager;
    GameManager = function () {
        function GameManager() {
        }
        GameManager.init = function (game) {
            var bestResultsStr;
            GameManager.game = game;
            bestResultsStr = HappyKittensPuzzle.GameVars.getLocalStorageData(HappyKittensPuzzle.GameConstants.LEVEL_BEST_KEY);
            if (bestResultsStr !== L6rrrr.A(144)) {
                HappyKittensPuzzle.GameVars.levelsBestResults = JSON.parse(bestResultsStr);
            } else {
                HappyKittensPuzzle.GameVars.levelsBestResults = [];
                HappyKittensPuzzle.GameVars.levelsBestResults[+'\x30'] = +'\u0030';
                for (var i = "1" - 0; i < HappyKittensPuzzle.GameConstants.TOTAL_LEVELS; i++) {
                    HappyKittensPuzzle.GameVars.levelsBestResults[i] = -1;
                }
                HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.LEVEL_BEST_KEY, JSON.stringify(HappyKittensPuzzle.GameVars.levelsBestResults));
            }
            HappyKittensPuzzle.GameVars.currentLevel = HappyKittensPuzzle.GameConstants.TOTAL_LEVELS;
            for (var i = +"0"; i < HappyKittensPuzzle.GameConstants.TOTAL_LEVELS; i++) {
                if (HappyKittensPuzzle.GameVars.levelsBestResults[i] === +'\u0030') {
                    HappyKittensPuzzle.GameVars.currentLevel = i + 1;
                    break;
                }
            }
            HappyKittensPuzzle.GameVars.achievedLevel = HappyKittensPuzzle.GameVars.currentLevel;
        };
        GameManager.levelSelected = function (level) {
            HappyKittensPuzzle.GameVars.currentLevel = level;
            HappyKittensPuzzle.LevelSelectionState.currentInstance.goToBoardScene();
        };
        GameManager.levelPassed = function () {
            var record;
            this.sponsorsAPIs();
            HappyKittensPuzzle.GameVars.achievedLevel = '\x31' * 1;
            for (var i = +'\u0030'; i < HappyKittensPuzzle.GameVars.levelsBestResults.length; i++) {
                if (HappyKittensPuzzle.GameVars.levelsBestResults[i] === +"0") {
                    HappyKittensPuzzle.GameVars.achievedLevel = i + '\x31' * 1;
                    break;
                }
            }
            record = HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - +'\u0031'];
            if (record === 0 || HappyKittensPuzzle.GameVars.moves <= record) {
                HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - "1" * 1] = HappyKittensPuzzle.GameVars.moves;
            }
            if (HappyKittensPuzzle.GameVars.currentLevel === HappyKittensPuzzle.GameVars.achievedLevel) {
                HappyKittensPuzzle.GameVars.achievedLevel++;
                HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.achievedLevel - ('\x31' - 0)] = "0" - 0;
            }
            if (HappyKittensPuzzle.GameVars.currentLevel < HappyKittensPuzzle.GameConstants.TOTAL_LEVELS) {
                HappyKittensPuzzle.GameVars.currentLevel++;
            }
            HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.LEVEL_BEST_KEY, JSON.stringify(HappyKittensPuzzle.GameVars.levelsBestResults));
        };
        GameManager.sponsorsAPIs = function () {
            var awardID, api_awards;
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
                GamePix.game.ping(L6rrrr.Z("28" * 1), {
                    score: '\u0030' * 1,
                    level: HappyKittensPuzzle.GameVars.currentLevel,
                    achievements: {}
                });
            }
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                awardID = null;
                if (HappyKittensPuzzle.GameVars.currentLevel === +('\x31' + '\x32')) {
                    awardID = L6rrrr.Z('\x31' + '\u0037' + '\x37' - 0);
                } else if (HappyKittensPuzzle.GameVars.currentLevel === '\u0032\u0034' * 1) {
                    awardID = L6rrrr.o(176);
                } else if (HappyKittensPuzzle.GameVars.currentLevel === +"36") {
                    awardID = L6rrrr.A(('\x32' + "2" + "6") * 1);
                } else if (HappyKittensPuzzle.GameVars.currentLevel === ('\x34\x38' | 0)) {
                    awardID = L6rrrr.A('\u0032\u0030\u0033' - 0);
                } else if (HappyKittensPuzzle.GameVars.currentLevel === +"60") {
                    awardID = L6rrrr.Y("1" + "3" + "1" - 0);
                }
                if (awardID) {
                    api_awards = [];
                    api_awards.push(awardID);
                    LaggedAPI.Achievements.save(api_awards, function (response) {
                        if (response.success) {
                            console.log(L6rrrr.Y(+('\u0031' + "9" + '\x35')));
                        } else {
                            console.log(response.errormsg);
                        }
                    });
                }
                GameManager.passedLevels++;
                if (GameManager.passedLevels % ("10" | 0) === +"0") {
                    if (typeof prerollStart === L6rrrr.Z(+("2" + "0" + '\u0036'))) {
                        console.log(L6rrrr.Z(+"213"));
                    } else {
                        LaggedAPI.APIAds.show(L6rrrr.Z("169" - 0), L6rrrr.Z(+('\u0033' + "9")), L6rrrr.o("1" + "9" + '\x32' | 0), function (response) {
                            if (response.success) {
                                console.log(L6rrrr.o("62" - 0));
                            } else {
                                console.log(L6rrrr.o(11));
                            }
                        });
                    }
                }
            }
        };
        return GameManager;
    }();
    GameManager.passedLevels = +"0";
    HappyKittensPuzzle.GameManager = GameManager;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var GameVars;
    GameVars = function () {
        function GameVars() {
        }
        GameVars.getLocalStorageData = function (key) {
            var value;
            value = localStorage.getItem(key);
            if (value !== null) {
                return value;
            } else {
                return L6rrrr.k('\u0034\u0034' | 0);
            }
        };
        GameVars.setLocalStorageData = function (key, value) {
            localStorage.setItem(key, value);
        };
        return GameVars;
    }();
    HappyKittensPuzzle.GameVars = GameVars;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var LevelsContainer;
    LevelsContainer = function (_super) {
        __extends(LevelsContainer, _super);
        function LevelsContainer(game, i) {
            var _this, levelSelectionButton;
            _this = _super.call(this, game, null, L6rrrr.k(+("1" + '\x31' + '\u0030'))) || this;
            _this.i = i;
            _this.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            for (var col = '\u0030' - 0; col < +"3"; col++) {
                for (var row = +"0"; row < 4; row++) {
                    levelSelectionButton = new HappyKittensPuzzle.LevelSelectionButton(_this.game, _this.i * ("12" | 0) + (col + +"1") + ('\x33' - 0) * row);
                    levelSelectionButton.x = -('\x31\x34\x30' * 1) * (+'\u0031' - col);
                    levelSelectionButton.y = -140 * ('\x31' + "." + '\x35' - 0 - row);
                    _this.add(levelSelectionButton);
                }
            }
            return _this;
        }
        return LevelsContainer;
    }(Phaser.Group);
    HappyKittensPuzzle.LevelsContainer = LevelsContainer;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var LevelSelectionButton;
    LevelSelectionButton = function (_super) {
        __extends(LevelSelectionButton, _super);
        function LevelSelectionButton(game, level) {
            var _this, isBlocked, blockedButtonImage, button, levelLabel;
            _this = _super.call(this, game, null, L6rrrr.A(('\x31' + '\x32' + '\u0030') * 1)) || this;
            _this.level = level;
            isBlocked = _this.level > HappyKittensPuzzle.GameVars.achievedLevel;
            if (isBlocked) {
                blockedButtonImage = new Phaser.Image(_this.game, '\x30' * 1, '\u0030' | 0, L6rrrr.Z(+('\x32' + "0" + '\u0032')), L6rrrr.k(64));
                blockedButtonImage.anchor.set(+("." + '\u0035'));
                _this.add(blockedButtonImage);
            } else {
                button = new Phaser.Button(_this.game, '\u0030' * 1, "0" * 1, L6rrrr.Z(('\x38' + "2") * 1), _this.onClick, _this);
                button.setFrames(L6rrrr.Z(+"158"), L6rrrr.Y(+("1" + "4" + '\x35')), L6rrrr.A(+'\x31\x35\x38'));
                button.anchor.set(+'\u002e\u0035');
                _this.add(button);
            }
            levelLabel = new Phaser.Text(_this.game, +"0", -("9" | 0), _this.level.toString(), {
                font: L6rrrr.Z(+("1" + "3" + "8")),
                fill: L6rrrr.Y(+("1" + '\u0038' + '\u0031'))
            });
            levelLabel.anchor.set(+('\x2e' + '\u0035'));
            _this.add(levelLabel);
            return _this;
        }
        LevelSelectionButton.prototype.onClick = function () {
            if (HappyKittensPuzzle.LevelSelectionState.leavingScene) {
                return;
            }
            HappyKittensPuzzle.LevelSelectionState.leavingScene = true;
            this.game.time.events.add("1" + '\x35' + '\u0030' - 0, function () {
                HappyKittensPuzzle.GameManager.levelSelected(this.level);
            }, this);
            HappyKittensPuzzle.AudioManager.getInstance().playSound(L6rrrr.Y("77" | 0));
        };
        return LevelSelectionButton;
    }(Phaser.Group);
    HappyKittensPuzzle.LevelSelectionButton = LevelSelectionButton;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var LevelSelectionState;
    LevelSelectionState = function (_super) {
        __extends(LevelSelectionState, _super);
        function LevelSelectionState() {
            return _super.apply(this, arguments) || this;
        }
        LevelSelectionState.prototype.init = function () {
            LevelSelectionState.currentInstance = this;
            LevelSelectionState.leavingScene = false;
            this.tweening = false;
        };
        LevelSelectionState.prototype.create = function () {
            var backgroundImage, titleContainer, aspectRatio, levelsContainer_py, levelsContainer, laggedLogo, creditsLabel;
            backgroundImage = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, HappyKittensPuzzle.GameConstants.GAME_HEIGHT / ("2" - 0), L6rrrr.Y(+'\u0032\u0030\u0032'), L6rrrr.Z(+'\x31\x33\x36'));
            backgroundImage.anchor.set(".5" - 0);
            backgroundImage.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            titleContainer = new HappyKittensPuzzle.TitleContainer(this.game);
            this.add.existing(titleContainer);
            this.levelsRail = new Phaser.Group(this.game);
            this.add.existing(this.levelsRail);
            aspectRatio = window.innerHeight / window.innerWidth;
            if (this.game.device.desktop) {
                levelsContainer_py = '\u0036\u0035\u0030' - 0;
            } else {
                if (aspectRatio >= +'\u0031\u002e\u0037\u0035') {
                    levelsContainer_py = "620" * 1;
                } else if (aspectRatio >= +'\x31\x2e\x35') {
                    levelsContainer_py = '\x36\x34\x30' - 0;
                } else {
                    levelsContainer_py = +('\u0036' + "6" + '\x32');
                }
            }
            for (var i = '\u0030' - 0; i < LevelSelectionState.LEVEL_PAGES; i++) {
                levelsContainer = new HappyKittensPuzzle.LevelsContainer(this.game, i);
                levelsContainer.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH * (+'\u002e\u0035' + i);
                levelsContainer.y = levelsContainer_py;
                this.levelsRail.add(levelsContainer);
            }
            this.previousButton = this.add.button(+'\x36\x30', levelsContainer_py, L6rrrr.o(+"202"), this.onArrowClick, this);
            this.previousButton.anchor.set(.5);
            this.previousButton.setFrames(L6rrrr.Z('\x37\x30' * 1), L6rrrr.Y(47), L6rrrr.A(+'\x37\x30'));
            this.previousButton.scale.set(-("1" | 0), HappyKittensPuzzle.GameVars.scaleY);
            this.previousButton.name = LevelSelectionState.PREVIOUS;
            this.nextButton = this.add.button('\u0037\u0030\u0030' | 0, levelsContainer_py, L6rrrr.A(+'\x32\x31'), this.onArrowClick, this);
            this.nextButton.anchor.set(+("." + "5"));
            this.nextButton.setFrames(L6rrrr.A(2), L6rrrr.Z("129" | 0), L6rrrr.Y(('\u0037' + "0") * 1));
            this.nextButton.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.nextButton.name = LevelSelectionState.NEXT;
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                laggedLogo = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / ("2" - 0), HappyKittensPuzzle.GameConstants.GAME_HEIGHT - "56" * 1, L6rrrr.A("4" + "2" | 0), L6rrrr.k(+"113"));
                laggedLogo.anchor.set(+("." + '\u0035'));
                laggedLogo.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            }
            creditsLabel = this.add.text(HappyKittensPuzzle.GameConstants.GAME_WIDTH / +'\u0032', HappyKittensPuzzle.GameConstants.GAME_HEIGHT - ('\u0033' + '\x30') * 1, L6rrrr.Y(+"126") + HappyKittensPuzzle.GameConstants.SPONSOR, {
                font: L6rrrr.A("1" + '\x39' | 0),
                fill: L6rrrr.Z("1" + "2" + "7" | 0)
            });
            creditsLabel.anchor.x = +".5";
            creditsLabel.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            creditsLabel.alpha = "." + "7" + '\u0032' - 0;
            this.setCurrentLevelPage();
            this.game.camera.flash(('\x30' + "x" + '\u0030\u0030' + "0" + "000") * 1, HappyKittensPuzzle.GameConstants.TIME_FADE, false);
        };
        LevelSelectionState.prototype.shutdown = function () {
            LevelSelectionState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        LevelSelectionState.prototype.goToBoardScene = function () {
            this.game.camera.fade(0x000000, HappyKittensPuzzle.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start(L6rrrr.A("35" | 0), true, false);
            }, this);
        };
        LevelSelectionState.prototype.setCurrentLevelPage = function () {
            this.indexLevelsPage = Math.floor((HappyKittensPuzzle.GameVars.achievedLevel - ('\x31' | 0)) / +"12");
            if (this.indexLevelsPage === +'\u0030') {
                this.previousButton.visible = false;
            } else if (this.indexLevelsPage > '\u0033' * 1) {
                this.nextButton.visible = false;
            }
            this.levelsRail.x = -HappyKittensPuzzle.GameConstants.GAME_WIDTH * this.indexLevelsPage;
        };
        LevelSelectionState.prototype.onArrowClick = function (b) {
            var px;
            if (this.tweening) {
                return;
            }
            b.clearFrames();
            this.tweening = true;
            this.setCorrespondingContainersVisible(true, b.name);
            px = this.levelsRail.x;
            if (b.name === LevelSelectionState.PREVIOUS) {
                px += HappyKittensPuzzle.GameConstants.GAME_WIDTH;
                this.indexLevelsPage--;
            } else {
                px -= HappyKittensPuzzle.GameConstants.GAME_WIDTH;
                this.indexLevelsPage++;
            }
            if (this.indexLevelsPage === +"0") {
                this.previousButton.visible = false;
            } else if (this.indexLevelsPage === LevelSelectionState.LEVEL_PAGES - ("1" - 0)) {
                this.nextButton.visible = false;
            } else {
                this.previousButton.visible = true;
                this.nextButton.visible = true;
            }
            this.game.add.tween(this.levelsRail).to({ x: px }, 350, Phaser.Easing.Quadratic.Out, true).onComplete.add(function () {
                this.tweening = false;
                this.setCorrespondingContainersVisible(false);
            }, this);
            HappyKittensPuzzle.AudioManager.getInstance().playSound(L6rrrr.o(123));
        };
        LevelSelectionState.prototype.setCorrespondingContainersVisible = function (beforeTweening, pressedButtonName) {
            if (beforeTweening) {
                if (pressedButtonName === LevelSelectionState.NEXT) {
                    this.levelsRail.forEach(function (levelsContainer) {
                        if (levelsContainer.i === this.indexLevelsPage || levelsContainer.i === this.indexLevelsPage + +"1") {
                            levelsContainer.visible = true;
                        } else {
                            levelsContainer.visible = false;
                        }
                    }, this);
                } else {
                    this.levelsRail.forEach(function (levelsContainer) {
                        if (levelsContainer.i === this.indexLevelsPage || levelsContainer.i === this.indexLevelsPage - +"1") {
                            levelsContainer.visible = true;
                        } else {
                            levelsContainer.visible = false;
                        }
                    }, this);
                }
            } else {
                this.levelsRail.forEach(function (levelsContainer) {
                    if (levelsContainer.i === this.indexLevelsPage) {
                        levelsContainer.visible = true;
                    } else {
                        levelsContainer.visible = false;
                    }
                }, this);
            }
        };
        return LevelSelectionState;
    }(Phaser.State);
    LevelSelectionState.PREVIOUS = L6rrrr.o(107);
    LevelSelectionState.NEXT = L6rrrr.A(27);
    LevelSelectionState.LEVEL_PAGES = +'\u0035';
    HappyKittensPuzzle.LevelSelectionState = LevelSelectionState;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var TitleContainer;
    TitleContainer = function (_super) {
        __extends(TitleContainer, _super);
        function TitleContainer(game) {
            var _this, aspectRatio, shadowHeight, yellowStripeContainer_py, shadow, gameTitle, audioButton, yellowStripeContainer, colorStripe, stripeLabel;
            _this = _super.call(this, game, null, L6rrrr.o("9" + '\x39' | 0)) || this;
            aspectRatio = window.innerHeight / window.innerWidth;
            if (_this.game.device.desktop) {
                shadowHeight = '\x33\x31\x34' * 1;
                yellowStripeContainer_py = +"190";
            } else {
                if (aspectRatio >= "1.75" * 1) {
                    shadowHeight = +("2" + '\u0035' + "0");
                    yellowStripeContainer_py = ("1" + '\x35' + "4") * 1;
                } else if (aspectRatio >= +"1.5") {
                    shadowHeight = +("2" + "9" + "4");
                    yellowStripeContainer_py = "180" * 1;
                } else {
                    shadowHeight = +('\u0033' + "0" + "4");
                    yellowStripeContainer_py = ('\u0032' + "0" + "0") * 1;
                }
            }
            shadow = new Phaser.Sprite(_this.game, +'\u0030', 0, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            shadow.scale.set(+"1.5" * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, shadowHeight / 64);
            shadow.alpha = .45;
            _this.add(shadow);
            gameTitle = new Phaser.Image(_this.game, -+"12", -("12" - 0), L6rrrr.A("1" + "4" + "8" - 0), L6rrrr.o(159));
            gameTitle.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.add(gameTitle);
            audioButton = new HappyKittensPuzzle.AudioButton(_this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH - 85, '\x31\x34' | 0);
            audioButton.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.add(audioButton);
            yellowStripeContainer = new Phaser.Group(_this.game);
            yellowStripeContainer.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / ('\x32' - 0);
            yellowStripeContainer.y = yellowStripeContainer_py;
            yellowStripeContainer.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            _this.add(yellowStripeContainer);
            colorStripe = new Phaser.Sprite(_this.game, +"0", +"0", _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = '\x2e' + '\x35' - 0;
            colorStripe.scale.set(('\u0031' + '\x2e' + "5") * 1 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / ("6" + "4" | 0), +'\x31\x32' / 64);
            yellowStripeContainer.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, 0, colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.ORANGE_SQUARE));
            colorStripe.anchor.x = '\x2e\x35' * 1;
            colorStripe.scale.set(+"1.5" * HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"64", +('\u0039' + "0") / +('\x36' + '\x34'));
            yellowStripeContainer.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, 0, colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = ".5" * 1;
            colorStripe.scale.set("1.5" * 1 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / ('\x36\x34' * 1), 12 / ("64" - 0));
            yellowStripeContainer.add(colorStripe);
            stripeLabel = new Phaser.Text(_this.game, 0, '\x31\x38' * 1, L6rrrr.Z('\x33' + '\u0036' - 0), {
                font: L6rrrr.o(+"153"),
                fill: L6rrrr.o("84" - 0)
            });
            stripeLabel.anchor.x = +('\x2e' + '\u0035');
            stripeLabel.setShadow(+"4", +'\x34', L6rrrr.Z(+("6" + "7")), '\u0030' | 0);
            yellowStripeContainer.add(stripeLabel);
            return _this;
        }
        return TitleContainer;
    }(Phaser.Group);
    HappyKittensPuzzle.TitleContainer = TitleContainer;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var LevelEditionState;
    LevelEditionState = function (_super) {
        __extends(LevelEditionState, _super);
        function LevelEditionState() {
            return _super.apply(this, arguments) || this;
        }
        LevelEditionState.prototype.init = function () {
            LevelEditionState.currentInstance = this;
            HappyKittensPuzzle.GameVars.moves = +"0";
        };
        LevelEditionState.prototype.create = function () {
            var background, resetButton;
            background = new Phaser.Sprite(this.game, +'\u0030', "0" - 0, this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            background.scale.set(HappyKittensPuzzle.GameConstants.GAME_WIDTH / ('\x36\x34' * 1), HappyKittensPuzzle.GameConstants.GAME_HEIGHT / ('\u0036\u0034' | 0));
            this.add.existing(background);
            this.board = new HappyKittensPuzzle.Board(this.game);
            this.add.existing(this.board);
            this.movementsLabel = this.add.text(600, +'\u0039\u0030\u0030', L6rrrr.A(+("3" + "1")) + HappyKittensPuzzle.GameVars.moves, {
                font: L6rrrr.k(+("2" + '\u0030' + '\x39')),
                fill: L6rrrr.k(20)
            });
            this.movementsLabel.anchor.x = 1;
            this.movementsLabel.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            resetButton = this.add.button('\x32' + '\x30' | 0, "9" + '\x30' + '\u0030' - 0, L6rrrr.Z("2" + '\x31' | 0), this.onResetClicked, this);
            resetButton.setFrames(L6rrrr.k("1" + '\u0030' + "5" | 0), L6rrrr.A('\x32\x34' | 0), L6rrrr.k(+'\x31\x38'));
            resetButton.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.game.camera.flash(0x000000, HappyKittensPuzzle.GameConstants.TIME_FADE, false);
        };
        LevelEditionState.prototype.shutdown = function () {
            LevelEditionState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        LevelEditionState.prototype.move = function (column, row) {
            var cells, c, r;
            HappyKittensPuzzle.GameVars.moves++;
            this.movementsLabel.text = L6rrrr.k(+("2" + "0" + '\x30')) + HappyKittensPuzzle.GameVars.moves;
            cells = this.board.cells;
            for (var i = +"0"; i < HappyKittensPuzzle.BoardManager.neighbourSquares.length; i++) {
                c = HappyKittensPuzzle.BoardManager.neighbourSquares[i][0] + column;
                r = HappyKittensPuzzle.BoardManager.neighbourSquares[i][1] + row;
                if (c >= "0" * 1 && r >= '\x30' - 0 && c < cells.length && r < cells.length) {
                    cells[c][r].flip(true);
                }
            }
        };
        LevelEditionState.prototype.onResetClicked = function () {
            this.game.state.start(L6rrrr.o(+('\u0032' + '\u0036')), true, false);
        };
        return LevelEditionState;
    }(Phaser.State);
    HappyKittensPuzzle.LevelEditionState = LevelEditionState;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var PreLoader;
    PreLoader = function (_super) {
        __extends(PreLoader, _super);
        function PreLoader() {
            return _super.apply(this, arguments) || this;
        }
        PreLoader.prototype.init = function () {
            PreLoader.currentInstance = this;
            this.load.path = HappyKittensPuzzle.GameConstants.ASSETS_PATH;
        };
        PreLoader.prototype.preload = function () {
            this.generateBitmapData();
            this.composeScene();
            this.loadAssets();
        };
        PreLoader.prototype.create = function () {
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                LaggedAPI.init(L6rrrr.Z(+"168"), L6rrrr.A('\u0032\u0033\u0032' * 1));
            }
            HappyKittensPuzzle.AudioManager.getInstance().init(this.game);
            HappyKittensPuzzle.AudioManager.getInstance().playSound(L6rrrr.Z("40" | 0), true);
            if (HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                this.game.state.start(L6rrrr.Z(+("2" + "0" + '\u0034')), true, false);
            } else {
                if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
                    GamePix.game.gameLoaded(function () {
                        HappyKittensPuzzle.Game.currentInstance.state.start(L6rrrr.A(+'\x31\x32\x32'), true, false);
                    });
                } else {
                    this.game.state.start(L6rrrr.Z(35), true, false);
                }
            }
        };
        PreLoader.prototype.composeScene = function () {
            var tmpLabel, backgroundSprite, gameLogo, preloadBarContainer, preloadBarCapsuleShadow, preloadBarCapsule;
            tmpLabel = this.add.text(HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"2", 190, L6rrrr.Z(+'\x32\x33\x30'), {
                font: L6rrrr.o('\x31\x31\x38' | 0),
                fill: L6rrrr.Y(+'\u0032\u0031\u0030')
            });
            tmpLabel.anchor.x = +("." + '\x35');
            backgroundSprite = this.add.sprite('\u0030' | 0, "0" | 0, this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_CYAN_SQUARE));
            backgroundSprite.scale.set(HappyKittensPuzzle.GameConstants.GAME_WIDTH / +('\x36' + '\u0034'), HappyKittensPuzzle.GameConstants.GAME_HEIGHT / +"64");
            gameLogo = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"2", +('\x31' + '\x39' + "0"), L6rrrr.A(22));
            gameLogo.anchor.set(+'\u002e\u0035');
            gameLogo.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.loadingLabel = this.add.text(HappyKittensPuzzle.GameConstants.GAME_WIDTH / +'\u0032', +"475", L6rrrr.A(87), {
                font: L6rrrr.k(+'\u0031\u0038\u0039'),
                fill: L6rrrr.Y(+'\u0038\u0034')
            });
            this.loadingLabel.anchor.x = .5;
            this.loadingLabel.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            preloadBarContainer = this.add.group();
            preloadBarContainer.y = +("6" + '\u0031' + '\u0035');
            preloadBarContainer.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            preloadBarCapsuleShadow = new Phaser.Sprite(this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH / ("2" | 0) + 5, +'\u0034', this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.BLACK_SQUARE));
            preloadBarCapsuleShadow.scale.set(10, '\u002e\u0038\u0035' * 1);
            preloadBarCapsuleShadow.anchor.set('\x2e' + "5" - 0);
            preloadBarCapsuleShadow.alpha = +('\u002e' + '\x33' + '\u0035');
            preloadBarContainer.add(preloadBarCapsuleShadow);
            preloadBarCapsule = new Phaser.Sprite(this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, '\u0030' * 1, this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            preloadBarCapsule.scale.setTo(+("1" + '\u0030'), ('\u002e' + "7" + '\x38') * 1);
            preloadBarCapsule.anchor.set(+('\x2e' + '\x35'));
            preloadBarContainer.add(preloadBarCapsule);
            this.preloadBar = new Phaser.Sprite(this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH / +'\x32' - ('\u0033' + '\x31' + '\x35' | 0), +"0", this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.ORANGE_SQUARE));
            this.preloadBar.scale.setTo(+"0", +('\u002e' + '\x36'));
            this.preloadBar.anchor.set('\x30' | 0, .5);
            preloadBarContainer.add(this.preloadBar);
        };
        PreLoader.prototype.loadAssets = function () {
            this.load.atlas(L6rrrr.o("76" - 0), L6rrrr.A(6), L6rrrr.Y("124" | 0));
            this.load.audiosprite(L6rrrr.k(+("1" + '\x34' + "6")), [
                L6rrrr.A(75),
                L6rrrr.k(+("1" + '\u0032' + "8"))
            ], L6rrrr.o('\x31\x37\x32' * 1));
            this.load.onFileComplete.add(this.updateLoadedPercentage, this);
        };
        PreLoader.prototype.updateLoadedPercentage = function () {
            this.preloadBar.scale.x = this.load.progress / +'\x31\x30\x30' * +("9" + "." + '\x38' + "4" + '\u0034');
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
                GamePix.game.gameLoading(this.load.progress);
            }
        };
        PreLoader.prototype.generateBitmapData = function () {
            var bmd;
            bmd = this.game.add.bitmapData('\x36' + "4" - 0, +'\x36\x34', HappyKittensPuzzle.GameConstants.HAPPY, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, +"0", '\x36\x34' | 0, ('\u0036' + "4") * 1);
            bmd.ctx.fillStyle = L6rrrr.Z(108);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(+'\x36\x34', +'\x36\x34', HappyKittensPuzzle.GameConstants.BLACK_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect('\x30' * 1, +"0", "64" | 0, '\x36\x34' * 1);
            bmd.ctx.fillStyle = L6rrrr.A(+'\x32\x30');
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(("6" + "4") * 1, '\u0036' + '\u0034' | 0, HappyKittensPuzzle.GameConstants.WHITE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, '\u0036\u0034' * 1, +'\u0036\u0034');
            bmd.ctx.fillStyle = L6rrrr.A(("1" + '\u0038' + '\u0031') * 1);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, "64" * 1, HappyKittensPuzzle.GameConstants.DARK_CYAN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect('\x30' * 1, 0, ("6" + "4") * 1, +"64");
            bmd.ctx.fillStyle = L6rrrr.o(+"16");
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData("64" - 0, 64, HappyKittensPuzzle.GameConstants.GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(+'\u0030', "0" - 0, "64" | 0, +"64");
            bmd.ctx.fillStyle = L6rrrr.k("1" + "8" + "2" | 0);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, +("6" + '\x34'), HappyKittensPuzzle.GameConstants.BLUE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(+"0", "0" - 0, ("6" + "4") * 1, 64);
            bmd.ctx.fillStyle = L6rrrr.Y(130);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(+('\u0036' + '\u0034'), +"64", HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect("0" * 1, +'\x30', 64, "6" + '\x34' | 0);
            bmd.ctx.fillStyle = L6rrrr.k('\u0036' + '\x35' - 0);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData("64" - 0, "64" - 0, HappyKittensPuzzle.GameConstants.GRUMPY, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(+'\x30', '\x30' - 0, 64, '\x36\x34' | 0);
            bmd.ctx.fillStyle = L6rrrr.k(+("6" + '\u0031'));
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData('\u0036\u0034' * 1, +("6" + "4"), HappyKittensPuzzle.GameConstants.GRAY_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(+'\x30', +'\u0030', '\x36' + "4" - 0, "6" + "4" | 0);
            bmd.ctx.fillStyle = L6rrrr.k(+'\u0031\u0031\u0032');
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, HappyKittensPuzzle.GameConstants.YELLOW_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, +('\x36' + '\u0034'), +('\x36' + "4"));
            bmd.ctx.fillStyle = L6rrrr.o(+('\x31' + '\u0036' + "5"));
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, +'\x36\x34', HappyKittensPuzzle.GameConstants.ORANGE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, '\x30' * 1, '\u0036' + "4" - 0, '\x36\x34' | 0);
            bmd.ctx.fillStyle = L6rrrr.k(214);
            bmd.ctx.fill();
        };
        return PreLoader;
    }(Phaser.State);
    HappyKittensPuzzle.PreLoader = PreLoader;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (Fabrique) {
    var Plugins;
    (function (Plugins) {
        var CacheBuster;
        CacheBuster = function (_super) {
            __extends(CacheBuster, _super);
            function CacheBuster(game, parent) {
                var _this;
                _this = _super.call(this, game, parent) || this;
                _this.patchLoader();
                return _this;
            }
            CacheBuster.prototype.patchLoader = function () {
                Object.defineProperty(Phaser.Loader, L6rrrr.Y(164), { value: null });
                Phaser.Loader.prototype.transformUrl = function (url, file) {
                    if (!url) {
                        return L6rrrr.k(+'\u0031\u0034\u0034');
                    }
                    if (this.cacheBuster !== null && null === url.match(/^(data:)/)) {
                        url += L6rrrr.A(208) + this.cacheBuster;
                    }
                    if (url.match(/^(?:blob:|data:|http:\/\/|https:\/\/|\/\/)/)) {
                        return url;
                    } else {
                        return this.baseURL + file.path + url;
                    }
                };
            };
            return CacheBuster;
        }(Phaser.Plugin);
        Plugins.CacheBuster = CacheBuster;
    }(Plugins = Fabrique.Plugins || (Fabrique.Plugins = {})));
}(Fabrique || (Fabrique = {})));
(function (HappyKittensPuzzle) {
    var YellowStripe;
    YellowStripe = function (_super) {
        __extends(YellowStripe, _super);
        function YellowStripe(game, text) {
            var _this, colorStripe, stripeLabel;
            _this = _super.call(this, game, null, L6rrrr.k(+("1" + "5" + "5"))) || this;
            _this.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"2";
            _this.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            colorStripe = new Phaser.Sprite(_this.game, "0" - 0, '\u0030' * 1, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = +('\x2e' + '\x35');
            colorStripe.scale.set(1.5 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, ("1" + "2") * 1 / 64);
            _this.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, 0, colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.ORANGE_SQUARE));
            colorStripe.anchor.x = +".5";
            colorStripe.scale.set(1.5 * HappyKittensPuzzle.GameConstants.GAME_WIDTH / ("6" + "4" - 0), +("9" + '\x30') / ("64" - 0));
            _this.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, '\x30' * 1, colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = +'\u002e\u0035';
            colorStripe.scale.set(('\u0031\u002e\u0035' - 0) * HappyKittensPuzzle.GameConstants.GAME_WIDTH / +("6" + "4"), ("1" + "2" - 0) / +('\u0036' + '\x34'));
            _this.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, 0, colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            colorStripe.anchor.x = ("." + "5") * 1;
            colorStripe.scale.set(("1.5" - 0) * HappyKittensPuzzle.GameConstants.GAME_WIDTH / ('\u0036' + "4" - 0), +"16" / ("6" + "4" - 0));
            colorStripe.alpha = ".45" - 0;
            _this.add(colorStripe);
            stripeLabel = new Phaser.Text(_this.game, '\x30' - 0, ("1" + "8") * 1, text, {
                font: L6rrrr.o(("1" + '\x33' + "2") * 1),
                fill: L6rrrr.A(+('\u0031' + "9" + '\x36'))
            });
            stripeLabel.anchor.x = +".5";
            stripeLabel.setShadow(+"4", "4" | 0, L6rrrr.o(+"67"), '\u0030' - 0);
            _this.add(stripeLabel);
            return _this;
        }
        return YellowStripe;
    }(Phaser.Group);
    HappyKittensPuzzle.YellowStripe = YellowStripe;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));