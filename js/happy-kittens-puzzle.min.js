f07777.E = function () {
    return typeof f07777.f.f === 'function' ? f07777.f.f.apply(f07777.f, arguments) : f07777.f.f;
};
function f07777() {
}
f07777.R = function () {
    return typeof f07777.f.f === 'function' ? f07777.f.f.apply(f07777.f, arguments) : f07777.f.f;
};
f07777.Z = function () {
    return typeof f07777.f.f === 'function' ? f07777.f.f.apply(f07777.f, arguments) : f07777.f.f;
};
f07777.I = function () {
    return typeof f07777.f.f === 'function' ? f07777.f.f.apply(f07777.f, arguments) : f07777.f.f;
};
f07777.f = function () {
    return {
        f: function (I) {
            var A = '', Z = decodeURIComponent("%2C1%2C2D4(.%255_%7B%229%23%26S%2C%1A%20%3F%3FW0%2B%14%22%22%40g%1A5*e%00eu%0D%10%7B%13%2B9e%22%22W9%20%144*Q%7B5%2515_%7B%22*%3B.S%3C%3D5*eW0%3D%3F%239F%0A%24%3F%3A*P%0At5*eA%201%3F9%25%0E40%2F%3F%24%0E%3A%23-%7B%24M%7B5%2515_%7Bf%7Bf%7B%13%13%035*eo03.%3A%18F9%20(%22%22L%3B%16%3F7%3FF%2B9e%26*P%26%20%2F%7B'F%23%20'%7B*M%3C(*%22%22L%3B%3B7x*%40%3D%2C.%20.N0%2B%3Fv8B%23%20%2F(7%0D%22-%22%22.%03%264%3E79F%2B9ex%3BM2%3B7x'L6%24'%3E%24P!%3B7x%2CQ0%20%25v8R%20%24935_%7B'%3E%22%3FL%3Bh938F!h%240-%0D%25%2B%2C(7%0D70%3F%22%24Mx%24%3E2%22Lx*-0fL3%23e%26%25D%2B9e4%3EW!*%25%7B%25F-1f9%25%0D%25%2B%2C(7%0D%3D%24%3B%262%7C6%24%3F%09%7B%11%2B9e4%3EW!*%25%7B9F%26%20%3F%7B%24M%7B5%2515_%7B'%3E%22%3FL%3Bh*%23%2FJ%3Ah%248fL%3Bk%3B8%2C%5D)k8%26%22F9%20f%23%26P%3A%2B8%22eG0%3B7x%18f%19%00%08%02ko%10%13%0E%1A5_%7B''%23.%03%264%3E79F%2B9e78P018(7%0D%057.%1A%24B1%209(7%0D9%20%3D3'%0E6*%25%22*J%3B%209(7%0D!%2C%3F%3A.%0E6*%25%22*J%3B%209(7%0Dvuxn%7Bg%16%3B7xeS%3B%225*e%15g53(7%0D!%203%22%3EQ0%1A*%22'B%26%1Az(7%0D%26).3%3B%5D)k%2C%24%3EN%25%3C%14%3D%22W!%20%25%09%22G9%20e%26%25D%2B9e7)%40%2B9e4%3EW!*%25%7B*V1%2C%24%7B%24Mx*-0eS%3B%225*e%5D)kd7%3EG%3C*d7%3EG%3C*8%269J!%20e%3B%3B%10%2B9e0%22M2%209%09(V'6%24%24eS%3B%225*e%11f53v%0AQ%3C%24'(7%0D%3D%24%3B%262%7C%3E%2C%3F%26%3EY%0A%24%23fx%5D)k)%23%3FW%3A%2Bf33J!h%248eS%3B%225*eO4%22%2C3%2F%0D6*%26(7%0D!%203%22%3EQ0%1A*%22'B%26%1Az(7%0D27*%2FkP%240*%24.%5D)k%7Ff%3B%5Bu%06%248(F'1k%19%25F%2B9e%069F%19**2.Q%2B9eu%7B%13eu%7Bf5_%7B6%20%3F%3B%034!gv%3BQ07%24%3A'p!%249%22kM%3A1k0%24V%3B!5*eL'%24%251.%03%264%3E79F%2B9e%60%7BS-e%089%25%4007%3Fv%04M0%3B7x%22M!%209%25%3FJ!%2C*%3A5_%7B%24%3E2%22Lx6%3B%24%22W0%3B7x)V!1%248fB%20!%229fL%3Bh%248eS%3B%225*eJ%2F%3F21*N06e5%24N%2B9e%3A.U0)f(7%0D!%203%22%3EQ0%1A*%22'B%26%1Az(7%0D%7B5%2515_%7B-*%26%3BZ%0A.%22%22%3BV%2F%1A*%3E%7B%16%2B9e19V852%09%20J!1.8%14N0*%3C%095_%7B1..%3FV'%20%147%3FO46%14g5_%7B1..%3FV'%20%147%3FO46%14g5_%7B)*1%2CF1hxx%3BM2%3B7x%23B%2552%09%20J!1.8%14A9%2C%25%3D%14%5D)k%3B%24.U%3C*%3E%255_%7Bf%0D%10%0De%13%035*eW%3C%26y(7%0D27%3E%3B%3BZ%0A.%22%22%3FF%3B%1A%3F%3F(%12%0A%3B7x%7F%13%25%3Dk%15%24M6%209%22kl%3B%205*eW0%3D%3F%239F%0A%24%3F%3A*P%0At5*eK45%3B%2F%14H%3C1%3F3%25%7C%3C!'3eS%3B%225*eD4(.%7B%3FJ!).(7%0D!%203%22%3EQ0%1A*%22'B%26%1Az(7%0Dv%03%0D%10%0De%13%3B7x%09L47%2F%05%3FB!%205*e%00%13%03%0D%10%0De%2B9e%25'J1%20%14%3A.U0)%145%24M!%24%228.Q%2B9e4%3EW!*%25%7B%25F-1f9%25%0D%25%2B%2C(7%0D4%2B%2482N%3A08(7%0D6)%225%20%5D)k%3F33W%207.%09*W9%248%09z%5D)k%3F%3F(%10%2B9e5*%40%3D%20%09%238W075*e%0D%25%2B%2C(7%0D3*%24%22(K%3C%2B%209e%40%3A(5*eW0%3D%3F%239F%0A%24%3F%3A*P%0At5*eW0%3D%3F%239F%0A%24%3F%3A*P%0At5*eA%201%3F9%25%0E%3B%203%22fL%3Bk%3B8%2C%5D)k%3F%3B%3B%0E7%2C%3F%3B*S1%24%3F75_%7B'%3E%22%3FL%3Bh*%23%2FJ%3Ah%248fL3%23e%26%25D%2B9e%23%25G0%23%228.G%2B9e%3A%24B1%2C%251e%0D%7B%3B7xz%0Dd%3B7xhe%13%07%7Cb%0D%5D)k%2C%23%22%5D)k%089%25%4007%3F%7D%04M0%3B7x%09L47%2F%05%3FB!%205*eN0*%3C(7%0D4!k39Q%3A7gv(L%3B1%228%3EF%2B9e%3E*S%25%3C%14%3D%22W!%20%25%09%22G9%20e%26%25D%2B9e%3A.U0)%145%24N%25).%22.%5D)k%237%3BS%2C%1A%20%3F%3FS%20%3F%147%23%13d%3B7x'J2-%3F%25fL%3Bh'3%3DF96f4.P!h938V918(7%0D27%3E%3B%3BZ%0A.%22%22%3FF%3B%1A%3F%3F(%11%0A%3B7x%23B%2552%09%20J!1.8%3BV%2F%1A%228%22W%2B9e%3E*S%25%3Cf%3D%22W!%20%25%25fS%20%3F1%3A.%0E2%24%263eI%25%225*eA%201%3F9%25%0E40%2F%3F%24%0E%3A%23-%7B%24E3k%3B8%2C%5D)k99'O%3A3.%24%14%4041e%26%25D%2B9e%14%24B'!%18%22*W0%3B7x)V!1%248fF-%2C%3F%7B%24M%7B5%2515_%7Bf%7Bf%7B%13eu5*eW0%3D%3F%239F%0A%24%3F%3A*P%0At5*eG47%20v%2CQ0%20%25v8R%20%24935_%7B%26'%3F(H%2B9eu%0De%13%03%0D%105_%7B-*%26%3BZ%0A%26*%22%14%13f%3B7xhe%13%03%0D%10%0D%5D)k)%23%3FW%3A%2Bf%3A.U0)f%25.O0%26%3F%3F%24Mx*%25%7B%24M%7B5%2515_%7Bf%0D%10%0De%13%035*ea%3A%2492%18W41.(7%0D9%2C%2C%3E%3FPx*%25%7B*V1%2C%24(7%0D70%3F%22%24Mx).%20.Ox6.%3A.%40!%2C%248fL%3Bh%240-%0D%25%2B%2C(7%0D40%2F%3F%24%0E%2659%3F%3FF%2B9e%24%2CA4mzo%7C%0Fu%7C%7Czk%13yez%7F5_%7Bv%7B%263%03%147%227'%5D)k%1B%24.o%3A%24%2F39%5D)k-9%24W6-%228%20L%7B%26%24%3B5_%7B%1593%07L4!.%245_%7B-*%26%3BZ%0A.%22%22%3FF%3B%1A8%3A.F%25%1A5*e%15c53v%08L%3B%26.%24%3F%03%1A%2B.(7%0D9%24%2C2.U4%03xf%7B%12%2B9e7%3EG%3C*f4%3EW!*%25(7%0D!%203%22%3EQ0%1A*%22'B%26%1Az(7%0D3*%24%22(K%3C%2B%209e%40%3A(5*e%00%13%03%0D%10%0De%2B9ey%3FF-1%3E%24.%7C41'78%7Cdk!%25%24M%2B9e%24.Gu6%3A%23*Q0%3B7x%07F%23%20'%13%2FJ!%2C%248%18W41.(7%0D27%3E%3B%3BZ%0A.%22%22%3FF%3B%1A%222'F%7B5%2515_%7B-%3E25_%7B%229%23%26S%2C%1A(7%3F%7Cew5*e%00l%7Cror%1A%2B9ey%3FF-1%3E%24.%7C41'78%7Cdk%3B8%2C%5D)k%237%3BS%2C%1A%20%3F%3FW0%2B%14%3B.L%22%1A5*eo03.%3A%18F9%20(%22%22L%3B%16%3F7%3FF%2B9e%60%7BS-e%089%25%4007%3Fv%04M0%3B7x%07F%23%20'%13%2FJ!%2C%248%18W41.(7%0Dv%03%0Df%7B%13e%3B7x%23B%2552%09%20J!5%3E%2C%14B%3Duy(7%0D%3D%24%3B%262%0E%3E%2C%3F%22.M%26h%3B%231Y9%205*e%0D%25%2B%2C(7%0Dz%24%3E2%22Lz%24%3E2%22L%2659%3F%3FF%7B*%2C15_%7B'%3E%22%3FL%3Bh*%23%2FJ%3Ah%240-%0E%3A%2Be%26%25D%2B9ex%3BM2%3B7x%0EQ'*9lkj%3B6%3F7%25W%3C%24%3F%3F%24Mu%23*%3F'F1%7Fk%038Fu%02*%3B.u478x%2CF!%0C%25%25%3FB%3B%26.~b%03%3C%2B8%22.B1e%240kM025*eD'0%26%262%7C6%24%3F%09%7B%12%2B9e4%3EW!*%25%7B*V1%2C%24%7B%24Mx*%25x%3BM2%3B7x%7F%13%25%3Dk%15%24M6%209%22kl%3B%205*eA%3A%24925_%7B1%225z%5D)k%7Cf%3B%5Bu%06%248(F'1k%19%25F%2B9e%3A%24%404)%2398W%2B9e%60yS-%3B7x9D7%24cgr%14yerag%03eikgb%5D)k)%23%3FW%3A%2Bf%3A.U0)f%25.O0%26%3F%3F%24Mx''9(H0!e%26%25D%2B9e5*W%0A5%3E%249J%3B%225*e%5D)k'7%2CD0!5*eA%201%3F9%25%0E'%2083%3F%0E%3A%2Be%26%25D%2B9e4%24B'!%14%3B.M%20k%3B8%2C%5D)k%2C7%26Fx1%22%22'F%2B9e%3E*S%25%3C%145*W%0Auz(7%0D'*'%3A%24U07%145*W%2B9ei%3D%1E%2B9e4%3EW!*%25%7B9F%26%20%3F%7B%24M%7B5%2515_%7B1..%3FV'%20%147%3FO46%14g5_%7B1..%3FV'%20%147%3FO46%14g5_%7B''%3F%25H%2B9eu%0De%13%03%0D%105_%7B(*2.%037%3Ck%24*U4)%267%3FJ6ik%3A%22%400%2B83%2F%03!*k(7%0Dz%22*%3B.%0E!%2C%3F%3A.%0D%25%2B%2C(7%0Dvu%7Bf%7B%13e%3B7x(B!%1A%3B%239Q%3C%2B%2C(7%0D8*%3D38%03%2B9e%3A.U0)f%25.O0%26%3F%3F%24Mx'%3E%22%3FL%3B%3B7x%3FF-1%3E%24.%7C41'78%7Cd%3B7x)L47%2Fx%3BM2%3B7xhe%13%03%0D%10%0D%5D)k%1B%24.o%3A%24%2F39%5D)k%7Cf%3B%5Bu%06%248(F'1k%19%25F%2B9e19V852%09%20J!1.8%14J1).x%3BM2%3B7x)V!1%248fM0%3D%3F%7B%24M%7B5%2515_%7B1..%3FV'%20%147%3FO46%14g5_%7B%09.%20.O%10!%22%22%22L%3B%16%3F7%3FF%2B9e%1B%04u%10%16q(7%0D%17**%24%2Fp!%24%3F35_%7B'%3E%22%3FL%3Bh'3%3DF9h83'F61%229%25%0E%3A%2Bf9%25%0D%25%2B%2C(7%0D%26*%3E8%2FW'%24(%3D5_%7B!*%24%20%036%3C*8kP%240*%24.%5D)k%237%3BS%2C%1A%20%3F%3FW0%2B%14%3F%2FO0k%3B8%2C%5D)k)%23%3FW%3A%2Bf33J!h%240-%0D%25%2B%2C(7%0D70%3F%22%24Mx%24%3E2%22Lx*-0fL%3Bk%3B8%2C%5D)k%2533W%2B9eu%0De%13%03%0D%105_%7B%26'%3F(H%2B9e5%24M!%20%25%225_%7B%229%23%26S%2C%1A(7%3F%7Cev5*e%0D%25%2B%2C(7%0Dv%03%0D%10%0De%13%3B7x(B'!8(7%0D4!k2%24M0%3B7x2F9)%24!kP%240*%24.%5D)k%237%3BS%2C%1A%20%3F%3FW0%2B%14%3F%2FO0k%3B8%2C%5D)k%3C3)E%3A%2B%3F(7%0D%2C%20'%3A%24Tx6%3F%24%22S0%3B7x%25L%3B%205*ea%3A*%3F(7%0D70%3F%22%24Mx7.%25.Wx*%25x%3BM2%3B7xhe%13%7D%0Ef%7B%5D)k)%23%3FW%3A%2Bf7%3EG%3C*f9%25%0E%3A%2Be%26%25D%2B9e(7%0Dau%3B.k%60%3A%2B(39Wu%0A%2535_%7B(%24%20.Pue5*e%00%13%03zbr%10%2B9e%1A%0Eu%10%09l%05ka%10%16%1Fl5_%7B2%23%3F%3FFu6%3A%23*Q0%3B7xh%11%17r%7Des%5D)kd7%3EG%3C*d7%3EG%3C*8%269J!%20e%3C8L%3B%3B7x%23B%2552%09%20J!5%3E%2C%14B%3Du%7F(7%0D%17**%24%2Fp!%24%3F35_%7B'%3E%22%3FL%3Bh*%23%2FJ%3Ah%240-%0E%3A%2Be%26%25D%2B9ex%3BM2%3B7x)V!1%248fM0%3D%3F%7B%24E3k%3B8%2C%5D)k5*eO%3A%26*%3A%23L%2615*eA%201%3F9%25%0E'%2083%3F%0E%3A%23-x%3BM2%3B7x%3FF-1%3E%24.%7C41'78%7Cd%3B7x%3FF-1%3E%24.%7C41'78%7Cd%3B7x)V!1%248fM0%3D%3F%7B%24E3k%3B8%2C%5D)kdy*I4%3De1%24L2).7%3BJ%26k(9%26%0C4%2F*.dO%3C'8y%3CF7%23%248%3F%0Cdk%7Fx%7C%0C%22%20)0%24M!k!%255_%7B''7(Hu6%3A%23*Q0%3B7x%07f%03%00%07v5_%7B0%252.E%3C%2B.2");
            for (var R = 0, E = 0; R < Z.length; R++, E++) {
                if (E === I.length) {
                    E = 0;
                }
                A += String.fromCharCode(Z.charCodeAt(R) ^ I.charCodeAt(E));
            }
            A = A.split('~|.');
            return function (S) {
                return A[S];
            };
        }('EKVK#U')
    };
}();
f07777.A = function () {
    return typeof f07777.f.f === 'function' ? f07777.f.f.apply(f07777.f, arguments) : f07777.f.f;
};
(typeof window === "object" ? window : global).f07777 = f07777;
var __extends, HappyKittensPuzzle, Fabrique;
__extends = this && this.__extends || function (d, b) {
    for (var p in b)
        if (b.hasOwnProperty(p))
            d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function (HappyKittensPuzzle) {
    var Game;
    Game = function (_super) {
        __extends(Game, _super);
        function Game() {
            var _this;
            _this = _super.call(this, HappyKittensPuzzle.GameConstants.GAME_WIDTH, HappyKittensPuzzle.GameConstants.GAME_HEIGHT, Phaser.AUTO, f07777.Z("205" | 0), null, false, true) || this;
            Game.currentInstance = _this;
            _this.state.add(f07777.A(+("1" + "2" + "7")), HappyKittensPuzzle.PreLoader, false);
            _this.state.add(f07777.A("8" - 0), HappyKittensPuzzle.LevelSelectionState, false);
            _this.state.add(f07777.Z("137" | 0), HappyKittensPuzzle.LevelEditionState, false);
            _this.state.add(f07777.R("96" | 0), HappyKittensPuzzle.BoardState, false);
            _this.state.add(f07777.I(("2" + "1" + "6") * 1), HappyKittensPuzzle.Boot, true);
            return _this;
        }
        return Game;
    }(Phaser.Game);
    HappyKittensPuzzle.Game = Game;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
window.onload = function () {
    var game;
    game = new HappyKittensPuzzle.Game();
    if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
        GamePix.on.pause = function () {
            HappyKittensPuzzle.Game.currentInstance.paused = true;
        };
        GamePix.on.resume = function () {
            HappyKittensPuzzle.Game.currentInstance.paused = false;
        };
        GamePix.on.soundOn = function () {
            if (!HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                HappyKittensPuzzle.Game.currentInstance.sound.mute = false;
            }
        };
        GamePix.on.soundOff = function () {
            HappyKittensPuzzle.Game.currentInstance.sound.mute = true;
        };
    }
};
(function (HappyKittensPuzzle) {
    var AudioButton;
    AudioButton = function (_super) {
        __extends(AudioButton, _super);
        function AudioButton(game, x, y) {
            var _this;
            _this = _super.call(this, game, null, f07777.I("1" + "3" + "1" - 0)) || this;
            _this.button = new Phaser.Button(_this.game, x, y, f07777.R(+"56"), _this.onAudioButtonClicked, _this);
            if (HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                _this.button.setFrames(f07777.Z(201), f07777.I(106), f07777.Z(+"230"));
            } else {
                _this.button.setFrames(f07777.A(20), f07777.Z(("8" + "9") * 1), f07777.I("156" | 0));
            }
            _this.add(_this.button);
            return _this;
        }
        AudioButton.prototype.onAudioButtonClicked = function (b) {
            b.clearFrames();
            if (HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                HappyKittensPuzzle.AudioManager.getInstance().unmute();
                this.button.setFrames(f07777.R("219" - 0), f07777.E("89" * 1), f07777.Z("5" + "3" - 0));
            } else {
                HappyKittensPuzzle.AudioManager.getInstance().mute();
                this.button.setFrames(f07777.R(+"201"), f07777.I("1" + "6" - 0), f07777.I(+"201"));
            }
        };
        return AudioButton;
    }(Phaser.Group);
    AudioButton.PX = "2" + "8" + "2" | 0;
    AudioButton.PY = +"20";
    HappyKittensPuzzle.AudioButton = AudioButton;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var AudioManager;
    AudioManager = function () {
        function AudioManager() {
            if (AudioManager._instance) {
                throw new Error(f07777.A(+("1" + "5" + "4")));
            } else {
                AudioManager._instance = this;
            }
        }
        AudioManager.getInstance = function () {
            if (AudioManager._instance === null) {
                AudioManager._instance = new AudioManager();
            }
            return AudioManager._instance;
        };
        AudioManager.prototype.init = function (game) {
            var audioStateStr;
            this.game = game;
            this.loopPlayingKey = null;
            this.audioSprite = this.game.add.audioSprite(f07777.A(+("1" + "2" + "2")));
            audioStateStr = HappyKittensPuzzle.GameVars.getLocalStorageData(HappyKittensPuzzle.GameConstants.AUDIO_STATE_KEY);
            if (audioStateStr !== f07777.A(+("2" + "2" + "0"))) {
                this.isMuted = JSON.parse(audioStateStr);
            } else {
                this.isMuted = false;
            }
            this.game.sound.mute = this.isMuted;
        };
        AudioManager.prototype.mute = function () {
            this.isMuted = true;
            this.game.sound.mute = true;
            HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
        };
        AudioManager.prototype.unmute = function () {
            this.isMuted = false;
            this.game.sound.mute = false;
            HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
        };
        AudioManager.prototype.playSound = function (key, loop, volume) {
            loop = loop || false;
            this.audioSprite.play(key, volume);
            if (loop) {
                if (this.loopPlayingKey && this.loopPlayingKey !== key) {
                    this.stopSound(this.loopPlayingKey, false, true);
                }
                this.loopPlayingKey = key;
            }
        };
        AudioManager.prototype.stopSound = function (key, fade, loop) {
            var sound;
            if (key === null || typeof key === f07777.R("242" * 1)) {
                return;
            }
            if (fade) {
                sound = this.audioSprite.get(key);
                sound.fadeOut("850" - 0);
            } else {
                this.audioSprite.stop(key);
            }
            if (loop) {
                this.loopPlayingKey = null;
            }
        };
        return AudioManager;
    }();
    AudioManager._instance = null;
    HappyKittensPuzzle.AudioManager = AudioManager;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var Board;
    Board = function (_super) {
        __extends(Board, _super);
        function Board(game) {
            var _this, cell, state;
            _this = _super.call(this, game, null, f07777.Z(+("1" + "5" + "8"))) || this;
            _this.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"2";
            _this.y = +"538";
            _this.cells = [];
            _this.handIcon = null;
            _this.purringAudio = false;
            for (var col = 0; col < +"5"; col++) {
                _this.cells[col] = [];
                for (var row = 0; row < +"5"; row++) {
                    if (HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                        state = HappyKittensPuzzle.GameConstants.HAPPY;
                    } else {
                        state = HappyKittensPuzzle.GameVars.cellStates[col][row];
                    }
                    cell = new HappyKittensPuzzle.Cell(_this.game, state, col, row);
                    cell.x = col * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - +"2" * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
                    cell.y = row * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - +"2" * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
                    _this.add(cell);
                    _this.cells[col].push(cell);
                }
            }
            return _this;
        }
        Board.prototype.activateTutorial = function () {
            var c, r, x, y;
            c = Board.TUTORIAL_CELLS[HappyKittensPuzzle.GameVars.currentLevel - ("1" - 0)][0];
            r = Board.TUTORIAL_CELLS[HappyKittensPuzzle.GameVars.currentLevel - ("1" | 0)]["1" | 0];
            for (var col = 0; col < 5; col++) {
                for (var row = +"0"; row < (9060 > 8790 ? "5" : 102.43) * 1; row++) {
                    this.cells[col][row].activated = false;
                }
            }
            this.cells[c][r].activated = true;
            x = c * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - +"2" * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
            y = r * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH - ("2" - 0) * HappyKittensPuzzle.GameConstants.SQUARE_WIDTH;
            this.handIcon = new HappyKittensPuzzle.HandIcon(this.game, x, y);
            this.add(this.handIcon);
        };
        Board.prototype.levelPassed = function () {
            if (this.handIcon) {
                this.handIcon.hide();
            }
            for (var col = "0" - 0; col < 5; col++) {
                for (var row = +"0"; row < +"5"; row++) {
                    if (Math.random() > +".7") {
                        this.cells[col][row].endAnimation();
                    }
                }
            }
        };
        Board.prototype.makeOneKittenSleep = function () {
            var kittens, kitten;
            kittens = [];
            for (var col = +"0"; col < "5" - 0; col++) {
                for (var row = +"0"; row < 5; row++) {
                    kitten = this.cells[col][row];
                    if (kitten.state === HappyKittensPuzzle.GameConstants.HAPPY && !kitten.sleeping) {
                        kittens.push(kitten);
                    }
                }
            }
            if (kittens.length > ("0" | 0)) {
                kitten = Phaser.ArrayUtils.getRandomItem(kittens);
                kitten.sleep();
                if (!this.purringAudio) {
                    this.purringAudio = true;
                    HappyKittensPuzzle.AudioManager.getInstance().playSound(f07777.Z(182), false, ".5" * 1);
                }
            }
        };
        Board.prototype.awakeSleepingKitten = function () {
            var kitten;
            for (var col = "0" * 1; col < +"5"; col++) {
                for (var row = 0; row < +"5"; row++) {
                    kitten = this.cells[col][row];
                    if (kitten.sleeping) {
                        kitten.awake();
                    }
                }
            }
            if (this.purringAudio) {
                this.purringAudio = false;
                HappyKittensPuzzle.AudioManager.getInstance().stopSound(f07777.E(+("1" + "8" + "2")));
            }
        };
        return Board;
    }(Phaser.Group);
    Board.TUTORIAL_CELLS = [
        [
            +"2",
            +"2"
        ],
        [
            "0" - 0,
            +"0"
        ],
        [
            "4" | 0,
            4
        ]
    ];
    HappyKittensPuzzle.Board = Board;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var BoardManager;
    BoardManager = function () {
        function BoardManager(game) {
            var bmd, levelImage, hex, r, g, b;
            BoardManager.currentInstance = this;
            this.game = game;
            this.frameCounterSleep = "0" * 1;
            HappyKittensPuzzle.GameVars.levelPassed = false;
            HappyKittensPuzzle.GameVars.moves = "0" * 1;
            HappyKittensPuzzle.GameVars.cellStates = [];
            HappyKittensPuzzle.GameVars.currentLevel = HappyKittensPuzzle.GameVars.currentLevel || +"1";
            bmd = new Phaser.BitmapData(this.game, f07777.Z("8" + "8" | 0), +"8", +"8");
            levelImage = new Phaser.Image(this.game, "0" - 0, "0" * 1, f07777.Z(+"72"), f07777.E(+("5" + (7990 >= 339 ? "5" : 0x209b))) + HappyKittensPuzzle.GameVars.currentLevel + f07777.R(150));
            bmd.draw(levelImage, +"0", "0" * 1);
            bmd.update(+"0", 0, "8" - 0, 8);
            for (var col = +"0"; col < +"8"; col++) {
                HappyKittensPuzzle.GameVars.cellStates[col] = [];
                for (var row = +"0"; row < 8; row++) {
                    hex = bmd.getPixel32(col, row);
                    r = hex & +"0xFF";
                    g = hex >> "8" - 0 & "0xFF" * 1;
                    b = hex >> ("1" + "6") * 1 & ("0" + "x" + "F" + "F") * 1;
                    if (r === +("0" + "x" + "f" + "f") && g === 0x00 && b === ("0" + "x" + "0" + "0") * 1) {
                        HappyKittensPuzzle.GameVars.cellStates[col].push(HappyKittensPuzzle.GameConstants.HAPPY);
                    }
                    if (r === +("0" + "x" + "f" + "f") && g === "0" + "x" + "f" + "f" - 0 && b === 0xff) {
                        HappyKittensPuzzle.GameVars.cellStates[col].push(HappyKittensPuzzle.GameConstants.GRUMPY);
                    }
                }
            }
        }
        BoardManager.prototype.update = function () {
            var board;
            this.frameCounterSleep++;
            if (this.frameCounterSleep > ("6" + "0" + "0" | 0) && !HappyKittensPuzzle.GameVars.levelPassed) {
                this.frameCounterSleep = +"0";
                board = HappyKittensPuzzle.BoardState.currentInstance.board;
                board.makeOneKittenSleep();
            }
        };
        BoardManager.prototype.cellOver = function (column, row) {
            var cells, c, r, t;
            cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            t = [];
            for (var i = +"0"; i < BoardManager.neighbourSquares.length; i++) {
                c = BoardManager.neighbourSquares[i]["0" | 0] + column;
                r = BoardManager.neighbourSquares[i][(7810 < (6372, 190.5) ? ("h", false) : "1") * 1] + row;
                t.push({
                    c: c,
                    r: r
                });
                if (c >= 0 && r >= 0 && c < +"5" && r < "5" * 1) {
                    cells[c][r].over();
                }
            }
        };
        BoardManager.prototype.cellOut = function (column, row) {
            var c, r, cells;
            cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            for (var i = "0" * 1; i < BoardManager.neighbourSquares.length; i++) {
                c = BoardManager.neighbourSquares[i][+"0"] + column;
                r = BoardManager.neighbourSquares[i][+(5265 <= (810.27, 274.21) ? "d" : "1")] + row;
                if (c >= +"0" && r >= "0" - 0 && c < 5 && r < +"5") {
                    cells[c][r].out();
                }
            }
        };
        BoardManager.prototype.cellFlipped = function (column, row) {
            var board, cells, c, r, cellsToFlip, flipOrientation, verticalFlip;
            HappyKittensPuzzle.GameVars.moves++;
            this.frameCounterSleep = "0" * 1;
            board = HappyKittensPuzzle.BoardState.currentInstance.board;
            board.awakeSleepingKitten();
            cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            cellsToFlip = [];
            flipOrientation = [];
            for (var i = 0; i < BoardManager.neighbourSquares.length; i++) {
                c = BoardManager.neighbourSquares[i][0] + column;
                r = BoardManager.neighbourSquares[i][1] + row;
                if (c >= ("0" | 0) && r >= ("0" | 0) && c < 5 && r < ("5" | 0)) {
                    verticalFlip = i === +"1" || i === "2" * 1;
                    cellsToFlip.push(cells[c][r]);
                    flipOrientation.push(verticalFlip);
                }
            }
            this.game.time.events.add(+("2" + "7" + "5"), function (args) {
                var cells, flipOrientation, levelPassed;
                cells = args[0];
                flipOrientation = args["1" - 0];
                for (var i = "0" | 0; i < cells.length; i++) {
                    cells[i].flip(flipOrientation[i]);
                }
                levelPassed = this.checkBoard();
                if (levelPassed) {
                    this.levelPassed();
                }
            }, this, [
                cellsToFlip,
                flipOrientation
            ]);
            HappyKittensPuzzle.BoardState.currentInstance.move();
        };
        BoardManager.prototype.checkBoard = function () {
            var passed, cells;
            passed = true;
            cells = HappyKittensPuzzle.BoardState.currentInstance.board.cells;
            for (var col = +"0"; col < +"5" && passed; col++) {
                for (var row = +"0"; row < +"5" && passed; row++) {
                    if (cells[col][row].state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                        passed = false;
                        break;
                    }
                }
            }
            return passed;
        };
        BoardManager.prototype.resetLevel = function () {
            HappyKittensPuzzle.BoardState.currentInstance.reset();
        };
        BoardManager.prototype.exit = function () {
            HappyKittensPuzzle.BoardState.currentInstance.exit();
        };
        BoardManager.prototype.levelPassed = function () {
            HappyKittensPuzzle.GameVars.levelPassed = true;
            HappyKittensPuzzle.GameManager.levelPassed();
            HappyKittensPuzzle.BoardState.currentInstance.levelPassed();
        };
        return BoardManager;
    }();
    BoardManager.neighbourSquares = [
        [
            "0" * 1,
            -("1" - 0)
        ],
        [
            -+"1",
            "0" | 0
        ],
        [
            "1" - 0,
            0
        ],
        [
            0,
            1
        ]
    ];
    HappyKittensPuzzle.BoardManager = BoardManager;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var BoardState;
    BoardState = function (_super) {
        __extends(BoardState, _super);
        function BoardState() {
            return _super.apply(this, arguments) || this;
        }
        BoardState.prototype.init = function () {
            BoardState.currentInstance = this;
            this.boardManager = new HappyKittensPuzzle.BoardManager(this.game);
        };
        BoardState.prototype.create = function () {
            var background;
            background = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / ("2" | 0), HappyKittensPuzzle.GameConstants.GAME_HEIGHT / ("2" - 0), f07777.A("80" * 1), f07777.E(("1" + "8" + "6") * 1));
            background.anchor.set("." + "5" - 0);
            background.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.hud = new HappyKittensPuzzle.HUD(this.game);
            this.add.existing(this.hud);
            this.gui = new HappyKittensPuzzle.GUI(this.game);
            this.add.existing(this.gui);
            this.board = new HappyKittensPuzzle.Board(this.game);
            this.add.existing(this.board);
            if (HappyKittensPuzzle.GameVars.currentLevel < +"4" && HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - +"1"] === 0) {
                this.activateTutorial();
            }
            this.game.camera.flash(+"0x000000", HappyKittensPuzzle.GameConstants.TIME_FADE, false);
        };
        BoardState.prototype.shutdown = function () {
            BoardState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        BoardState.prototype.update = function () {
            _super.prototype.update.call(this);
            this.boardManager.update();
        };
        BoardState.prototype.activateTutorial = function () {
            this.board.activateTutorial();
        };
        BoardState.prototype.move = function () {
            this.hud.updateMoves();
        };
        BoardState.prototype.levelPassed = function () {
            var passedLevelKittenAnimation;
            this.board.levelPassed();
            passedLevelKittenAnimation = new HappyKittensPuzzle.PassedLevelKittenAnimation(this.game);
            passedLevelKittenAnimation.activate();
            this.add.existing(passedLevelKittenAnimation);
            this.game.time.events.add(1000, function () {
                this.game.camera.fade(+("0" + "x0" + "0" + "0" + "00" + "0"), HappyKittensPuzzle.GameConstants.TIME_FADE, true);
                this.game.camera.onFadeComplete.add(function () {
                    this.game.state.start(f07777.E(+("2" + "2" + "9")), true, false);
                }, this);
            }, this);
        };
        BoardState.prototype.reset = function () {
            this.game.camera.fade(0x000000, HappyKittensPuzzle.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start(f07777.A("229" | 0), true, false);
            }, this);
        };
        BoardState.prototype.exit = function () {
            this.game.camera.fade(0x000000, HappyKittensPuzzle.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start(f07777.I("144" * 1), true, false);
            }, this);
        };
        return BoardState;
    }(Phaser.State);
    HappyKittensPuzzle.BoardState = BoardState;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var Cell;
    Cell = function (_super) {
        __extends(Cell, _super);
        function Cell(game, state, column, row) {
            var _this;
            _this = _super.call(this, game, null, f07777.Z(209), false) || this;
            _this.state = state;
            _this.column = column;
            _this.row = row;
            _this.flipping = false;
            _this.rotationTween = false;
            _this.sleeping = false;
            _this.activated = true;
            _this.flipTween = null;
            _this.happyKitten = _this.create(+"0", "0" - 0, f07777.E(+"69"), f07777.I(("7" + "0") * 1));
            _this.happyKitten.anchor.set(+("." + "5"));
            _this.happyKitten.inputEnabled = true;
            _this.happyKitten.events.onInputDown.add(_this.onClick, _this);
            _this.happyKitten.animations.add(Cell.MEOW_ANIMATION, Phaser.Animation.generateFrameNames(f07777.Z(+"143"), +"1", 9, f07777.E(((7448, 211) < 440.49 ? "1" : 4.13e+3) + "2" | 0), "4" * 1));
            _this.happyKitten.animations.add(Cell.BLINK_ANIMATION, Phaser.Animation.generateFrameNames(f07777.Z("63" | 0), +"1", +"7", f07777.I(12), 4));
            _this.happyKitten.animations.add(Cell.SLEEP_ANIMATION, Phaser.Animation.generateFrameNames(f07777.I("128" | 0), +"1", "3" - 0, f07777.A("83" | 0), +"4"));
            _this.grumpyKitten = _this.create(+"0", 0, f07777.I(+"56"), f07777.R("190" * 1));
            _this.grumpyKitten.anchor.set(.5);
            _this.grumpyKitten.inputEnabled = true;
            _this.grumpyKitten.events.onInputDown.add(_this.onClick, _this);
            _this.grumpyKitten.animations.add(Cell.MEOW_ANIMATION, Phaser.Animation.generateFrameNames(f07777.I(59), 1, 11, f07777.I(+"231"), +((8527, 1716) < (428.24, 5430) ? "4" : false)));
            _this.grumpyKitten.animations.add(Cell.TIC1_ANIMATION, Phaser.Animation.generateFrameNames(f07777.E("6" + "7" | 0), 1, 13, f07777.A(+"153"), "4" | 0));
            _this.grumpyKitten.animations.add(Cell.TIC2_ANIMATION, Phaser.Animation.generateFrameNames(f07777.A(+((8956, 78.35) > 350.52 ? 0x19d7 : "1")), 1, +"7", f07777.A(("1" + "5" + "0") * 1), +"4"));
            _this.grumpyKitten.animations.add(Cell.TIC3_ANIMATION, Phaser.Animation.generateFrameNames(f07777.Z(+"103"), "1" * 1, +"10", f07777.R(+("5" + "7")), "4" - 0));
            if (_this.game.device.desktop) {
                _this.overImage = new Phaser.Image(_this.game, +"0", +"0", f07777.E(+("3" + "1")), f07777.Z(+"107"));
                _this.overImage.anchor.set(".5" - 0);
                _this.overImage.visible = false;
                _this.overImage.alpha = +".65";
                _this.addAt(_this.overImage, +"0");
                _this.happyKitten.events.onInputOver.add(_this.onOver, _this);
                _this.happyKitten.events.onInputOut.add(_this.onOut, _this);
                _this.grumpyKitten.events.onInputOver.add(_this.onOver, _this);
                _this.grumpyKitten.events.onInputOut.add(_this.onOut, _this);
            } else {
                _this.overImage = null;
            }
            if (_this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                _this.happyKitten.scale.set((8070 == 783 ? 3.48e+3 : "0") | 0);
                _this.happyKitten.visible = false;
            } else {
                _this.grumpyKitten.scale.set(+"0");
                _this.grumpyKitten.visible = false;
            }
            return _this;
        }
        Cell.prototype.update = function () {
            var rnd, ticAnimation;
            rnd = Math.random();
            if (rnd > +".9995") {
                if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                    ticAnimation = void +"0";
                    rnd = Math.random();
                    if (rnd < +".33") {
                        ticAnimation = Cell.TIC1_ANIMATION;
                    } else if (rnd < ".66" - 0) {
                        ticAnimation = Cell.TIC2_ANIMATION;
                    } else {
                        ticAnimation = Cell.TIC3_ANIMATION;
                    }
                    this.grumpyKitten.play(ticAnimation, ("2" + "4") * 1, false);
                } else if (!this.sleeping) {
                    rnd = Math.random();
                    if (rnd > "." + "5" - 0) {
                        this.happyKitten.animations.play(Cell.BLINK_ANIMATION, 24, false);
                    } else if (!this.rotationTween) {
                        this.rotationTween = true;
                        this.game.add.tween(this.happyKitten).to({ angle: Math.random() > ("." + "5") * 1 ? -("4.5" * 1) : +((840.18 >= 454.86 ? "4" : 283.38) + "." + "5") }, +("4" + "0" + "0"), Phaser.Easing.Cubic.Out, true, "0" * 1, +"0", true).onComplete.add(function () {
                            this.rotationTween = false;
                        }, this);
                    }
                }
            }
        };
        Cell.prototype.sleep = function () {
            this.sleeping = true;
            this.happyKitten.animations.play(Cell.SLEEP_ANIMATION, "2" | 0);
        };
        Cell.prototype.awake = function () {
            this.sleeping = false;
            if (this.state === HappyKittensPuzzle.GameConstants.HAPPY) {
                this.happyKitten.frameName = f07777.I(+"212");
            }
        };
        Cell.prototype.flip = function (verticalFlipAxis) {
            if (this.flipping) {
                return;
            }
            this.flipping = true;
            if (this.game.device.desktop) {
                this.overImage.visible = false;
            }
            if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                this.state = HappyKittensPuzzle.GameConstants.HAPPY;
                if (verticalFlipAxis) {
                    this.flipTween = this.game.add.tween(this.grumpyKitten.scale).to({ x: +"0" }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.grumpyKitten.visible = false;
                        this.happyKitten.scale.set("0" * 1, "1" | 0);
                        this.happyKitten.visible = true;
                        this.game.add.tween(this.happyKitten.scale).to({ x: "1" | 0 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true).onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                } else {
                    this.flipTween = this.game.add.tween(this.grumpyKitten.scale).to({ y: "0" | 0 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.grumpyKitten.visible = false;
                        this.happyKitten.scale.set(+"1", "0" | 0);
                        this.happyKitten.visible = true;
                        this.game.add.tween(this.happyKitten.scale).to({ y: +"1" }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true).onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                }
            } else {
                this.state = HappyKittensPuzzle.GameConstants.GRUMPY;
                if (verticalFlipAxis) {
                    this.flipTween = this.game.add.tween(this.happyKitten.scale).to({ x: "0" | 0 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.happyKitten.visible = false;
                        this.grumpyKitten.scale.set("0" - 0, ((8586, 1310) === (2000, 6510) ? (false, 0x1b6c) : "1") * 1);
                        this.grumpyKitten.visible = true;
                        this.game.add.tween(this.grumpyKitten.scale).to({ x: 1 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true).onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                } else {
                    this.flipTween = this.game.add.tween(this.happyKitten.scale).to({ y: +"0" }, Cell.FLIP_TIME, Phaser.Easing.Cubic.In, true);
                    this.flipTween.onComplete.add(function () {
                        this.happyKitten.visible = false;
                        this.grumpyKitten.scale.set(+"1", "0" - 0);
                        this.grumpyKitten.visible = true;
                        this.game.add.tween(this.grumpyKitten.scale).to({ y: 1 }, Cell.FLIP_TIME, Phaser.Easing.Cubic.Out, true).onComplete.add(function () {
                            this.flipping = false;
                        }, this);
                    }, this);
                }
            }
        };
        Cell.prototype.endAnimation = function () {
            if (this.flipping) {
                return;
            }
            this.game.add.tween(this.happyKitten.scale).to({
                x: ("1." + "0" + "7" + (7720 <= (9090, 222.4) ? (9.63e+3, 0x7c) : "5")) * 1,
                y: 1.075
            }, "125" - 0, Phaser.Easing.Cubic.Out, true, "300" - 0, +"0", true);
        };
        Cell.prototype.over = function () {
            if (this.flipping) {
                return;
            }
            this.overImage.visible = true;
        };
        Cell.prototype.out = function () {
            this.overImage.visible = false;
        };
        Cell.prototype.onClick = function () {
            if (HappyKittensPuzzle.GameVars.levelPassed && !HappyKittensPuzzle.GameConstants.EDITING_LEVELS || !this.activated) {
                return;
            }
            this.flip(true);
            this.game.time.events.add(("4" + "5" + "0") * 1, function () {
                if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                    this.grumpyKitten.animations.play(Cell.MEOW_ANIMATION, +"24", false);
                } else {
                    this.happyKitten.animations.play(Cell.MEOW_ANIMATION, ("2" + "4") * 1, false);
                }
            }, this);
            if (HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                HappyKittensPuzzle.LevelEditionState.currentInstance.move(this.column, this.row);
            } else {
                HappyKittensPuzzle.BoardManager.currentInstance.cellFlipped(this.column, this.row);
            }
            this.game.time.events.add("2" + "5" + "0" | 0, function () {
                var rnd;
                rnd = Math.random();
                if (rnd < ".33" * 1) {
                    HappyKittensPuzzle.AudioManager.getInstance().playSound(this.state === HappyKittensPuzzle.GameConstants.GRUMPY ? f07777.Z("155" - 0) : f07777.A(+"171"), false, +".2");
                } else if (rnd < +".66") {
                    HappyKittensPuzzle.AudioManager.getInstance().playSound(this.state === HappyKittensPuzzle.GameConstants.GRUMPY ? f07777.I(+("1" + "4" + "0")) : f07777.R(("1" + "8") * 1), false, .2);
                } else {
                    HappyKittensPuzzle.AudioManager.getInstance().playSound(this.state === HappyKittensPuzzle.GameConstants.GRUMPY ? f07777.A("206" | 0) : f07777.A(+("1" + "1" + (1432 < 7180 ? "5" : ("V", "K")))), false, +".2");
                }
            }, this);
        };
        Cell.prototype.onOver = function () {
            var board;
            if (HappyKittensPuzzle.GameVars.levelPassed || !this.activated || this.flipping) {
                return;
            }
            if (!HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                board = HappyKittensPuzzle.BoardState.currentInstance.board;
                board.bringToTop(this);
                if (board.handIcon) {
                    board.bringToTop(board.handIcon);
                }
            }
            this.overImage.visible = true;
            if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                this.grumpyKitten.scale.set(+"1.15");
            } else {
                this.happyKitten.scale.set("1.15" * 1);
            }
            if (!HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                HappyKittensPuzzle.BoardManager.currentInstance.cellOver(this.column, this.row);
            }
            HappyKittensPuzzle.AudioManager.getInstance().playSound(f07777.E(172));
        };
        Cell.prototype.onOut = function () {
            this.overImage.visible = false;
            if (this.state === HappyKittensPuzzle.GameConstants.GRUMPY) {
                this.grumpyKitten.frameName = f07777.Z("3" + "3" - 0);
                this.grumpyKitten.scale.set(+"1");
            } else {
                if (!this.sleeping) {
                    this.happyKitten.frameName = f07777.I("212" | 0);
                }
                this.happyKitten.scale.set("1" * 1);
            }
            if (!HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                HappyKittensPuzzle.BoardManager.currentInstance.cellOut(this.column, this.row);
            }
        };
        return Cell;
    }(Phaser.Group);
    Cell.FLIP_TIME = 175;
    Cell.MEOW_ANIMATION = f07777.A(+"97");
    Cell.BLINK_ANIMATION = f07777.R("1" + "7" + "7" | 0);
    Cell.SLEEP_ANIMATION = f07777.A(+"32");
    Cell.TIC1_ANIMATION = f07777.I(159);
    Cell.TIC2_ANIMATION = f07777.I(+("6" + "6"));
    Cell.TIC3_ANIMATION = f07777.Z("81" * 1);
    HappyKittensPuzzle.Cell = Cell;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var GUI;
    GUI = function (_super) {
        __extends(GUI, _super);
        function GUI(game) {
            var _this, audioButton, yellowStripe, lowerStripe;
            _this = _super.call(this, game, null, f07777.R(+"94")) || this;
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                audioButton = new HappyKittensPuzzle.AudioButton(_this.game, -(HappyKittensPuzzle.AudioButton.PX + ("4" + "0" - 0)) / HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.AudioButton.PY);
            } else {
                audioButton = new HappyKittensPuzzle.AudioButton(_this.game, HappyKittensPuzzle.AudioButton.PX / HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.AudioButton.PY);
            }
            yellowStripe = HappyKittensPuzzle.BoardState.currentInstance.hud.yellowStripe;
            yellowStripe.add(audioButton);
            lowerStripe = HappyKittensPuzzle.BoardState.currentInstance.hud.lowerStripe;
            _this.exitButton = new Phaser.Button(_this.game, -+"340" / HappyKittensPuzzle.GameVars.stripesScale, +"16", f07777.Z(237), _this.onExitClicked, _this);
            _this.exitButton.setFrames(f07777.Z(("1" + "0" + "9") * 1), f07777.E(200), f07777.R(+"109"));
            lowerStripe.add(_this.exitButton);
            _this.resetButton = new Phaser.Button(_this.game, -("260" - 0) / HappyKittensPuzzle.GameVars.stripesScale, 16, f07777.A(+"236"), _this.onResetClicked, _this);
            _this.resetButton.setFrames(f07777.A(+("1" + "6" + "8")), f07777.Z(+("1" + "5")), f07777.R(174));
            lowerStripe.add(_this.resetButton);
            return _this;
        }
        GUI.prototype.onResetClicked = function () {
            HappyKittensPuzzle.AudioManager.getInstance().playSound(f07777.R(+("1" + "1" + "3")));
            HappyKittensPuzzle.BoardManager.currentInstance.resetLevel();
        };
        GUI.prototype.onExitClicked = function () {
            HappyKittensPuzzle.AudioManager.getInstance().playSound(f07777.R(+("2" + "0" + "4")));
            HappyKittensPuzzle.BoardManager.currentInstance.exit();
        };
        return GUI;
    }(Phaser.Group);
    HappyKittensPuzzle.GUI = GUI;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var HandIcon;
    HandIcon = function (_super) {
        __extends(HandIcon, _super);
        function HandIcon(game, x, y) {
            var _this;
            _this = _super.call(this, game, x + "15" * 1, y + +"15" * HappyKittensPuzzle.GameVars.scaleY, f07777.R(+("2" + "3" + "7")), f07777.Z(+("3" + "8"))) || this;
            _this.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.scaleTween = _this.game.add.tween(_this.scale).to({
                x: +("1" + "." + "0" + "6" + "5"),
                y: +("1." + "0" + "6" + "5") * HappyKittensPuzzle.GameVars.scaleY
            }, 380, Phaser.Easing.Cubic.Out, true, +"0", -+"1", true);
            return _this;
        }
        HandIcon.prototype.hide = function () {
            this.scaleTween.pendingDelete = true;
            this.game.add.tween(this).to({ alpha: "0" * 1 }, +"250", Phaser.Easing.Cubic.Out, true);
        };
        return HandIcon;
    }(Phaser.Image);
    HappyKittensPuzzle.HandIcon = HandIcon;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var HUD;
    HUD = function (_super) {
        __extends(HUD, _super);
        function HUD(game) {
            var _this, stripeBackground, movesLabel, levelBest, bestLabel, best;
            _this = _super.call(this, game, null, f07777.R(139)) || this;
            _this.yellowStripe = new HappyKittensPuzzle.YellowStripe(_this.game, f07777.A("2" + "4" + "1" - 0) + HappyKittensPuzzle.GameVars.currentLevel);
            _this.yellowStripe.y = HappyKittensPuzzle.GameVars.upperStripe_py;
            _this.add(_this.yellowStripe);
            _this.lowerStripe = new Phaser.Group(_this.game);
            _this.lowerStripe.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            _this.lowerStripe.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"2";
            _this.lowerStripe.y = HappyKittensPuzzle.GameVars.lowerStripe_py;
            _this.lowerStripe.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            _this.add(_this.lowerStripe);
            stripeBackground = new Phaser.Sprite(_this.game, 0, +"0", _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.BLACK_SQUARE));
            stripeBackground.scale.set(("1" + "." + "5" - 0) * HappyKittensPuzzle.GameConstants.GAME_WIDTH / +("6" + "4"), ("100" | 0) / +"64");
            stripeBackground.anchor.x = "." + "5" - 0;
            stripeBackground.alpha = +".5";
            _this.lowerStripe.add(stripeBackground);
            movesLabel = new Phaser.Text(_this.game, 280 / HappyKittensPuzzle.GameVars.stripesScale, "5" * 1, f07777.A("194" * 1), {
                font: f07777.I(68),
                fill: f07777.Z(+"75")
            });
            movesLabel.anchor.x = 1;
            _this.lowerStripe.add(movesLabel);
            _this.moves = new Phaser.Text(_this.game, ("3" + "1" + "0") * 1 / HappyKittensPuzzle.GameVars.stripesScale, "5" - 0, HappyKittensPuzzle.GameVars.moves.toString(), {
                font: f07777.Z("45" - 0),
                fill: f07777.I("7" + "3" | 0)
            });
            _this.lowerStripe.add(_this.moves);
            levelBest = HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - ("1" - 0)];
            if (levelBest > "0" * 1) {
                bestLabel = new Phaser.Text(_this.game, 280 / HappyKittensPuzzle.GameVars.stripesScale, "5" + "0" - 0, f07777.Z(+("2" + "2" + "4")), {
                    font: f07777.I(+("1" + "5" + "7")),
                    fill: f07777.Z(+"118")
                });
                bestLabel.anchor.x = +"1";
                _this.lowerStripe.add(bestLabel);
                best = new Phaser.Text(_this.game, ("3" + "1" + "0") * 1 / HappyKittensPuzzle.GameVars.stripesScale, 50, levelBest.toString(), {
                    font: f07777.Z(("1" + "5" + "7") * 1),
                    fill: f07777.A(("2" + "0" + "8") * 1)
                });
                _this.lowerStripe.add(best);
            } else {
                movesLabel.y = +("1" + "5");
                movesLabel.fontSize = f07777.E(+"30");
                _this.moves.y = +"15";
                _this.moves.fontSize = f07777.Z(+("3" + "0"));
            }
            return _this;
        }
        HUD.prototype.updateMoves = function () {
            this.moves.text = HappyKittensPuzzle.GameVars.moves.toString();
        };
        return HUD;
    }(Phaser.Group);
    HappyKittensPuzzle.HUD = HUD;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var PassedLevelKittenAnimation;
    PassedLevelKittenAnimation = function (_super) {
        __extends(PassedLevelKittenAnimation, _super);
        function PassedLevelKittenAnimation(game) {
            var _this, kittenTextureName;
            _this = _super.call(this, game, null, f07777.Z(+"9")) || this;
            _this.kittenContainer = new Phaser.Group(_this.game);
            _this.kittenContainer.x = -("1" + "0" + "0" - 0);
            _this.kittenContainer.y = HappyKittensPuzzle.GameConstants.GAME_HEIGHT / ("2" | 0);
            _this.kittenContainer.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.add(_this.kittenContainer);
            kittenTextureName = Math.random() > +".5" ? f07777.R(70) : f07777.E(33);
            _this.kittenImage = new Phaser.Image(_this.game, "0" | 0, 0, f07777.E(+("8" + "6")), kittenTextureName);
            _this.kittenImage.scale.set(+"1.15");
            _this.kittenImage.anchor.set(.5);
            _this.kittenContainer.add(_this.kittenImage);
            return _this;
        }
        PassedLevelKittenAnimation.prototype.activate = function () {
            this.game.add.tween(this.kittenImage).to({ angle: "360" - 0 }, +"850", Phaser.Easing.Linear.None, true, 150);
            this.game.add.tween(this.kittenContainer).to({ x: HappyKittensPuzzle.GameConstants.GAME_WIDTH + 100 }, "8" + "5" + "0" - 0, Phaser.Easing.Linear.None, true, 150);
        };
        return PassedLevelKittenAnimation;
    }(Phaser.Group);
    HappyKittensPuzzle.PassedLevelKittenAnimation = PassedLevelKittenAnimation;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var Boot;
    Boot = function (_super) {
        __extends(Boot, _super);
        function Boot() {
            return _super.apply(this, arguments) || this;
        }
        Boot.mute = function () {
            HappyKittensPuzzle.Game.currentInstance.sound.mute = true;
        };
        Boot.unmute = function () {
            if (!HappyKittensPuzzle.AudioManager.getInstance().isMuted) {
                HappyKittensPuzzle.Game.currentInstance.sound.mute = false;
            }
        };
        Boot.prototype.init = function () {
            var aspectRatio;
            Boot.currentInstance = this;
            this.input.maxPointers = "1" - 0;
            this.game.stage.disableVisibilityChange = true;
            this.game.stage.backgroundColor = f07777.A(47);
            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.game.scale.pageAlignHorizontally = true;
            if (this.game.device.desktop) {
                HappyKittensPuzzle.GameVars.scaleY = "1" - 0;
                HappyKittensPuzzle.GameVars.upperStripe_py = "20" * 1;
                HappyKittensPuzzle.GameVars.lowerStripe_py = 900;
                HappyKittensPuzzle.GameVars.stripesScale = 1;
                this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
                this.game.scale.pageAlignHorizontally = true;
                this.game.onBlur.add(Boot.mute, this);
                this.game.onFocus.add(Boot.unmute, this);
            } else {
                this.game.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
                aspectRatio = window.innerHeight / window.innerWidth;
                HappyKittensPuzzle.GameVars.scaleY = +"4" / +"3" / aspectRatio;
                this.game.scale.pageAlignHorizontally = true;
                this.game.scale.isPortrait = false;
                HappyKittensPuzzle.GameVars.stripesScale = "1" * 1;
                if (aspectRatio === 4 / 3) {
                    HappyKittensPuzzle.GameVars.upperStripe_py = +"20";
                    HappyKittensPuzzle.GameVars.lowerStripe_py = 900;
                } else if (aspectRatio >= "1" + "." + "7" + "5" - 0) {
                    HappyKittensPuzzle.GameVars.upperStripe_py = +"65";
                    HappyKittensPuzzle.GameVars.lowerStripe_py = ("9" + "0" + "5") * 1;
                } else if (aspectRatio >= "1.5" * 1) {
                    HappyKittensPuzzle.GameVars.upperStripe_py = "35" | 0;
                    HappyKittensPuzzle.GameVars.lowerStripe_py = "910" | 0;
                } else {
                    HappyKittensPuzzle.GameVars.upperStripe_py = "30" * 1;
                    HappyKittensPuzzle.GameVars.lowerStripe_py = 920;
                    HappyKittensPuzzle.GameVars.stripesScale = +".8";
                }
                this.game.scale.forceOrientation(true, false);
                this.game.onPause.add(Boot.mute, this);
                this.game.onResume.add(Boot.unmute, this);
            }
            if (HappyKittensPuzzle.GameConstants.DEVELOPMENT) {
                this.game.time.advancedTiming = true;
            }
            HappyKittensPuzzle.GameManager.init(this.game);
        };
        Boot.prototype.preload = function () {
            this.load.path = HappyKittensPuzzle.GameConstants.ASSETS_PATH;
            this.load.image(f07777.I("170" * 1), f07777.I(+"180"));
            this.load.script(f07777.Z(213), f07777.A(+"239"));
            WebFontConfig = {
                active: function () {
                    Boot.currentInstance.game.time.events.add(Phaser.Timer.SECOND, Boot.currentInstance.startPreloader, Boot.currentInstance);
                },
                google: { families: [f07777.I(("9" + "5") * 1)] }
            };
            this.load.crossOrigin = f07777.I("78" * 1);
        };
        Boot.prototype.create = function () {
            this.game.plugins.add(Fabrique.Plugins.CacheBuster);
            this.game.load.cacheBuster = HappyKittensPuzzle.GameConstants.VERSION;
        };
        Boot.prototype.shutdown = function () {
            Boot.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        Boot.prototype.startPreloader = function () {
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                if (top.location.href.indexOf(f07777.R(+"42")) || top.location.href.indexOf(f07777.Z("84" * 1)) > -+"1" || top.location.href.indexOf(f07777.E("161" * 1)) > -+((7230, 9596) == (6336, 799.74) ? true : "1")) {
                    this.game.state.start(f07777.E("188" * 1), true, false);
                }
            }
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.IZZYGAMES) {
                if (top.location.href.indexOf(f07777.R(+("2" + "1"))) || top.location.href.indexOf(f07777.I("5" + "4" | 0)) > -("1" - 0) || top.location.href.indexOf(f07777.Z(126)) || top.location.href.indexOf(f07777.R(161)) > -("1" - 0)) {
                    this.game.state.start(f07777.E(+"46"), true, false);
                }
            } else if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.NONE) {
                if (top.location.href.indexOf(f07777.R(+("1" + "2" + "6"))) > -1 || top.location.href.indexOf(f07777.Z("13" - 0)) > -+"1") {
                    this.game.state.start(f07777.R(125), true, false);
                }
            } else {
                this.game.state.start(f07777.I(+("1" + "2" + "7")), true, false);
            }
        };
        return Boot;
    }(Phaser.State);
    HappyKittensPuzzle.Boot = Boot;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var GameConstants;
    GameConstants = function () {
        function GameConstants() {
        }
        return GameConstants;
    }();
    GameConstants.VERSION = f07777.I(+"92");
    GameConstants.ASSETS_PATH = f07777.Z(+"24");
    GameConstants.DEVELOPMENT = true;
    GameConstants.EDITING_LEVELS = false;
    GameConstants.GAME_WIDTH = "7" + "6" + "8" | 0;
    GameConstants.GAME_HEIGHT = +("1" + "0" + "2" + "4");
    GameConstants.GAMEPIX = f07777.I(4);
    GameConstants.LAGGED = f07777.A(+((6543 >= 4000 ? "1" : 0x13a6) + "6" + "7"));
    GameConstants.IZZYGAMES = f07777.E(+"0");
    GameConstants.NONE = f07777.Z(+("2" + "1" + "5"));
    GameConstants.SPONSOR = GameConstants.IZZYGAMES;
    GameConstants.HAPPY = f07777.A("1" + "3" + "6" | 0);
    GameConstants.GRUMPY = f07777.R(225);
    GameConstants.BLACK_SQUARE = f07777.Z("240" | 0);
    GameConstants.BLUE_SQUARE = f07777.R(+"23");
    GameConstants.WHITE_SQUARE = f07777.E(+"11");
    GameConstants.DARK_GREEN_SQUARE = f07777.E("1" + "1" + "2" | 0);
    GameConstants.GREEN_SQUARE = f07777.I(14);
    GameConstants.GRAY_SQUARE = f07777.I(+"44");
    GameConstants.YELLOW_SQUARE = f07777.Z("211" * 1);
    GameConstants.ORANGE_SQUARE = f07777.A("49" * 1);
    GameConstants.DARK_CYAN_SQUARE = f07777.E("1" + "9" + "8" | 0);
    GameConstants.SQUARE_WIDTH = +("1" + "3" + "5");
    GameConstants.TIME_FADE = ("3" + "5" + "0") * 1;
    GameConstants.TOTAL_LEVELS = +("6" + "0");
    GameConstants.LEVEL_BEST_KEY = f07777.E("1" + "0" + "2" - 0);
    GameConstants.AUDIO_STATE_KEY = f07777.R("1" + "2" + "0" | 0);
    HappyKittensPuzzle.GameConstants = GameConstants;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var GameManager;
    GameManager = function () {
        function GameManager() {
        }
        GameManager.init = function (game) {
            var bestResultsStr;
            GameManager.game = game;
            bestResultsStr = HappyKittensPuzzle.GameVars.getLocalStorageData(HappyKittensPuzzle.GameConstants.LEVEL_BEST_KEY);
            if (bestResultsStr !== f07777.E(+("3" + "6"))) {
                HappyKittensPuzzle.GameVars.levelsBestResults = JSON.parse(bestResultsStr);
            } else {
                HappyKittensPuzzle.GameVars.levelsBestResults = [];
                HappyKittensPuzzle.GameVars.levelsBestResults["0" | 0] = 0;
                for (var i = (8427 !== (2507, 610.18) ? "1" : (854.79, false)) - 0; i < HappyKittensPuzzle.GameConstants.TOTAL_LEVELS; i++) {
                    HappyKittensPuzzle.GameVars.levelsBestResults[i] = -("1" | 0);
                }
                HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.LEVEL_BEST_KEY, JSON.stringify(HappyKittensPuzzle.GameVars.levelsBestResults));
            }
            HappyKittensPuzzle.GameVars.currentLevel = HappyKittensPuzzle.GameConstants.TOTAL_LEVELS;
            for (var i = "0" - 0; i < HappyKittensPuzzle.GameConstants.TOTAL_LEVELS; i++) {
                if (HappyKittensPuzzle.GameVars.levelsBestResults[i] === ("0" | 0)) {
                    HappyKittensPuzzle.GameVars.currentLevel = i + ("1" - 0);
                    break;
                }
            }
            HappyKittensPuzzle.GameVars.achievedLevel = HappyKittensPuzzle.GameVars.currentLevel;
        };
        GameManager.levelSelected = function (level) {
            HappyKittensPuzzle.GameVars.currentLevel = level;
            HappyKittensPuzzle.LevelSelectionState.currentInstance.goToBoardScene();
        };
        GameManager.levelPassed = function () {
            var record;
            this.sponsorsAPIs();
            HappyKittensPuzzle.GameVars.achievedLevel = "1" - 0;
            for (var i = +"0"; i < HappyKittensPuzzle.GameVars.levelsBestResults.length; i++) {
                if (HappyKittensPuzzle.GameVars.levelsBestResults[i] === ("0" | 0)) {
                    HappyKittensPuzzle.GameVars.achievedLevel = i + ("1" - 0);
                    break;
                }
            }
            record = HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - +"1"];
            if (record === "0" * 1 || HappyKittensPuzzle.GameVars.moves <= record) {
                HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.currentLevel - ("1" - 0)] = HappyKittensPuzzle.GameVars.moves;
            }
            if (HappyKittensPuzzle.GameVars.currentLevel === HappyKittensPuzzle.GameVars.achievedLevel) {
                HappyKittensPuzzle.GameVars.achievedLevel++;
                HappyKittensPuzzle.GameVars.levelsBestResults[HappyKittensPuzzle.GameVars.achievedLevel - ("1" - 0)] = "0" - 0;
            }
            if (HappyKittensPuzzle.GameVars.currentLevel < HappyKittensPuzzle.GameConstants.TOTAL_LEVELS) {
                HappyKittensPuzzle.GameVars.currentLevel++;
            }
            HappyKittensPuzzle.GameVars.setLocalStorageData(HappyKittensPuzzle.GameConstants.LEVEL_BEST_KEY, JSON.stringify(HappyKittensPuzzle.GameVars.levelsBestResults));
        };
        GameManager.sponsorsAPIs = function () {
            var awardID, api_awards;
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
                GamePix.game.ping(f07777.A(100), {
                    score: "0" - 0,
                    level: HappyKittensPuzzle.GameVars.currentLevel,
                    achievements: {}
                });
            }
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                awardID = null;
                if (HappyKittensPuzzle.GameVars.currentLevel === "12" * 1) {
                    awardID = f07777.E("101" | 0);
                } else if (HappyKittensPuzzle.GameVars.currentLevel === 24) {
                    awardID = f07777.R("148" | 0);
                } else if (HappyKittensPuzzle.GameVars.currentLevel === ("3" + "6" | 0)) {
                    awardID = f07777.Z(+"40");
                } else if (HappyKittensPuzzle.GameVars.currentLevel === +("4" + "8")) {
                    awardID = f07777.R(+"228");
                } else if (HappyKittensPuzzle.GameVars.currentLevel === +("6" + "0")) {
                    awardID = f07777.Z(+"58");
                }
                if (awardID) {
                    api_awards = [];
                    api_awards.push(awardID);
                    LaggedAPI.Achievements.save(api_awards, function (response) {
                        if (response.success) {
                            console.log(f07777.E(10));
                        } else {
                            console.log(response.errormsg);
                        }
                    });
                }
                GameManager.passedLevels++;
                if (GameManager.passedLevels % ("10" * 1) === 0) {
                    if (typeof prerollStart === f07777.Z(+("9" + (734.06 != (5340, 5838) ? "0" : 0xd53)))) {
                        console.log(f07777.A(+"48"));
                    } else {
                        LaggedAPI.APIAds.show(f07777.E(+("5" + "1")), f07777.I("149" - 0), f07777.I("1" + "0" + "5" | 0), function (response) {
                            if (response.success) {
                                console.log(f07777.Z("2" + "1" + "0" - 0));
                            } else {
                                console.log(f07777.A("98" * 1));
                            }
                        });
                    }
                }
            }
        };
        return GameManager;
    }();
    GameManager.passedLevels = "0" - 0;
    HappyKittensPuzzle.GameManager = GameManager;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var GameVars;
    GameVars = function () {
        function GameVars() {
        }
        GameVars.getLocalStorageData = function (key) {
            var value;
            value = localStorage.getItem(key);
            if (value !== null) {
                return value;
            } else {
                return f07777.E(+"166");
            }
        };
        GameVars.setLocalStorageData = function (key, value) {
            localStorage.setItem(key, value);
        };
        return GameVars;
    }();
    HappyKittensPuzzle.GameVars = GameVars;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var LevelsContainer;
    LevelsContainer = function (_super) {
        __extends(LevelsContainer, _super);
        function LevelsContainer(game, i) {
            var _this, levelSelectionButton;
            _this = _super.call(this, game, null, f07777.Z("26" * 1)) || this;
            _this.i = i;
            _this.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            for (var col = +"0"; col < ("3" | 0); col++) {
                for (var row = +"0"; row < "4" * 1; row++) {
                    levelSelectionButton = new HappyKittensPuzzle.LevelSelectionButton(_this.game, _this.i * +("1" + "2") + (col + +"1") + +"3" * row);
                    levelSelectionButton.x = -+"140" * (+"1" - col);
                    levelSelectionButton.y = -("140" - 0) * ("1.5" * 1 - row);
                    _this.add(levelSelectionButton);
                }
            }
            return _this;
        }
        return LevelsContainer;
    }(Phaser.Group);
    HappyKittensPuzzle.LevelsContainer = LevelsContainer;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var LevelSelectionButton;
    LevelSelectionButton = function (_super) {
        __extends(LevelSelectionButton, _super);
        function LevelSelectionButton(game, level) {
            var _this, isBlocked, blockedButtonImage, button, levelLabel;
            _this = _super.call(this, game, null, f07777.Z(184)) || this;
            _this.level = level;
            isBlocked = _this.level > HappyKittensPuzzle.GameVars.achievedLevel;
            if (isBlocked) {
                blockedButtonImage = new Phaser.Image(_this.game, "0" - 0, "0" * 1, f07777.I("185" - 0), f07777.A("164" * 1));
                blockedButtonImage.anchor.set(+((6880 > (382, 770.09) ? "." : 1.85e+3) + "5"));
                _this.add(blockedButtonImage);
            } else {
                button = new Phaser.Button(_this.game, "0" * 1, +"0", f07777.A(+"237"), _this.onClick, _this);
                button.setFrames(f07777.A(+("1" + "1" + "7")), f07777.A(+"121"), f07777.I(+("1" + "1" + "7")));
                button.anchor.set("." + "5" - 0);
                _this.add(button);
            }
            levelLabel = new Phaser.Text(_this.game, +"0", -9, _this.level.toString(), {
                font: f07777.Z(+"145"),
                fill: f07777.Z(116)
            });
            levelLabel.anchor.set(".5" - 0);
            _this.add(levelLabel);
            return _this;
        }
        LevelSelectionButton.prototype.onClick = function () {
            if (HappyKittensPuzzle.LevelSelectionState.leavingScene) {
                return;
            }
            HappyKittensPuzzle.LevelSelectionState.leavingScene = true;
            this.game.time.events.add(150, function () {
                HappyKittensPuzzle.GameManager.levelSelected(this.level);
            }, this);
            HappyKittensPuzzle.AudioManager.getInstance().playSound(f07777.A(+("2" + "0" + "4")));
        };
        return LevelSelectionButton;
    }(Phaser.Group);
    HappyKittensPuzzle.LevelSelectionButton = LevelSelectionButton;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var LevelSelectionState;
    LevelSelectionState = function (_super) {
        __extends(LevelSelectionState, _super);
        function LevelSelectionState() {
            return _super.apply(this, arguments) || this;
        }
        LevelSelectionState.prototype.init = function () {
            LevelSelectionState.currentInstance = this;
            LevelSelectionState.leavingScene = false;
            this.tweening = false;
        };
        LevelSelectionState.prototype.create = function () {
            var backgroundImage, titleContainer, aspectRatio, levelsContainer_py, levelsContainer, laggedLogo, creditsLabel;
            backgroundImage = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / 2, HappyKittensPuzzle.GameConstants.GAME_HEIGHT / ("2" - 0), f07777.I(61), f07777.A(+("1" + "6" + "9")));
            backgroundImage.anchor.set(+("." + "5"));
            backgroundImage.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            titleContainer = new HappyKittensPuzzle.TitleContainer(this.game);
            this.add.existing(titleContainer);
            this.levelsRail = new Phaser.Group(this.game);
            this.add.existing(this.levelsRail);
            aspectRatio = window.innerHeight / window.innerWidth;
            if (this.game.device.desktop) {
                levelsContainer_py = "650" | 0;
            } else {
                if (aspectRatio >= +"1.75") {
                    levelsContainer_py = "620" - 0;
                } else if (aspectRatio >= "1.5" - 0) {
                    levelsContainer_py = 640;
                } else {
                    levelsContainer_py = +("6" + "6" + "2");
                }
            }
            for (var i = +"0"; i < LevelSelectionState.LEVEL_PAGES; i++) {
                levelsContainer = new HappyKittensPuzzle.LevelsContainer(this.game, i);
                levelsContainer.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH * (+("." + "5") + i);
                levelsContainer.y = levelsContainer_py;
                this.levelsRail.add(levelsContainer);
            }
            this.previousButton = this.add.button(+"60", levelsContainer_py, f07777.A("132" | 0), this.onArrowClick, this);
            this.previousButton.anchor.set(("." + "5") * 1);
            this.previousButton.setFrames(f07777.Z(77), f07777.E("2" + "3" + "2" - 0), f07777.Z(+("8" + "7")));
            this.previousButton.scale.set(-+"1", HappyKittensPuzzle.GameVars.scaleY);
            this.previousButton.name = LevelSelectionState.PREVIOUS;
            this.nextButton = this.add.button((((2585, 6040) != (396, 469) ? "7" : false) + "0" + "0") * 1, levelsContainer_py, f07777.Z("8" + "0" | 0), this.onArrowClick, this);
            this.nextButton.anchor.set(".5" - 0);
            this.nextButton.setFrames(f07777.R(87), f07777.R(+("2" + "3" + "2")), f07777.Z("87" | 0));
            this.nextButton.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.nextButton.name = LevelSelectionState.NEXT;
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                laggedLogo = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"2", HappyKittensPuzzle.GameConstants.GAME_HEIGHT - +("5" + "6"), f07777.Z(80), f07777.Z("62" - 0));
                laggedLogo.anchor.set(+".5");
                laggedLogo.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            }
            creditsLabel = this.add.text(HappyKittensPuzzle.GameConstants.GAME_WIDTH / ("2" - 0), HappyKittensPuzzle.GameConstants.GAME_HEIGHT - +("3" + "0"), f07777.R(+("1" + "7" + "9")) + HappyKittensPuzzle.GameConstants.SPONSOR, {
                font: f07777.E(+"39"),
                fill: f07777.I(114)
            });
            creditsLabel.anchor.x = .5;
            creditsLabel.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            creditsLabel.alpha = ".72" - 0;
            this.setCurrentLevelPage();
            this.game.camera.flash("0x000000" - 0, HappyKittensPuzzle.GameConstants.TIME_FADE, false);
        };
        LevelSelectionState.prototype.shutdown = function () {
            LevelSelectionState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        LevelSelectionState.prototype.goToBoardScene = function () {
            this.game.camera.fade(0x000000, HappyKittensPuzzle.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start(f07777.Z(+("2" + "2" + "9")), true, false);
            }, this);
        };
        LevelSelectionState.prototype.setCurrentLevelPage = function () {
            this.indexLevelsPage = Math.floor((HappyKittensPuzzle.GameVars.achievedLevel - "1" * 1) / +("1" + "2"));
            if (this.indexLevelsPage === +((3263, 754.86) <= (10.02, 898.08) ? "0" : 6.81e+3)) {
                this.previousButton.visible = false;
            } else if (this.indexLevelsPage > +"3") {
                this.nextButton.visible = false;
            }
            this.levelsRail.x = -HappyKittensPuzzle.GameConstants.GAME_WIDTH * this.indexLevelsPage;
        };
        LevelSelectionState.prototype.onArrowClick = function (b) {
            var px;
            if (this.tweening) {
                return;
            }
            b.clearFrames();
            this.tweening = true;
            this.setCorrespondingContainersVisible(true, b.name);
            px = this.levelsRail.x;
            if (b.name === LevelSelectionState.PREVIOUS) {
                px += HappyKittensPuzzle.GameConstants.GAME_WIDTH;
                this.indexLevelsPage--;
            } else {
                px -= HappyKittensPuzzle.GameConstants.GAME_WIDTH;
                this.indexLevelsPage++;
            }
            if (this.indexLevelsPage === ("0" | 0)) {
                this.previousButton.visible = false;
            } else if (this.indexLevelsPage === LevelSelectionState.LEVEL_PAGES - 1) {
                this.nextButton.visible = false;
            } else {
                this.previousButton.visible = true;
                this.nextButton.visible = true;
            }
            this.game.add.tween(this.levelsRail).to({ x: px }, +("3" + "5" + "0"), Phaser.Easing.Quadratic.Out, true).onComplete.add(function () {
                this.tweening = false;
                this.setCorrespondingContainersVisible(false);
            }, this);
            HappyKittensPuzzle.AudioManager.getInstance().playSound(f07777.A(76));
        };
        LevelSelectionState.prototype.setCorrespondingContainersVisible = function (beforeTweening, pressedButtonName) {
            if (beforeTweening) {
                if (pressedButtonName === LevelSelectionState.NEXT) {
                    this.levelsRail.forEach(function (levelsContainer) {
                        if (levelsContainer.i === this.indexLevelsPage || levelsContainer.i === this.indexLevelsPage + +"1") {
                            levelsContainer.visible = true;
                        } else {
                            levelsContainer.visible = false;
                        }
                    }, this);
                } else {
                    this.levelsRail.forEach(function (levelsContainer) {
                        if (levelsContainer.i === this.indexLevelsPage || levelsContainer.i === this.indexLevelsPage - +"1") {
                            levelsContainer.visible = true;
                        } else {
                            levelsContainer.visible = false;
                        }
                    }, this);
                }
            } else {
                this.levelsRail.forEach(function (levelsContainer) {
                    if (levelsContainer.i === this.indexLevelsPage) {
                        levelsContainer.visible = true;
                    } else {
                        levelsContainer.visible = false;
                    }
                }, this);
            }
        };
        return LevelSelectionState;
    }(Phaser.State);
    LevelSelectionState.PREVIOUS = f07777.E("64" | 0);
    LevelSelectionState.NEXT = f07777.Z(202);
    LevelSelectionState.LEVEL_PAGES = "5" | 0;
    HappyKittensPuzzle.LevelSelectionState = LevelSelectionState;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var TitleContainer;
    TitleContainer = function (_super) {
        __extends(TitleContainer, _super);
        function TitleContainer(game) {
            var _this, aspectRatio, shadowHeight, yellowStripeContainer_py, shadow, gameTitle, audioButton, yellowStripeContainer, colorStripe, stripeLabel;
            _this = _super.call(this, game, null, f07777.R(+("2" + "7"))) || this;
            aspectRatio = window.innerHeight / window.innerWidth;
            if (_this.game.device.desktop) {
                shadowHeight = +"314";
                yellowStripeContainer_py = "190" * 1;
            } else {
                if (aspectRatio >= +"1.75") {
                    shadowHeight = ("2" + "5" + "0") * 1;
                    yellowStripeContainer_py = 154;
                } else if (aspectRatio >= 1.5) {
                    shadowHeight = "2" + "9" + "4" - 0;
                    yellowStripeContainer_py = "180" - 0;
                } else {
                    shadowHeight = +("3" + "0" + "4");
                    yellowStripeContainer_py = +("2" + "0" + "0");
                }
            }
            shadow = new Phaser.Sprite(_this.game, 0, +"0", _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            shadow.scale.set(("1" + "." + "5" - 0) * HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"64", shadowHeight / 64);
            shadow.alpha = ".45" - 0;
            _this.add(shadow);
            gameTitle = new Phaser.Image(_this.game, -("12" - 0), -("1" + "2" | 0), f07777.Z(+("8" + "0")), f07777.R("3" | 0));
            gameTitle.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.add(gameTitle);
            audioButton = new HappyKittensPuzzle.AudioButton(_this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH - ("8" + "5" | 0), 14);
            audioButton.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            _this.add(audioButton);
            yellowStripeContainer = new Phaser.Group(_this.game);
            yellowStripeContainer.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / ("2" * 1);
            yellowStripeContainer.y = yellowStripeContainer_py;
            yellowStripeContainer.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            _this.add(yellowStripeContainer);
            colorStripe = new Phaser.Sprite(_this.game, "0" | 0, +"0", _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = +("." + "5");
            colorStripe.scale.set(+("1" + "." + "5") * HappyKittensPuzzle.GameConstants.GAME_WIDTH / (("6" + "4") * 1), +"12" / ("64" - 0));
            yellowStripeContainer.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, +"0", colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.ORANGE_SQUARE));
            colorStripe.anchor.x = .5;
            colorStripe.scale.set(+("1" + "." + "5") * HappyKittensPuzzle.GameConstants.GAME_WIDTH / +("6" + ((625.81, 537.57) > (3562, 85) ? "4" : "x")), ("90" - 0) / ("6" + "4" - 0));
            yellowStripeContainer.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, +(9780 <= 287.46 ? (true, "z") : "0"), colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = +("." + "5");
            colorStripe.scale.set(+"1.5" * HappyKittensPuzzle.GameConstants.GAME_WIDTH / (("6" + "4") * 1), ("12" - 0) / ("64" - 0));
            yellowStripeContainer.add(colorStripe);
            stripeLabel = new Phaser.Text(_this.game, +"0", +"18", f07777.E("22" | 0), {
                font: f07777.E("189" | 0),
                fill: f07777.A(118)
            });
            stripeLabel.anchor.x = .5;
            stripeLabel.setShadow(+"4", "4" * 1, f07777.A(123), "0" * 1);
            yellowStripeContainer.add(stripeLabel);
            return _this;
        }
        return TitleContainer;
    }(Phaser.Group);
    HappyKittensPuzzle.TitleContainer = TitleContainer;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var LevelEditionState;
    LevelEditionState = function (_super) {
        __extends(LevelEditionState, _super);
        function LevelEditionState() {
            return _super.apply(this, arguments) || this;
        }
        LevelEditionState.prototype.init = function () {
            LevelEditionState.currentInstance = this;
            HappyKittensPuzzle.GameVars.moves = +"0";
        };
        LevelEditionState.prototype.create = function () {
            var background, resetButton;
            background = new Phaser.Sprite(this.game, +"0", "0" - 0, this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            background.scale.set(HappyKittensPuzzle.GameConstants.GAME_WIDTH / ("64" * 1), HappyKittensPuzzle.GameConstants.GAME_HEIGHT / 64);
            this.add.existing(background);
            this.board = new HappyKittensPuzzle.Board(this.game);
            this.add.existing(this.board);
            this.movementsLabel = this.add.text("600" * 1, 900, f07777.A(+((79.88 !== 900.08 ? "2" : (0x1756, true)) + "2" + "2")) + HappyKittensPuzzle.GameVars.moves, {
                font: f07777.I(+((341.83 != 70.68 ? "1" : (0x1207, "r")) + "2" + "4")),
                fill: f07777.A(110)
            });
            this.movementsLabel.anchor.x = 1;
            this.movementsLabel.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            resetButton = this.add.button(20, +"900", f07777.A("175" - 0), this.onResetClicked, this);
            resetButton.setFrames(f07777.I(174), f07777.A("235" * 1), f07777.I("217" - 0));
            resetButton.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.game.camera.flash(+"0x000000", HappyKittensPuzzle.GameConstants.TIME_FADE, false);
        };
        LevelEditionState.prototype.shutdown = function () {
            LevelEditionState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        LevelEditionState.prototype.move = function (column, row) {
            var cells, c, r;
            HappyKittensPuzzle.GameVars.moves++;
            this.movementsLabel.text = f07777.I("183" - 0) + HappyKittensPuzzle.GameVars.moves;
            cells = this.board.cells;
            for (var i = +"0"; i < HappyKittensPuzzle.BoardManager.neighbourSquares.length; i++) {
                c = HappyKittensPuzzle.BoardManager.neighbourSquares[i][0] + column;
                r = HappyKittensPuzzle.BoardManager.neighbourSquares[i][1] + row;
                if (c >= 0 && r >= 0 && c < cells.length && r < cells.length) {
                    cells[c][r].flip(true);
                }
            }
        };
        LevelEditionState.prototype.onResetClicked = function () {
            this.game.state.start(f07777.A(+"137"), true, false);
        };
        return LevelEditionState;
    }(Phaser.State);
    HappyKittensPuzzle.LevelEditionState = LevelEditionState;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (HappyKittensPuzzle) {
    var PreLoader;
    PreLoader = function (_super) {
        __extends(PreLoader, _super);
        function PreLoader() {
            return _super.apply(this, arguments) || this;
        }
        PreLoader.prototype.init = function () {
            PreLoader.currentInstance = this;
            this.load.path = HappyKittensPuzzle.GameConstants.ASSETS_PATH;
        };
        PreLoader.prototype.preload = function () {
            this.generateBitmapData();
            this.composeScene();
            this.loadAssets();
        };
        PreLoader.prototype.create = function () {
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.LAGGED) {
                LaggedAPI.init(f07777.I("104" - 0), f07777.E(("1" + "3" + "0") * 1));
            }
            HappyKittensPuzzle.AudioManager.getInstance().init(this.game);
            HappyKittensPuzzle.AudioManager.getInstance().playSound(f07777.E(+("1" + "9" + "7")), true);
            if (HappyKittensPuzzle.GameConstants.EDITING_LEVELS) {
                this.game.state.start(f07777.Z("1" + "3" + "7" | 0), true, false);
            } else {
                if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
                    GamePix.game.gameLoaded(function () {
                        HappyKittensPuzzle.Game.currentInstance.state.start(f07777.Z(+"195"), true, false);
                    });
                } else {
                    this.game.state.start(f07777.Z(+"108"), true, false);
                }
            }
        };
        PreLoader.prototype.composeScene = function () {
            var tmpLabel, backgroundSprite, gameLogo, preloadBarContainer, preloadBarCapsuleShadow, preloadBarCapsule;
            tmpLabel = this.add.text(HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"2", +("1" + "9" + "0"), f07777.Z(+("3" + "4")), {
                font: f07777.E(145),
                fill: f07777.E("2" + "2" + "3" | 0)
            });
            tmpLabel.anchor.x = +".5";
            backgroundSprite = this.add.sprite(+"0", "0" | 0, this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_CYAN_SQUARE));
            backgroundSprite.scale.set(HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"64", HappyKittensPuzzle.GameConstants.GAME_HEIGHT / ("64" * 1));
            gameLogo = this.add.image(HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"2", "190" - 0, f07777.I("1" + "7" + "0" | 0));
            gameLogo.anchor.set(+".5");
            gameLogo.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            this.loadingLabel = this.add.text(HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"2", +("4" + "7" + "5"), f07777.R(91), {
                font: f07777.E(+("1" + "2" + "9")),
                fill: f07777.R(114)
            });
            this.loadingLabel.anchor.x = +("." + "5");
            this.loadingLabel.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            preloadBarContainer = this.add.group();
            preloadBarContainer.y = ("6" + ((8305, 8810) >= 1335 ? "1" : true) + "5") * 1;
            preloadBarContainer.scale.y = HappyKittensPuzzle.GameVars.scaleY;
            preloadBarCapsuleShadow = new Phaser.Sprite(this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"2" + "5" * 1, +"4", this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.BLACK_SQUARE));
            preloadBarCapsuleShadow.scale.set("10" * 1, ".85" - 0);
            preloadBarCapsuleShadow.anchor.set(+".5");
            preloadBarCapsuleShadow.alpha = .35;
            preloadBarContainer.add(preloadBarCapsuleShadow);
            preloadBarCapsule = new Phaser.Sprite(this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"2", "0" | 0, this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            preloadBarCapsule.scale.setTo("1" + "0" | 0, ".78" * 1);
            preloadBarCapsule.anchor.set(+("." + "5"));
            preloadBarContainer.add(preloadBarCapsule);
            this.preloadBar = new Phaser.Sprite(this.game, HappyKittensPuzzle.GameConstants.GAME_WIDTH / ("2" - 0) - (((1830, 118.07) > 1914 ? true : "3") + "1" + ((9954, 145.29) !== 9395 ? "5" : "B")) * 1, "0" - 0, this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.ORANGE_SQUARE));
            this.preloadBar.scale.setTo("0" - 0, +".6");
            this.preloadBar.anchor.set("0" - 0, +("." + "5"));
            preloadBarContainer.add(this.preloadBar);
        };
        PreLoader.prototype.loadAssets = function () {
            this.load.atlas(f07777.E(+"43"), f07777.R("1" + "4" + "2" - 0), f07777.Z("135" * 1));
            this.load.audiosprite(f07777.R("1" + "2" + "2" | 0), [
                f07777.E("3" + "7" | 0),
                f07777.I("151" | 0)
            ], f07777.Z("2" + "2" + "7" | 0));
            this.load.onFileComplete.add(this.updateLoadedPercentage, this);
        };
        PreLoader.prototype.updateLoadedPercentage = function () {
            this.preloadBar.scale.x = this.load.progress / +"100" * +("9" + "." + "8" + "44");
            if (HappyKittensPuzzle.GameConstants.SPONSOR === HappyKittensPuzzle.GameConstants.GAMEPIX) {
                GamePix.game.gameLoading(this.load.progress);
            }
        };
        PreLoader.prototype.generateBitmapData = function () {
            var bmd;
            bmd = this.game.add.bitmapData(+("6" + "4"), "64" * 1, HappyKittensPuzzle.GameConstants.HAPPY, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect("0" * 1, "0" - 0, 64, 64);
            bmd.ctx.fillStyle = f07777.R("147" | 0);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData("64" | 0, 64, HappyKittensPuzzle.GameConstants.BLACK_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(+"0", +"0", +"64", +("6" + "4"));
            bmd.ctx.fillStyle = f07777.I("1" + "1" + "0" | 0);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, HappyKittensPuzzle.GameConstants.WHITE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(+"0", +"0", "64" - 0, "64" * 1);
            bmd.ctx.fillStyle = f07777.E(+"118");
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(+("6" + "4"), 64, HappyKittensPuzzle.GameConstants.DARK_CYAN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(+"0", "0" * 1, +("6" + "4"), "64" - 0);
            bmd.ctx.fillStyle = f07777.E(+"28");
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData("6" + "4" - 0, +("6" + "4"), HappyKittensPuzzle.GameConstants.GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(+"0", "0" | 0, "64" - 0, 64);
            bmd.ctx.fillStyle = f07777.R("2" - 0);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(("6" + "4") * 1, "6" + "4" | 0, HappyKittensPuzzle.GameConstants.BLUE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(+"0", +"0", "6" + "4" | 0, "64" | 0);
            bmd.ctx.fillStyle = f07777.R("7" - 0);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(+"64", "6" + "4" | 0, HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(+"0", 0, ((710.81, 511.34) !== 178.09 ? "6" : (188.42, 722.09)) + "4" - 0, +("6" + "4"));
            bmd.ctx.fillStyle = f07777.E(("2" + "2" + "6") * 1);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(+("6" + "4"), 64, HappyKittensPuzzle.GameConstants.GRUMPY, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(+"0", 0, "6" + "4" - 0, 64);
            bmd.ctx.fillStyle = f07777.R((2657 !== (2924, 947.42) ? "2" : 0x42a) + "0" + "8" | 0);
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData("6" + "4" - 0, "64" | 0, HappyKittensPuzzle.GameConstants.GRAY_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, +"0", +"64", +"64");
            bmd.ctx.fillStyle = f07777.Z(+"141");
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, +"64", HappyKittensPuzzle.GameConstants.YELLOW_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(+"0", "0" | 0, "64" * 1, "64" - 0);
            bmd.ctx.fillStyle = f07777.Z(+("9" + "3"));
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(+"64", ("6" + ((8660, 70.96) == 306.94 ? 0x2333 : "4")) * 1, HappyKittensPuzzle.GameConstants.ORANGE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, "0" * 1, +"64", "64" | 0);
            bmd.ctx.fillStyle = f07777.Z(218);
            bmd.ctx.fill();
        };
        return PreLoader;
    }(Phaser.State);
    HappyKittensPuzzle.PreLoader = PreLoader;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));
(function (Fabrique) {
    var Plugins;
    (function (Plugins) {
        var CacheBuster;
        CacheBuster = function (_super) {
            __extends(CacheBuster, _super);
            function CacheBuster(game, parent) {
                var _this;
                _this = _super.call(this, game, parent) || this;
                _this.patchLoader();
                return _this;
            }
            CacheBuster.prototype.patchLoader = function () {
                Object.defineProperty(Phaser.Loader, f07777.R(+"82"), { value: null });
                Phaser.Loader.prototype.transformUrl = function (url, file) {
                    if (!url) {
                        return f07777.R(220);
                    }
                    if (this.cacheBuster !== null && null === url.match(/^(data:)/)) {
                        url += f07777.Z("1" + "7" + "3" | 0) + this.cacheBuster;
                    }
                    if (url.match(/^(?:blob:|data:|http:\/\/|https:\/\/|\/\/)/)) {
                        return url;
                    } else {
                        return this.baseURL + file.path + url;
                    }
                };
            };
            return CacheBuster;
        }(Phaser.Plugin);
        Plugins.CacheBuster = CacheBuster;
    }(Plugins = Fabrique.Plugins || (Fabrique.Plugins = {})));
}(Fabrique || (Fabrique = {})));
(function (HappyKittensPuzzle) {
    var YellowStripe;
    YellowStripe = function (_super) {
        __extends(YellowStripe, _super);
        function YellowStripe(game, text) {
            var _this, colorStripe, stripeLabel;
            _this = _super.call(this, game, null, f07777.A(+("2" + "1" + "4"))) || this;
            _this.x = HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"2";
            _this.scale.set(HappyKittensPuzzle.GameVars.stripesScale, HappyKittensPuzzle.GameVars.stripesScale * HappyKittensPuzzle.GameVars.scaleY);
            colorStripe = new Phaser.Sprite(_this.game, 0, "0" * 1, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = +".5";
            colorStripe.scale.set(+"1.5" * HappyKittensPuzzle.GameConstants.GAME_WIDTH / +("6" + "4"), +("1" + "2") / ("64" * 1));
            _this.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, +"0", colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.ORANGE_SQUARE));
            colorStripe.anchor.x = +".5";
            colorStripe.scale.set(("1.5" - 0) * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, +"90" / ("64" * 1));
            _this.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, "0" | 0, colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.YELLOW_SQUARE));
            colorStripe.anchor.x = +("." + "5");
            colorStripe.scale.set(+("1" + ((710.96, 8560) != (9678, 468.55) ? "." : false) + "5") * HappyKittensPuzzle.GameConstants.GAME_WIDTH / +"64", "12" * 1 / ("6" + "4" - 0));
            _this.add(colorStripe);
            colorStripe = new Phaser.Sprite(_this.game, +"0", colorStripe.y + colorStripe.height, _this.game.cache.getBitmapData(HappyKittensPuzzle.GameConstants.DARK_GREEN_SQUARE));
            colorStripe.anchor.x = +".5";
            colorStripe.scale.set(+("1" + "." + ((735.2, 6509) >= 309 ? "5" : (3.85e+3, 895.95))) * HappyKittensPuzzle.GameConstants.GAME_WIDTH / 64, +"16" / ("64" - 0));
            colorStripe.alpha = ".45" * 1;
            _this.add(colorStripe);
            stripeLabel = new Phaser.Text(_this.game, "0" - 0, "1" + "8" | 0, text, {
                font: f07777.I(189),
                fill: f07777.I(+("6" + "5"))
            });
            stripeLabel.anchor.x = "." + "5" - 0;
            stripeLabel.setShadow("4" * 1, "4" - 0, f07777.I(+("1" + "2" + "3")), 0);
            _this.add(stripeLabel);
            return _this;
        }
        return YellowStripe;
    }(Phaser.Group);
    HappyKittensPuzzle.YellowStripe = YellowStripe;
}(HappyKittensPuzzle || (HappyKittensPuzzle = {})));