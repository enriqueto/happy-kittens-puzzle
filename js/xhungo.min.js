var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Xhungo;
(function (Xhungo) {
    var Game = (function (_super) {
        __extends(Game, _super);
        function Game() {
            var _this = _super.call(this, Xhungo.GameConstants.GAME_WIDTH, Xhungo.GameConstants.GAME_HEIGHT, Phaser.AUTO, "content", null, false, true) || this;
            _this.state.add("PreLoader", Xhungo.PreLoader, false);
            _this.state.add("SplashState", Xhungo.SplashState, false);
            _this.state.add("BoardState", Xhungo.BoardState, false);
            _this.state.add("Boot", Xhungo.Boot, true);
            return _this;
        }
        return Game;
    }(Phaser.Game));
    Xhungo.Game = Game;
})(Xhungo || (Xhungo = {}));
window.onload = function () {
    var game = new Xhungo.Game();
};
var Xhungo;
(function (Xhungo) {
    var Board = (function (_super) {
        __extends(Board, _super);
        function Board(game) {
            var _this = _super.call(this, game, null, "board") || this;
            _this.x = Xhungo.GameConstants.GAME_WIDTH / 2 - 4 * Xhungo.GameConstants.SQUARE_WIDTH;
            _this.y = Xhungo.GameConstants.GAME_HEIGHT / 2 - 4 * Xhungo.GameConstants.SQUARE_WIDTH;
            _this.squares = [];
            var square;
            for (var i = 0; i < 8; i++) {
                _this.squares[i] = [];
                for (var j = 0; j < 8; j++) {
                    square = new Xhungo.Square(_this.game, Xhungo.GameConstants.RED_SQUARE, i, j);
                    square.x = i * Xhungo.GameConstants.SQUARE_WIDTH;
                    square.y = j * Xhungo.GameConstants.SQUARE_WIDTH;
                    _this.add(square);
                    _this.squares[i].push(square);
                }
            }
            return _this;
        }
        return Board;
    }(Phaser.Group));
    Xhungo.Board = Board;
})(Xhungo || (Xhungo = {}));
var Xhungo;
(function (Xhungo) {
    var BoardManager = (function () {
        function BoardManager(game) {
            BoardManager.currentInstance = this;
            this.game = game;
        }
        return BoardManager;
    }());
    Xhungo.BoardManager = BoardManager;
})(Xhungo || (Xhungo = {}));
var Xhungo;
(function (Xhungo) {
    var BoardState = (function (_super) {
        __extends(BoardState, _super);
        function BoardState() {
            return _super.apply(this, arguments) || this;
        }
        BoardState.prototype.init = function () {
            BoardState.currentInstance = this;
            this.boardManager = new Xhungo.BoardManager(this.game);
            this.board = new Xhungo.Board(this.game);
            this.add.existing(this.board);
        };
        BoardState.prototype.create = function () {
        };
        BoardState.prototype.shutdown = function () {
            Xhungo.SplashState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        return BoardState;
    }(Phaser.State));
    Xhungo.BoardState = BoardState;
})(Xhungo || (Xhungo = {}));
var Xhungo;
(function (Xhungo) {
    var Square = (function (_super) {
        __extends(Square, _super);
        function Square(game, color, column, row) {
            var _this = _super.call(this, game, null, "square") || this;
            _this.color = color;
            _this.column = column;
            _this.row = row;
            _this.squareSprite = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(_this.color));
            _this.squareSprite.scale.set(Xhungo.GameConstants.SQUARE_WIDTH / 64);
            _this.squareSprite.anchor.set(.5);
            _this.squareSprite.inputEnabled = true;
            _this.squareSprite.events.onInputDown.add(_this.onClick, _this);
            _this.squareSprite.events.onInputOver.add(_this.onOver, _this);
            _this.squareSprite.events.onInputOut.add(_this.onOut, _this);
            _this.add(_this.squareSprite);
            _this.overSprite = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(Xhungo.GameConstants.WHITE_SQUARE));
            _this.overSprite.scale.set(Xhungo.GameConstants.SQUARE_WIDTH / 64);
            _this.overSprite.anchor.set(.5);
            _this.overSprite.visible = false;
            _this.overSprite.alpha = .25;
            _this.add(_this.overSprite);
            return _this;
        }
        Square.prototype.onClick = function () {
            console.log(this.column, this.row);
        };
        Square.prototype.onOver = function () {
            this.overSprite.visible = true;
        };
        Square.prototype.onOut = function () {
            this.overSprite.visible = false;
        };
        return Square;
    }(Phaser.Group));
    Xhungo.Square = Square;
})(Xhungo || (Xhungo = {}));
var Xhungo;
(function (Xhungo) {
    var Boot = (function (_super) {
        __extends(Boot, _super);
        function Boot() {
            return _super.apply(this, arguments) || this;
        }
        Boot.prototype.init = function () {
            Boot.currentInstance = this;
            this.input.maxPointers = 1;
            this.game.stage.disableVisibilityChange = true;
            this.game.stage.backgroundColor = "#cccccc";
            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.game.scale.pageAlignHorizontally = true;
            if (this.game.device.desktop) {
                this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
                this.game.scale.pageAlignHorizontally = true;
            }
            else {
                this.game.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
                this.game.scale.pageAlignHorizontally = true;
                this.game.scale.isPortrait = false;
                this.game.scale.forceOrientation(true, false);
            }
            if (Xhungo.GameConstants.DEVELOPMENT) {
                this.game.time.advancedTiming = true;
            }
        };
        Boot.prototype.preload = function () {
        };
        Boot.prototype.create = function () {
            this.game.state.start("PreLoader", true, false);
        };
        Boot.prototype.shutdown = function () {
            Boot.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        return Boot;
    }(Phaser.State));
    Xhungo.Boot = Boot;
})(Xhungo || (Xhungo = {}));
var Xhungo;
(function (Xhungo) {
    var GameConstants = (function () {
        function GameConstants() {
        }
        return GameConstants;
    }());
    GameConstants.VERSION = "0.0";
    GameConstants.ASSETS_PATH = "assets";
    GameConstants.DEVELOPMENT = true;
    GameConstants.GAME_WIDTH = 480;
    GameConstants.GAME_HEIGHT = 640;
    GameConstants.RED_SQUARE = "red square";
    GameConstants.BLUE_SQUARE = "blue square";
    GameConstants.GREEN_SQUARE = "green square";
    GameConstants.WHITE_SQUARE = "white square";
    GameConstants.SQUARE_WIDTH = 45;
    Xhungo.GameConstants = GameConstants;
})(Xhungo || (Xhungo = {}));
var Xhungo;
(function (Xhungo) {
    var PreLoader = (function (_super) {
        __extends(PreLoader, _super);
        function PreLoader() {
            return _super.apply(this, arguments) || this;
        }
        PreLoader.prototype.init = function () {
            PreLoader.currentInstance = this;
            this.load.path = Xhungo.GameConstants.ASSETS_PATH;
        };
        PreLoader.prototype.preload = function () {
            this.generateBitmapData();
            this.load.atlas("clients_textue_atlas", "/clients/clients.png", "/clients/clients.json");
            this.load.xml("clients", "/clients/clients.xml");
        };
        PreLoader.prototype.create = function () {
            this.game.state.start("BoardState", true, false);
        };
        PreLoader.prototype.generateBitmapData = function () {
            var bmd = this.game.add.bitmapData(16, 128, "intro_background", true);
            var grd = bmd.ctx.createLinearGradient(0, 0, 0, 128);
            grd.addColorStop(0, "#11c0e9");
            grd.addColorStop(1, "#6fbe4d");
            bmd.ctx.fillStyle = grd;
            bmd.ctx.fillRect(0, 0, 16, 128);
            bmd = this.game.add.bitmapData(16, 128, "yellow-gradient", true);
            grd = bmd.ctx.createLinearGradient(0, 0, 0, 128);
            grd.addColorStop(0, "#FFDC42");
            grd.addColorStop(1, "#FFB400");
            bmd.ctx.fillStyle = grd;
            bmd.ctx.fillRect(0, 0, 16, 128);
            bmd = this.game.add.bitmapData(64, 64, Xhungo.GameConstants.RED_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#FF0000";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, Xhungo.GameConstants.GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#00FF00";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, Xhungo.GameConstants.BLUE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#0000FF";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, Xhungo.GameConstants.WHITE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#FFFFFF";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 64, "dark_gradient", true);
            grd = bmd.ctx.createLinearGradient(0, 0, 0, 64);
            grd.addColorStop(0, "#283939");
            grd.addColorStop(1, "#000000");
            bmd.ctx.fillStyle = grd;
            bmd.ctx.fillRect(0, 0, 16, 64);
            bmd = this.game.add.bitmapData(16, 16, "preload-bar", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#fc8e00";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 128, "black_gradient", true);
            for (var i = 0; i < 16; i++) {
                for (var j = 0; j < 128; j++) {
                    bmd.setPixel32(i, j, 0, 0, 0, 255 * j / 127);
                }
            }
        };
        return PreLoader;
    }(Phaser.State));
    Xhungo.PreLoader = PreLoader;
})(Xhungo || (Xhungo = {}));
var Xhungo;
(function (Xhungo) {
    var SplashState = (function (_super) {
        __extends(SplashState, _super);
        function SplashState() {
            return _super.apply(this, arguments) || this;
        }
        SplashState.prototype.init = function () {
            SplashState.currentInstance = this;
        };
        SplashState.prototype.create = function () {
            var backgroundSprite = this.add.sprite(0, 0, this.game.cache.getBitmapData("yellow-gradient"));
            backgroundSprite.scale.set(Xhungo.GameConstants.GAME_WIDTH / 16, Xhungo.GameConstants.GAME_HEIGHT / 128);
            var gameTitle = this.add.text(Xhungo.GameConstants.GAME_WIDTH / 2, 100, "XHUNGO", { font: "80px Arial", fill: "#FF1493" });
            gameTitle.anchor.x = .5;
        };
        SplashState.prototype.shutdown = function () {
            SplashState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        return SplashState;
    }(Phaser.State));
    Xhungo.SplashState = SplashState;
})(Xhungo || (Xhungo = {}));
//# sourceMappingURL=xhungo.min.js.map